

* X11 -- The good parts

  
** The X11 model

   The X11 system was developed in the early 80s at a time when
   bit-mapped desplays were still a relatively new phenominon.
   Earlier graphic systems, such as the Alto or Lisp Machine systems
   started with a very definite, primitive conception of a graphical
   environment that included such things as mice, keyboards, monitors,
   processes, etc.  As each system evolved, the tendancy was for the
   graphic system to become more and more general as it needed to
   accomidate additional hardware conficgurations, and program use
   cases.


   The X11 system Itself was based on the W window system, a window
   system for the V operating system, a Unix-like micro-code based
   system that ran on a wide set of hetrogeneounos mini-computer-based
   workstations. 

   
** Typical systems

   A fully built out system would consist of a cpu conencted to
   multiple workstations each one with a pointing device, multiple
   displays of various ccapabilities and a keyboard.  Each
   workstation, collection of keyboard, pointer and monitors is called
   a display.  Each monitor of an X11 display is a screen with it's
   own resolation, color capabilities and hardware capabilities.  The
   X11 software environment is strongly oriented toward windows,
   roughly a rectangular are upon which bits can be written.  Windows
   are organized into a hierarchy which has some implication in terms
   of how they are displayed, where parents clip children and siblings
   can overlap each other with siblings on top, obscuring the portions
   of siblings that they cover.  For a window to be displayed on a
   screen, there must be at least one root window of the screen, and
   the window to be displayed must either be that root window, or must
   be a child that participates in a hierarchy of windows underneith
   that window.

** Simplifications to the API

   In practice most applications don't need and can't take advantage
   of large number of configuration parameters available under the X
   system.  Furthermore, many aspects of the system are only
   applicable software that needs to serve in an adminstrative
   capacity, such as a login prompt or window manager.  In addition
   many options available are not application on modern hardware.  The
   gem-xlib is a wrapper around X11 that provides only those features
   needed by a conventional configuration running reasonably modern
   hardware. Namely:

*** One, default display

    We assume that there is only one display that is appropriate to
    run any application on.  The application has no knowlege of any
    other displays.

*** One, default monitor

    Back in the old days an X11 system runing with multiple munitors
    would have one screen assigned to each monitor and a running
    application would have to keep trick of which monitor a window was
    running on and often change its behavior accordingly.  Most modern
    displays with multiple monitors however have a single logical
    monitor and therefore a single logical screen.  We make the
    assumption that there is one default screen and hide all other
    screen from the application.  Capabilitiens of the default screen,
    color depth, resolution, etc, appear to the application to be
    attributes of the over all graphic environment the applicaiton is
    running in.

*** One, default root window.  

    We assume there is always one single root window, created by the window
    manager.  This window is allways the direct parent all application
    top level windows.  

*** Assume modern hardware
    We assume all windows are buffered and all windows have full, true
    color.  There is no need for the application to query for color
    capabilities or worry about redrawing a window on exposure.

*** CLX subset

    By making the above assumptions we can define a subset of the CLX
    API that maps directly to the full CLX version but provides a set
    of well defined default and computed values.  This subset is much
    simpler, reducing the number of possble approaches for achieving
    various types of functionality and making it much easier to reason
    about the interface as a whole.

** 

* Displays and Screens

  Display and Screen information is for the most part hidden from the
  application, or are system attributes. The X11 display and screen
  are selected for the application based on value that make sense for
  the current machine configuration.  Multiple displays are totally
  hidden from the application as are multiple monitors, i.e. we assume
  that that multiple monitors are combined into a single 'logical'
  screen.

  Display and screen information can be thought of as read only system
  properties.  Requests for display and screen information
  implicitly initialize display and screen structure based on the most
  appropriate values.  This initialization need not be performed by
  the client application.

** display-bitmap-format
   Like xlib:display-bitmap-format except that, display is assumed so
   it takes no arguments.

** display-byte-order
   Like xlib:display-bitmap-format except that, display is assumed so
   it takes no arguments.

** display-error-handler
   <note, we'll need to make this setf able>


** display-image-lsb-first-p
   Like xlib:display-image-lsb-first-p except that, display is assumed so
   it takes no arguments.


** CLX calls not exposed

   - open-display
   - open-default-display
   - display-authorization-data <obsolete in X11?>
   - display-display
   - display-p
   - display-plist
   - display-resource-id-mask <informational only>
   - display-roots <used to retrieve screens>
   - 
