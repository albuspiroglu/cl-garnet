
* Understanding X Windows

** Objects of the X Window system

*** Objects, relaionships and operations
    Objects of the X Window system, their relationships and operations
    that can be performed on them.  Like mathmatics, it's important to
    draw a distinction between descriptions of concepts we use to
    fascilitate understanding and the formal definition of objects.
    The objects of an API are most rigorously defined by the code used
    to implement them.  More abstractly, like the axioms of a
    mathmatical system, they are statements about a system that are
    taken to be true.  

    Within the domain of describing a practical API it's useful to
    adopt the familiar languange of objects, operations and
    relationships.  But, it should be noted that these are arbitrary
    concepts.  Using Euclidian geometry as an example, and taking
    Hilberts formulation of its axioms, we have:

    - For every two points A and B there exists a line a that contains
      them both.

    - There exist at least two points on a line

    - For every three points A, B, C not situated on the same line
      there exists a plane α that contains all of them

    But this could be (clumsily) re-articulated

    - For every containership that has been distincly pointed twice,
      there exists a way to line it as well.

    - For every containership that has been lined, there is a way to
      distincly point it twice.

    - If a containership M cannot be simultaniously and distincly
      pointed in the manner of A, B, and C, while also being lined by
      some l, then that containership M can still be planed in the manner
      of α. 

    Note, that what I've done above isn't mathmatical (nor is it
    grammatical), it's just substiuding different words.  Mathmatics
    does have objects and types and relations, but depending on the
    context these can be intechanged when it's convenient to think of
    them as different things.  We should bear in mind that even though
    these things are, by convention, more distinct in APIs, it may be
    to our advantage to step out of the connenional notion of the
    graphical objects likes points and lines, being the 'things' and
    relationships being 'pointers' and operations being methods.

*** X Windows objects: displays, screens, windows
    The actual reason for me starting this document is to clarify, and
    hopefully cement, in my own mind, what is the most confusing
    aspect of the X Windows system the: high level container objects.
    
    A naive approach to creating a gui API from scratch might start
    off with the highest level container object being the Window.  An
    application which presents a gui to the user in a modern gui
    environment would request one or more windows and fill them with
    widgets for the user to interact with.  The programmer's main job
    would be defining those widgets and hooking them up to code
    snippets that perform various activities when the widets are
    manipulated in a certain way.

    This, in fact, is not too far from how many gui toolkits work.
    However, X Windows works on a much lower level, and a considerable
    amount of programming or at least understanding and planning needs
    to happen before you create your first top level window.  X
    Windows defines three types of objects whose everyday meaning is
    that of an areas upon which something can be shown: display,
    screen and window.

    In the relm of X Windows, these serve the purpose of precisely
    specifying where and how a window is to be created in an
    envirnment that is distributed, highly flexible and of adequate
    performance.

**** The Programmed Development Environment

     One of of the great things about Lisp is the degree to which your
     development environment can be programming.  In effect you build
     your development environment as you build your application.  The
     knowlege you gain from programming your development tools expands
     your understanding of the problem domain in which your
     applicaition dwells and conversely your application gives your
     development tools real concrete use case that they can be applied
     to immediately.  With respect to CLX, we will be interacting with
     a system that's both complex, sometimes not well document, with
     some parts obsolete, with a dearth of best practices, ocassional
     bit rot, and very complex network interactions.  In addition
     we'll have to cope with threading issues and some situations in
     which the repl is not quite invisible with respect to the
     behavior of the system.  

     Our development environment, therefore, must ease our access to
     the CLX API and provide insight into what's happening behind the
     scenes. So, firstly we'd like a top level function that will give
     us and entry point to the scafolding we're going to create.  That
     object is the special: 

     #+BEGIN_SRC lisp  :tangle main.c
       (defpackage :pde-clx 
         (:documentation "package for all our CLX 'programmed develop environment' tools")
         (:use :cl))

       (in-package :pde-clx)

       (defparameter *pde-clx* (make-instance 'pde-clx)
         "Entrypoint to the development environment.  For a list of functions
          evaluate this special variable in the repl.")
     #+END_SRC

     

**** The Display
     In the days of mini-computer, when X Windows was developed, one
     typical configuration for graphic workstations was a shared
     central minicomputer, which several people would share.  However,
     rather than using text terminals to log into the central box you
     would have one display unit per user.  A display unit might
     consist of multiple monitors and a collection of input devices
     all to be used simultaniously by a single user.  Roughly, that is
     the concept that an X Windows display maps to.  

     Because X is distributed, a single application, potentially, has
     the choice to log into multiple displays (even simultaneously)
     and sync those displays are dynamic and potentially effemeral,
     nothing about them can be know in advance except what has been
     established by convention.  In the case of X, on convention is
     that if the user is running a graphic X Windows environment on
     their local machine, usually there will be just one display and
     that display will have a name of :01, which is basically the way
     of saying, localhost, default port.

     One implication of this is that before you can know anything
     about the environment you're running in, you have to establish a
     connection to the X Window server, represented as the display.
     In CLX this command is 

	    	    
     #+BEGIN_SRC lisp  :tangle main.c
       /* -*- mode: lisp;  -*-

       (get-default-display)
     #+END_SRC



**** Display

     The display can be thought of as the user input and graphical
     output devices of a workstation.


* Windows management funcions 
  :all-garnet-windows
  :create-state-mask
  :create-window
  :delete-window
  :flush-output
  :initialize-device
  :initialize-window-borders
  :inject-event
  :map-and-wait
  :mouse-grab
  :raise-or-lower
  :read-an-image
  :reparent
  :set-clip-mask
  :set-cut-buffer
  :set-device-variables
  :set-screen-color-attribute-variables
  :set-drawable-to-window
  :set-window-property
  :translate-code
  :translate-coordinates
  :window-debug-id
  :window-depth
  :window-from-drawable
  :window-has-grown
  :window-to-image
  :compare-and-get-possible-stop-event
  :set-interest-in-moved
  :translate-mouse-character
  :translate-character
