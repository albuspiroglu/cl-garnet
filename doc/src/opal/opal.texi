
@chapter Opal: The Garnet Graphical Object System
@node Opal : The Garnet Graphical Object System
@anchor{opalchapter}

by Andrew Mickish, Brad A. Myers, David Kosbie, Richard McDaniel, Edward Pervin, Matthew Goldberg


@section Abstract
@node Abstract

This chapter is a refence for the graphical object system used by the
Garnet project, which is called Opal. ``Opal'' stands for the
@b{O}bject @b{P}rogramming @b{A}ggregate @b{L}ayer. Opal makes it very
simple to create and manipulate graphical objects. In particular, Opal
automatically handles object redrawing when properties of objects are
changed.


@section Introduction
@node Introduction

This document is the reference chapter for the Opal graphical object
system. Opal, which stands for the @b{O}bject @b{P}rogramming
@b{A}ggregate @b{L}ayer, is being developed as part of the Garnet
project @cite(garnet). The goal of Opal is to make it easy to create
and edit graphical objects. To this end, Opal provides default values
for all of the properties of objects, so simple objects can be drawn
by setting only a few parameters. If an object is changed, Opal
automatically handles refreshing the screen and redrawing that object
and any other objects that may overlap it. The algorithm used to
handle the automatic update is documented in @cite{Vander Zanden
89}. Objects in Opal can be connected together using
@emph{constraints}, which are relations among objects that are
declared once and automatically maintained by the system. An example
of a constraint is that a line must stay attached to a
rectangle. Constraints are discussed in @ref{Garnet Tutorial} and
@ref{KR chapter}.

Opal is built on top of the @code{gem} module, which is the
@b{G}raphics and @b{E}vents @b{M}odule that refers to machine-specific
functions. @code{gem} provides an interface to both X Windows and the
Macintosh QuickDraw system, so applications implemented with Opal
objects and functions will run on either platform without
modification.

@cindex{Window Managers}
Opal is known to work in virtually any Common Lisp environment on many
different machines (@xref{Overview}). Opal will also work with any
window manager on top of X11, such as @code{uwm}, @code{twm},
@code{awm}, etc. Additionally, Opal provides support for color and
gray-scale displays.

Within the Garnet toolkit, Opal forms an intermediary layer. It uses
facilities provided by the KR object and constraint system @cite{Giuse
89}, and provides graphical objects that comprise the higher level
gadgets. To use Opal, the programmer should be familiar with the ideas
of objects and constraints presented in the @ref{On-line Tour Through
Garnet} and @ref{Garnet Tutorial}. Opal does not handle any input
from the keyboard or mouse. That is handled by the separate
@emph{Interactors} module. On top of Opal is also the
@emph{Aggregadgets} module which makes it significantly easier to
create groups of objects. A collection of pre-defined interaction
techniques, such as menus, scroll bars, buttons, and sliders, is
provided in the Garnet Gadget set which, of course, use @emph{Opal},
@emph{Interactors}, and @emph{Aggregadgets}.

The highest level of Garnet, built using the toolkit, contains the
graphical construction tools that allow significant parts of
application graphics to be created without programming. The most
sophisticated tool is @emph{Lapidary}. When @emph{Lapidary} is used,
the programmer should rarely need to write code that calls @emph{Opal}
or any other part of the toolkit.

@node Overview of Opal
@section Overview of Opal

@node Basic Concepts
@subsection Basic Concepts

The important concepts in Opal are @emph{windows}, @emph{objects}, and
@emph{aggregates}.

@emph{X11} and @emph{Macintosh QuickDraw} both allow you to create
windows on the screen. In @emph{X} they are called "@emph{drawables}",
and in @emph{QuickDraw} they are called "views". An @emph{Opal} window
is a schema that contains pointers to these machine-specific
structures. Like in @emph{X11} and @emph{QuickDraw}, Opal windows can
be nested inside other windows (to form ``sub-windows''). Windows
clip all graphics so they do not extend outside the window's borders.
Also, each window forms a new coordinate system with @math{(0,0)} in the
upper left corner. The coordinate system is one-to-one with the pixels
on the screen (each pixel is one unit of the coordinate
system). Garnet windows are discussed fully in section @ref{windows}.

The basics of object-oriented programming are beyond the scope of this
chapter. The @emph{objects} in @emph{Opal} use the @emph{KR} object
system @cite{Giuse 89}, and therefore operate as a prototype-instance
model. This means that each object can serve as a prototype (like a
class) for any further instances; there is (almost) no distinction
between classes and instances. Each graphic primitive in @emph{Opal} is
implemented as an object. When the programmer wants to cause something
to be displayed in @emph{Opal}, it is necessary to create instances of these
graphical objects. Each instance remembers its properties so it can be
redrawn automatically if the window needs to be refreshed or if
objects change.

@cindex{components}
@cindex{parent}

An @emph{aggregate} is a special kind of Opal object that holds a
collection of other objects. Aggregates can hold any kind of graphic
object including other aggregates, but an object can only be in one
aggregate at a time. Therefore, aggregates form a pure hierarchy. The
objects that are in an aggregate are called @emph{components} of that
aggregate, and the aggregate is called the @emph{parent} of each of
the components. Each window has associated with it a top-level
aggregate. All objects that are displayed in the window must be
reachable by going through the components of this aggregate
(recursively for any number of levels, in case any of the components
are aggregates themselves).

The prototype inheritance hierarchy for all graphical objects in @emph{Opal} is
shown in Figure @ref{ObjectSchemata}.

@float Figure, fig:ex51
@center @image{opal-objects, 5.5in}
@caption{The objects in Opal and their slots. Each object also inherits slots
from its prototype (the object to its left). The default
values for the slots are shown. Those with values like @code{#k<F21>} have
formulas in them (@xref{Garnet Tutorial} and @ref{KR chapter}).}
@anchor{ObjectSchemata}
@end float

@node The Opal Package
@subsection The Opal Package

@cindex{Opal Package}
@cindex{use-package}
Once Garnet is loaded, all the graphical objects reside in the @code{opal}
package. We recommend that programmers explicitly reference names
from the @code{opal} package, for example: @code{opal:rectangle}, but you
can also get complete access to all exported symbols by doing a
@code{(use-package :opal)}. All of the symbols referenced in this
document are exported from @code{opal}, unless otherwise stated.


@subsection Simple Displays
@node Simple Displays

An important goal of Opal is to make it significantly easier to create
pictures, hiding most of the complexity of the X11 and QuickDraw
graphics models. Therefore, there are appropriate defaults for all
properties of objects (such as the color, line-thickness, etc.). These
only need to be set if the user desires to. All of the complexity of
the X11 and QuickDraw graphics packages is available to the Opal user,
but it is hidden so that you do not need to deal with it unless it is
necessary to your task.

To get the string "Hello world"
displayed on the screen (and refreshed automatically if the window is
covered and uncovered), you only need the following simple program:

@cindex{Hello World}
@smallexample
(use-package :kr)

;; @i{Create a small window at the upper left corner of the screen}
(create-instance 'win inter:interactor-window
  (:left 10)(:top 10)
  (:width 200)(:height 50))

;; @i{create an aggregate for the window}
(s-value win :aggregate (create-instance 'agg opal:aggregate))

;; @i{create the string}
(create-instance 'hello opal:text
  (:left 10)(:top 20)
  (:string "Hello World"))

(opal:add-component agg hello) ; @i{add the string to the aggregate}

(opal:update win) ; @i{cause the window and string to be displayed}
@end smallexample

Opal also strives to make it easy to change the picture. To change the
@emph{x} position of the rectangle only requires setting the value of the
@code{:left} slot;  Opal handles the refresh:


@smallexample
(s-value hello :left 50)  ; @i{change the position}

(opal:update win) ; @i{cause the change to be visible}
@end smallexample

Note that the programmer never calls @emph{``draw''} or
@emph{``erase''} methods on objects. This is a significant difference
from other graphical object systems. Opal causes the objects to be
drawn and erased at the appropriate times automatically.

@ref{specificobs,Specific Graphical Objects, Specific Graphical
Objects} and @ref{fig:ex3} present all the kinds of objects
available in Opal.


@subsection Object Visibility
@node Object Visibility

@cindex{visibility}

Objects are visible if and only if their @code{:visible} slot is
non-@code{nil} and they are a component of a visible aggregate that
(recursively) is attached to a window. (Aggregates are discussed in
the chapter @ref{aggregates}.)  Therefore, to make a single object
@b{in}visible, its @code{:visible} slot can be set to @code{nil}. To make it
visible again, it is only necessary to set the @code{:visible} slot to
@code{t}. Alternatively, the object can be removed from its aggregate to
make it invisible.

Of course an object with a non-@code{nil} @code{:visible} slot in a visible
aggregate hierarchy might be completely obscured behind another object
so it cannot be seen.

Every object has a default formula in its @code{:visible} slot that
depends on the visibility of the its @emph{parent} (the @emph{parent}
is the aggregate that it is in). Therefore, to make an entire
aggregate and all its components invisible, it is only necessary to
set the @code{:visible} slot of the aggregate. All the components will
become invisible (in this case, it is important that the components
have the default formula in their @code{:visible} slot).

If you provide a specific value or formula for the @code{:visible} slot to
override the default formula, it is important that this value be @code{nil}
if the object's parent aggregate is not visible. Otherwise, routines such as
@code{point-in-gob} may report that a point is inside the object, even though
the object is invisible.

For example, if you want the @code{:visible} slot of an object to depend
on its own @code{:selected} slot, you should additionally constrain it
to depend on the visibility of its parent:

@smallexample
(s-value obj :visible (o-formula (if (gvl :parent :visible)
                                     (gvl :selected))))
@end smallexample


@subsection View Objects
@node View Objects
@cindex{view-object}
At the top of the class hierarchy is the class @code{opal:view-object}.

@cindex{left}
@cindex{top}
@cindex{width}
@cindex{height}
@cindex{visible}
@smallexample
(create-instance 'opal:view-object nil
  (:left 0)
  (:top 0)
  (:width 0)
  (:height 0)
  (:visible (o-formula ...))
  ...)
@end smallexample

Each view object has a bounding box as defined by the left, top corner and
a width and height. The @code{:left}, @code{:top}, @code{:width}, and @code{:height}
slots describe the bounding box for the object. Coordinates are given as
non-negative fixnums, so any formulas must apply @code{floor} or @code{round}
to all values that could generate floating point or ratio values. In
particular, be
careful using "@code{/}" for division, because that generates ratios or floats
which are not legal values.

With the exception of windows, coordinates of objects are relative to the
window in which the object appears. (If the window in which an object
appears has borders, then the coordinates of the object are relative to the
@emph{inner} edges of the borders.)  Windows coordinates are given in
the coordinate system of the parent of the window, or in the case of top level
windows, given in screen coordinates.

@subsection Read-Only Slots
@node Read-Only Slots
@cindex{parent (slot)}
@cindex{window (slot)}

There are many slots in graphical objects, windows, and interactors that are
set internally by Garnet and should never be set by users. For example,
the @code{:parent}, @code{:window}, and @code{:components} slots of graphical objects
are set automatically whenever the objects are added to an aggregate using
@code{opal:add-component}, and should not be set chapterly.

All public slots that are intended to be
read-only are labeled as such in their object's definitions. Internal slots
of an object (used for data or calculations) that are not documented should
be considered read-only. Setting these
slots "temporarily" or during initialization can lead to insidious errors
at run-time.


@subsection Different Common Lisps
@node Different Common Lisps
Running Opal under different implementations of Common Lisp should be
almost the same. The differences in the locations of files, such the
Opal binary files, and the cursors, bitmaps and fonts, are all handled in
the top level @code{garnet-loader} file, which defines variables for the
locations of the files. 

@cindex{Allegro Common Lisp}
@cindex{Lucid Common Lisp}
@cindex{CMU Common Lisp}
@cindex{lispworks}
@cindex{Main-Event-Loop}
@cindex{Update}
An important difference among Lisp interpreters is the @code{main-event-loop}.
In CMU Common Lisp, there is a process running in the background that
allows interactors to always run with automatic refresh of Garnet
windows.@footnote{Automatic refresh while an interactor is running is
different from updating a window after you chapterly make a change with
@code{s-value}. Unless changes are made by the interactors, you will
still have to call @code{opal:update} to see the graphics change.}
In Allegro, Lucid, and LispWorks, Garnet creates its own @code{main-event-loop}
process in the background that does the same thing. Some Lisp
interpreters have problems running this process in the background,
and you may have to call @code{inter:main-event-loop} by hand in order
to run the interactors. Consult the Interactors chapter for directions
on how to control the @code{main-event-loop} process.


@section Slots of All Graphical Objects
@node Slots of All Graphical Objects

This section discusses properties shared by all graphical objects.

@smallexample

@cindex{graphical-object}

(create-instance 'opal:Graphical-Object opal:view-object
  (:left 0)   (:top 0)
  (:width 20) (:height 20)
  (:line-style opal:default-line-style)
  (:filling-style nil)
  (:draw-function :copy)
  (:select-outline-only nil)
  (:hit-threshold 0)
  ...)
@end smallexample

@subsection Left, top, width and height
@node Left, top, width and height
Graphical objects are objects with graphical properties that can be
displayed in Garnet windows. They inherit the @code{:left}, @code{:top}, @code{:width} and
@code{:height} slots from @code{view-objects}, of course.

@node Line style and filling style
@subsection Line style and filling style

@cindex{line-style}
@cindex{filling-style}
The @code{:line-style} and @code{:filling-style} slots hold instances of the
@code{opal:line-style} prototype and the @code{opal:filling-style} prototype,
respectively.
These objects parameterize the drawing of graphical objects. Graphical objects
with a @code{:line-style} of @c[nil] will not have an outline. Those with a
@code{:filling-style} of @c[nil] will have no filling. Otherwise, the
@code{:line-style} and @code{:filling-style} control various parameters of the
outline and filling when the object is drawn.
Appropriate values for the @code{:line-style} and @code{:filling-style} slots are
described below in the chapter @ref{Graphic Qualities}.

@subsection Drawing function
@node Drawing function
@cindex{draw-function}
The value of the @code{:draw-function} slot determines how the object
being drawn will affect the graphics already in the window. For example,
even though a line may be "black", it could cause objects that it covers
to be "whited-out" if it is drawn with a @code{:clear} draw-function.
A list of all allowed values for the
@code{:draw-function} slot is included in Figure @ref{fig:ex1b}.

Every time an object is displayed in a window, its drawn bits interact
with the bits of the pixels already in the window. The way the
object's bits (the source bits) interact with the window's current
bits (the destination bits) depends on the draw function.  The
@code{:draw-function} is the bitwise function to use in calculating
the resulting bits. Opal insures that black pixels pretend to be ``1''
and white pixels pretend to be ``0'' for the purposes of the drawing
functions (independent of the values of how the actual display works).
Therefore, when using the colors black and white, you can rely on
@code{:or} to always add to the picture and make it more black, and
@code{:and} to take things away from the picture and make it more
white.

Results of draw-functions on colors other than black and white tend to
be random. This is because X11 and Mac QuickDraw initialize the
colormap with colors stored in an arbitrary order, and a color's index
is unlikely to be the same between Garnet sessions. So performing a
logical operation on two particular colors will yield a different
resulting color in different Garnet sessions.

One of the most useful draw functions is @code{:xor}, which occurs frequently
in feedback objects. If a black rectangle is XOR'ed over another object,
the region under the rectangle will appear in inverse video. This technique
is used in the @code{gg:text-button}, and many other standard Garnet gadgets.

A fundamental limitation of the PostScript language prevents it from
rendering draw functions properly. If @code{opal:make-ps-file} (see chapter
@ref{printing}) is used to generate a PostScript file from a Garnet window,
the draw functions used in the window will be ignored in the printed image.
Usually the graphics in the window can be reimplemented without using
draw-functions to get the same effect, so that the picture generated by
@code{opal:make-ps-file} matches the window exactly.

@anchor{draw-fn-fig}
@cindex{clear}
@cindex{copy}
@cindex{no-op}
@cindex{copy-inverted}
@cindex{invert}
@cindex{or}
@cindex{and}
@cindex{xor}
@cindex{equiv}
@cindex{nand}
@cindex{nor}
@cindex{and-inverted}
@cindex{and-reverse}
@cindex{or-inverted}
@cindex{or-reverse}


@float Figure, fig:ex52
@multitable @columnfractions .30 .70
@headitem draw-function @tab function

@item @code{:clear} @tab 0

@item @code{:set} @tab 1

@item @code{:copy} @tab src

@item @code{:no-op} @tab dst

@item @code{:copy-inverted} @tab (not src)

@item @code{:invert} @tab (not dst)

@item @code{:or} @tab src or dst

@item @code{:and} @tab src and dst

@item @code{:xor} @tab src xor dst

@item @code{:equiv} @tab (not src) xor dst

@item @code{:nand} @tab (not src) or (not dst)

@item @code{:nor} @tab (not src) and (not dst)

@item @code{:and-inverted} @tab (not src) and dst

@item @code{:and-reverse} @tab src and (not dst)

@item @code{:or-inverted} @tab (not src) or dst

@item @code{:or-reverse} @tab src or (not dst)

@end multitable

@caption{Allowed values for the @code{:draw-function} slot and their logical.}
@end float

@subsection @code{select-outline-only}, @code{hit-threshold}, and @code{pretend-to-be-leaf}
@node @code{select-outline-only}, @code{hit-threshold}, and @code{pretend-to-be-leaf}

@cindex{select-outline-only}
@cindex{hit-threshold}
@cindex{pretend-to-be-leaf}
The @code{:select-outline-only}, @code{:hit-threshold}, @code{:pretend-to-be-leaf},
and @code{:visible} slots are used by functions which search for objects
given a rectangular region or an @math{(x,y)} coordinate (see sections
@ref{rect-regions} and @ref{querying-children}). If the
@code{:select-outline-only} slot is non-@c{nil} then @code{point-in-gob} will
only report hits only on or near the outline of the object.
Otherwise, the object will be sensitive over the entire region (inside
and on the outline). The @code{:select-outline-only} slot defaults to @code{nil}.
@sp 1

The @code{:hit-threshold} slot controls the sensitivity of the internal Opal
@code{point-in-gob} methods that decide whether an event (like a mouse click)
occurred "inside" an object. If the @code{:hit-threshold} is 3, for example,
then an event 3 pixels away from the object will still be interpreted as being
"inside" the object. When @code{:select-outline-only} is T, then any event
directly on the outline of the object, or within 3 pixels of the outline,
will be interpreted as a hit on the object. The default value of
@code{:hit-threshold} is 0.

@b{Note:} it is often necessary to set the @code{:hit-threshold} slot
of all aggregates @emph{above} a target object; if an event occurs
"outside" of an aggregate, then the @code{point-in-gob} methods will
not check the components of that aggregate. The function
@code{opal:set-aggregate-hit-threshold} (see section @ref{agg-class})
can simplify this procedure.

When an aggregate's @code{:pretend-to-be-leaf} slot contains the value
@c(t), then the functions @code{point-to-component} and
@code{leaf-objects-in-rectangle} will treat that aggregate as a leaf
object (even though the aggregate has components). This might be
useful in searching for a button aggregate in an aggrelist of buttons.



@section Methods on All @code{view-objects}
@node Methods on All @code{view-objects}

@anchor{GobMethods}
There are a number of methods defined on all subclasses of
@code{opal:view-object}. This section describes these methods and other
accessors defined for all graphical objects.

@subsection Standard Functions
@node Standard Functions

@anchor{stdfuncs}
The various slots in objects, like @code{:left, :top, :width, :height,
:visible}, etc. can be set and accessed using the standard
@code{s-value} and @code{gv} functions and macros. Some additional
functions are provided for convenience in accessing and setting the size
and position slots. Some slots of objects should not be set (although they can
be accessed). This includes the @code{:left, :top, :width,} and @code{:height}
of lines and polylines (since they are computed from the end points), and
the components of aggregates (use the @code{add-component} and
@code{remove-component} functions).

@cindex{point-in-gob}

@defmethod {view-object} opal:point-in-gob graphical-object x y

This routine determines whether the point @math{(@var{x},@var{y})} is
inside the graphical object ("gob" stands for graphical object). This
uses an object-specific method, and is dependent on the setting of the
@code{:select-outline-only} and @code{:hit-threshold} slots in the
object as described above.

The @code{:point-in-gob} methods for @code{opal:polyline} and
@code{opal:arrowhead} actually check whether the point is inside the
polygon, rather than just inside the polygon's bounding
box. Additionally, the @code{:hit-full-interior-p} slot of a polygon
controls which algorithm is used to determine if a point is inside it
(see section @ref{polyline}).  If an object's @code{:visible} slot is
@code{nil}, then @code{point-in-gob} will always return @code{nil} for
that object.

@end defmethod

@defmethod opal:destroy graphical-object &optional erase

This causes the object to be removed from an aggregate (if it is in
one), and the storage for the object is deallocated.  You can
@code{destroy} any kind of object, including windows. If you destroy a
window, all objects inside of it are automatically
destroyed. Similarly, if you destroy an aggregate, all objects in it
are destroyed (recursively).  When you destroy an object, it is
automatically removed from any aggregates it might be in and erased
from the screen. If destroying the object causes you to go into the
debugger (usually due to illegal values in some slots), you might try
passing in the @var{erase} parameter as @code{nil} to cause Opal to
not erase the object from the window. The default for @var{erase} is
@code{t}.

Often, it is not necessary to destroy individual objects because they
are destroyed automatically when the window they are in is destroyed.

@end defmethod

@defmethod opal:rotate graphical-object angle &optional center-x center-y

The @code{rotate} method rotates @var{graphical-object} around
@math(@var{center-x}, @var{center-y})] by @var{angle} radians. It does
this by changing the values of the controlling points (using
@code{s-value}) for the object (e.g., the values for @code{:x1},
@code{:y1}, @code{:x2}, and @code{:y2} for lines). Therefore, it is a
bad idea to call @code{rotate} when there are formulas in these slots.
If @var{center-x} or @var{center-y} are not specified, then the
geometric center of the object (as calculated by using the center of
its bounding box) is used. Certain objects can't be rotated, namely
Ovals, Arcs, Roundtangles, and Text. A rectangle that is rotated
becomes a polygon and remains one even if it is rotated back into its
original position.
@end defmethod

@subsection Extended Accessor Functions
@node Extended Accessor Functions
@anchor{Extended-accessors}

The following macros, functions and @code{setf} methods are defined to
make it easier to access the slots of graphical objects.

When set, the first set of functions below only change the position of
the graphical object; the width and height remain the same. The
following are both accessors and valid place arguments for
@code{setf}. These use @code{s-value} and @code{g-value} so they
should not be used inside of formulas, use the @code{gv-}@var{xxx}
forms below instead inside of formulas.



@defun opal:bottom graphical-object
@defunx opal:right graphical-object
@defunx opal:center-x graphical-object
@defunx opal:center-y graphical-object

To use one of these in a @code{setf}, the form is
@smallexample
(setf (opal:bottom obj) new-value)
@end smallexample

In contrast to the above accessors, the four below when set change the
size of the object. For example, changing the top-side of an object
changes the top and height of the object; the bottom does not change.

@end defun

@defmac opal:top-side graphical-object value
@defmacx opal:left-side graphical-object value
@defmacx opal:bottom-side graphical-object value
@defmacx opal:right-side  graphical-object value

Opal also provides the following accessor functions which set up
dependencies and should only be used inside of formulas. For more
information on using formulas, see the example section and the KR document.
These should not be used outside of formulas.

@end defmac

@defun opal:gv-bottom graphical-object
@defunx opal:gv-right graphical-object
@defunx opal:gv-center-x graphical-object
@defunx opal:gv-center-y graphical-object


@end defun

The following functions should be used in the @code{:left} and
@code{:top} slots of objects, respectively. The first returns the
value for @code{:left} such that @code{(gv-center-x :self)} equals
@code{(gv-center-x object)}.

@defun opal:gv-center-x-is-center-of object
@defunx opal:gv-center-y-is-center-of object

In more concrete terms, if you had two objects OBJ1 and OBJ2, and
you wanted to constrain the @code{:left} of OBJ1 so that the centers of
OBJ1 and OBJ2 were the same, you would say:


@smallexample
(s-value obj1 :left (o-formula (opal:gv-center-x-is-center-of obj2)))
@end smallexample

@end defun

The next group of functions are for accessing multiple slots
simultaneously. These are not @code{setf}'able.


@defun opal:center graphical-object @
  (declare (values center-x center-y))

@defunx opal:set-center graphical-object center-x center-y

@defunx opal:bounding-box graphical-object
  (declare (values left top width height))

@defunx opal:set-bounding-box graphical-object left top width height

@defunx opal:set-position graphical-object left top

@defunx opal:set-size graphical-object width height

@end defun

@section Graphic Qualities
@node Graphic Qualities

@anchor{GraphicQualities}

@cindex{Graphic-quality}

Objects that are instances of class @code{opal:graphic-quality} are
used to specify a number of related drawing qualities at one time. The
@code{:line-style} and @code{:filling-style} slots present in all
graphical objects hold instances of @code{opal:line-style} and
@code{opal:filling-style} objects. The @code{opal:line-style} object
controls many parameters about how a graphical object's outline is
displayed. Likewise, the @code{opal:filling-style} object controls how
the filling of objects are displayed. @ref{fig:ex2}
shows the graphic qualities provided by Opal.

@float Figure, fig:ex53
@center @image{gquality, 3.5in}
@caption{The graphic qualities that can be applied to objects.}
@end float

The properties controlled by the @code{opal:line-style},
@code{opal:filling-style}, and @code{opal:font} objects are similar to
PostScript's graphics state (described in section 4.3 in the
PostScript Language Reference chapter) or the XLIB graphics context
(described in the X Window System Protocol Manual). The Opal design is
simpler since there are appropriate defaults for all values and you
only have to set the ones you are interested in.  The
@code{:line-style} slot in graphical objects holds an object that
contains all relevant information to parameterize the drawing of lines
and outlines. Similarly, the @code{:filling-style} controls the
insides of objects. The @code{:font} slot appears only in text and
related objects, and controls the font used in drawing the string.

@cartouche
Although the properties of these graphic qualities can be changed
after they are created, for example to make a font change to be
italic, Garnet will not notice the change because the font object
itself is still the same (i.e., the value of the @code{:font} slot has
not changed).  Therefore, line-styles, filling-styles and fonts should
be considered read-only after they are created. You can make as many
as you want and put them in objects, but if you want to change the
property of an object, insert a @emph{new} line-style, filling-style,
or font object rather than changing the slots of the style or font
itself. If a set of objects should share a changeable graphics
quality, then put a formula into each object that calculates which
graphic quality to use, so they will all change references together,
rather than sharing a pointer to a single graphic quality object that
is changed.
@end cartouche

@cindex{color}

@node Color
@subsection Color

@node Using Default Colors
@subsubsection Using Default Colors

Like other graphic qualities, Opal comes with a set of predefined
colors.  The following colors are exported from Opal. They are
instances of @code{opal:color} with the appropriate values for their
@code{:red}, @code{:green}, and @code{:blue} slots as shown:

@cindex{white}
@cindex{black}
@cindex{yellow}
@cindex{purple}
@cindex{cyan}
@cindex{orange}
@cindex{motif-gray}
@cindex{motif-blue}
@cindex{motif-orange}
@cindex{motif-green}

@multitable @columnfractions .20 .18 .2 .18
@headitem Name @tab Red @tab Green @tab Blue 
@item @code{opal:red}
@tab @code{(:red 1.0)}
@tab @code{(:green 0.0)}
@tab @code{(:blue 0.0)}
@item @code{opal:green}
@tab @code{(:red 0.0)}
@tab @code{(:green 1.0)}
@tab @code{(:blue 0.0)}
@item @code{opal:blue}
@tab @code{(:red 0.0)}
@tab @code{(:green 0.0)}
@tab @code{(:blue 1.0)}
@item @code{opal:yellow}
@tab @code{(:red 1.0)}
@tab @code{(:green 1.0)}
@tab @code{(:blue 0.0)}
@item @code{opal:purple}
@tab @code{(:red 1.0)}
@tab @code{(:green 0.0)}
@tab @code{(:blue 1.0)}
@item @code{opal:cyan}
@tab @code{(:red 0.0)}
@tab @code{(:green 1.0)}
@tab @code{(:blue 1.0)}
@item @code{opal:orange}
@tab @code{(:red 0.75)}
@tab @code{(:green 0.25)}
@tab @code{(:blue 0.0)}
@item @code{opal:white}
@tab @code{(:red 1.0)}
@tab @code{(:green 1.0)}
@tab @code{(:blue 1.0)}
@item @code{opal:black}
@tab @code{(:red 0.0)}
@tab @code{(:green 0.0)}
@tab @code{(:blue 0.0)}

@end multitable

The following objects are also instances of @code{opal:color}, with
RGB values chosen to correspond to standard Motif colors:

@vtable @code
@item opal:motif-gray
@item opal:motif-blue
@item opal:motif-green
@item opal:motif-orange
@item opal:motif-light-gray
@item opal:motif-light-blue
@item opal:motif-light-green
@item opal:motif-light-orange
@end vtable



@cindex{red}
@cindex{green}
@cindex{blue}

@node Prototype and Definition
@subsubsection Prototype and Definition

To create your own custom colors create an instance of the graphical
quality @code{opal:color}.

@deftp {Inherits from @code{graphic-quality}} color :color-p :red :green @
        :blue :color-name
@end deftp

@cartouche
@smallexample
(create-instance 'opal:color opal:graphic-quality
   (:constant '(:color-p))
   @emph{;; Set during initialization according to the display - @code{t} if color,}
   @emph{;; @code{nil} otherwise}
   (:color-p ...)  
   (:red 1.0)
   (:green 1.0)
   (:blue 1.0)
   (:color-name nil))
@end smallexample
@end cartouche

@defcv {Slot} @code{color} :red
@defcvx {Slot} @code{color} :green
@defcvx {Slot} @code{color} :blue

Users can create any color they want by creating an object of type
@code{opal:color}, and setting the @code{:red}, @code{:green} and
@code{:blue} slots to be any real number between 0.0 and 1.0.

@end defcv

@cindex{color-name}

@defcv {Slot} @code{graphic-quality} :color-name

An @code{opal:color} can also be created using the @code{:color-name}
slot instead of the @code{:red, :green,} and @code{:blue} slots. The
@code{:color-name} slot takes a string such as @code{"pink"} or atom
such as @code{'pink}. These names are looked up by the X11 server, and
the appropriate color will be returned.  Usually the list of allowed
color names is stored in the file @code{/usr/misc/lib/rgb.txt} or
@code{/usr/misc/.X11/lib/rgb.txt} or @code{/usr/lib/X11/rgb.txt}.
However, if the Xserver does not find the color, an error will be
raised. There is apparently no way to ask X11 whether it understands a
color name. Thus, code that uses the @code{:color-name} slot may not
be portable across machines. Note that the @code{:red, :green,} and
@code{:blue} slots of the color are set automatically in color objects
defined with names.

For example:
@smallexample
(create-instance 'fun-color opal:color (:color-name "papaya whip"))
@end smallexample

@end defcv

@cindex{color-p}

@defcv {Slot} @code{graphic-quality} :color-p

The @code{:color-p} slot of @code{opal:color} is automatically set to @code{t} or
@code{nil} depending on whether or not your screen is color or
black-and-white (it is also @code{t} if the screen is gray-scale).
This should not be set by hand. The Motif widget set contains formulas
that change their display mode based on the value of @code{:color-p}.

@end defcv

@cindex{line-style}

@subsection @code{line-style} Class
@node @code{line-style} Class


@subsubsection Using Default Line Styles
@node Using Default Line Styles

Before you read the sordid details below about what all these slots
mean, be aware that most applications will just use the default line
styles provided. The following line-styles (except
@code{opal:no-line}) are all instances of @code{opal:line-style}, with
particular values for their @code{:line-thickness},
@code{:line-style}, or @code{:dash-pattern} slots. Except as noted,
they are identical to @code{opal:default-line-style}. All of them are
black.

@cindex{no-line}
@cindex{default-line-style}
@cindex{thin-line}
@cindex{line-0}
@cindex{line-1}
@cindex{line-2}
@cindex{line-4}
@cindex{line-8}
@cindex{dotted-line}
@cindex{dashed-line}

@multitable @columnfractions .20 .80
@headitem Name @tab Description
@item @code{opal:no-line}
@tab @code{nil}
@item @code{opal:thin-line}
@tab same as @code{opal:default-line-style}
@item @code{opal:line-0}
@tab `` `` ``
@item @code{opal:line-1}
@tab @code{:line-thickness} = 1
@item @code{opal:line-2}
@tab @code{:line-thickness} = 2
@item @code{opal:line-4}
@tab @code{:line-thickness} = 4
@item @code{opal:line-8}
@tab @code{:line-thickness} = 8
@item @code{opal:dotted-line}
@tab @code{:line-style} = @code{:dash}, and @code{:dash-pattern = '(1 1)}
@item @code{opal:dashed-line}
@tab @code{:line-style} = @code{:dash}, and @code{:dash-pattern = '(4 4)}
@end multitable

The following line-styles are all identical to @code{opal:default-line-style},
except that their @code{:foreground-color} slot is set with the appropriate
instance of @code{opal:color}. For example, the @code{:foreground-color} slot
of @code{opal:red-line} is set to @code{opal:red}.

@vtable @code
@item opal:red-line
@item opal:green-line
@item opal:blue-line
@item opal:yellow-line
@item opal:purple-line
@item opal:cyan-line
@item opal:orange-line
@item opal:white-line
@end vtable

@cartouche
For each of the predefined line-styles above, you may @b{not} customize
any of the normal parameters described below. These line-styles have
been created with their @code{:constant} slot set to @code{t} for
efficiency, which prohibits the overriding of the default values.
You may use these line-styles as values of any @code{:line-style} slot,
but you may not create customized instances of them. Instead, to create
a thick red line-style, for example, you should create your own
instance of @code{opal:line-style} with appropriate values for
@code{:line-thickness}, @code{:foreground-color}, etc. See the examples at
the end of this section.

@end cartouche

@cindex{line-style}

@node Prototype and Definition @code{opal:line-style}
@subsubsection Prototype and Definition @code{opal:line-style}

@deftp {Inherits from @code{graphic-quality}} line-style :line-thickness :cap-style @
       :join-style :line-style :foreground-color :background-color @
       :dash-pattern :stipple

@end deftp

@cartouche
@smallexample
(create-instance 'opal:line-style opal:graphic-quality
  (:maybe-constant
   '(:line-thickness :cap-style :join-style :line-style 
     :dash-pattern :foreground-color :background-color :stipple))
  (:line-thickness 0)
  (:cap-style :butt)
  (:join-style :miter)
  (:line-style :solid)
  (:foreground-color opal:black)
  (:background-color opal:white)
  (:dash-pattern nil)
  (:stipple nil))

(create-instance 'opal:default-line-style opal:line-style
   (:constant t))
@end smallexample
@end cartouche
@cindex{line-thickness}

@defcv {Slot} @code{line-style} :line-thickness

The @code{:line-thickness} slot holds the integer line thickness in pixels.
There may be a subtle difference between lines with thickness zero and
lines with thickness one. Zero thickness lines are free to use a device
dependent line drawing algorithm, and therefore may be less aesthetically
pleasing. They are also probably drawn much more efficiently. Lines with
thickness one are drawn using the same algorithm with which all the thick lines
are drawn. For this reason, a thickness zero line parallel to a thick line
may not be as aesthetically pleasing as a line with thickness one.
@sp 1

For objects of the types @code{opal:rectangle}, @code{opal:roundtangle},
@code{opal:circle} and @code{opal:oval}, increasing the @code{:line-thickness} of
the @code{:line-style} will not increase the @code{:width} or @code{:height} of
the object; the object will stay the same size, but the solid black
boundary of the object will extend @emph{inwards} to occupy more of the
object. On the other hand, increasing the @code{:line-thickness} of the
@code{:line-style} of objects of the types @code{opal:line},
@code{opal:polyline} and @code{opal:arrowhead} will increase the objects'
@code{:width} and @code{:height}; for these objects the thickness will extend
@emph{outward} on @emph{both sides} of the line or arc.

@end defcv

@cindex{cap-style}

@defcv {Slot} @code{line-style} :cap-style

The @code{:cap-style} slot describes how the endpoints of line
segments are drawn:

@cindex{butt}
@cindex{not-last}
@cindex{round}
@cindex{projecting}

@sp 1

@multitable @columnfractions .17 .65
@item @code{:butt}
@tab Square at the endpoint (perpendicular to the slope of the line)
with no projection beyond. 
@item @code{:not-last}
@tab Equivalent to @code{:butt}, except that for
@code{:line-thickness} 0 or 1 the final endpoint is not drawn.
@item @code{:round}
@tab A circular arc with the diameter equal to the @code{:line-thickness}
centered on the endpoint.
@item @code{:projecting}
@tab Square at the end, but the path continues beyond the
endpoint for a distance equal to half of the @code{:line-thickness.}
@end multitable

@end defcv

@cindex{:join-style}

@defcv {Slot} @code{line-style} :join-style

The @code{:join-style} slot describes how corners (where multiple
lines come together) are drawn for thick lines as part of poly-line,
polygon, or rectangle kinds of objects. This does not affect
individual lines (instances of @code{opal:line}) that are part of an
aggregate, even if they happen to have the same endpoints.

@sp 1

@cindex{miter}
@cindex{round}
@cindex{bevel}

@vtable @code
@item :miter
The outer edges of the two lines extend to meet at an angle.
@item :round
A circular arc with a diameter equal to the @code{:line-thickness} is
drawn centered on the join point.
@item :bevel
@itemx :butt
endpoint styles, with the triangular notch filled.
@end vtable

@end defcv

@cindex{foreground-color}
@cindex{background-color}

@defcv {Slot} @code{line-style} :foreground-color

The @code{:foreground-color} slot contains an object of type
@code{opal:color} which specifies the color in which the line will appear
on a color screen. The default value is @code{opal:black}.

@end defcv

@defcv {Slot} @code{line-style} :background-color

The @code{:background-color} slot contains an object of type
@code{opal:color} which specifies the color of the "off" dashes of
double-dash lines will appear on a color screen (see below).
The default value is @code{opal:white}. It also specifies the color
of the bounding box of a text object whose @code{:fill-background-p}
slot is set to @code{t}.

@end defcv

@cindex{line-style (slot)}
@cindex{double-dash}

@defcv {Slot} @code{line-style} :line-style

The contents of the @code{:line-style} slot declare whether the line
is solid or dashed. Valid values are @code{:solid}, @code{:dash} or
@code{:double-dash.} With @code{:dash} only the 'on' dashes are drawn,
and nothing is drawn in the off dashes. With @code{:double-dash}, both
on and off dashes are drawn; the on dashes are drawn with the
foreground color (usually black) and the off dashes are drawn with the
background color (usually white).

@end defcv

@cindex{dash-pattern}

@defcv {Slot} @code{line-style} :dash-pattern

The @code{:dash-pattern} slot holds an (optionally empty) list of numbers
corresponding to the pattern used when drawing dashes. Each pair of
elements in the list refers to an on and an off dash. The numbers are
pixel lengths for each dash. Thus a @code{:dash-pattern} of @code{(1 1 1 1 3 1)} is
a typical dot-dot-dash line. A list with an odd number of elements is
equivalent to the list being appended to itself. Thus, the dash pattern
@code{(3 2 1)} is equivalent to @code{(3 2 1 3 2 1)}.

@c QuickDraw depreciaded
@c
@c Since Mac QuickDraw does not support drawing real dashed lines,
@c Garnet simulates dashed lines on the Mac by drawing lines with a
@c stippled pattern.  There is only one stipple pattern available for
@c this simulation, so lines whose @code{:line-style} is @code{:dash}
@c or @code{:double-dash} have the same gray stipple. The
@c @code{:dash-pattern} slot is ignored on the Mac.  You can supply
@c your own stipple for this simulation in the @code{:stipple} slot of
@c the @code{line-style} object (see below).

@end defcv

@cindex{stipple}

@defcv {Slot} @code{line-style} :stipple

The @code{:stipple} slot holds either @code{nil} or a
@code{opal:bitmap} object with which the line is to be stippled. The
@code{:foreground-color} of the line-style will be used for the "dark"
pixels in the stipple pattern, and the @code{:background-color} will
be used for the "light" pixels.

Some examples:
@smallexample
;; black line of thickness 2 pixels
opal:line-2

;; black line of thickness 30 pixels
(create-instance 'thickline opal:line-style (:line-thickness 30))

;; gray line of thickness 5 pixels
(create-instance 'grayline opal:line-style
  (:line-thickness 5)
  (:stipple (create-instance nil opal:bitmap
              (:image (opal:halftone-image 50))))) ; 50% gray

;; dot-dot-dash line, thickness 1
(create-instance 'dotdotdashline opal:line-style
  (:line-style :dash)
  (:dash-pattern '(1 1 1 1 3 1)))
@end smallexample

@end defcv

@subsection Filling-Styles
@node Filling-Styles

@smallexample
@cindex{filling-style}
(create-instance 'opal:filling-style opal:graphic-quality
  (:foreground-color opal:black)
  (:background-color opal:white)
  @emph{;; Transparent or opaque. @xref{other-stipple-slots,,Section 5.6.3.3}}.
  (:fill-style :solid)
  @emph{;; For self-intersecting polygons. @xref{other-stipple-slots,,Section 5.6.3.3}}.
  (:fill-rule :even-odd)
  @emph{;; The pattern. @xref{custom-stipple,,Section 5.6.3.1}}.
  (:stipple nil))        

(create-instance 'opal:default-filling-style opal:filling-style)
@end smallexample

Before you read all the sordid details below about what all these slots
mean, be aware that most applications will just use the default filling styles
provided. There are two basic types of filling-styles: those that rely on
stipple patterns to control their shades of gray, and those that are solid
colors.

@sp 1
@b{Stippled Filling-Styles}

Stippled filling-styles rely on their patterns to control their color shades.
The @code{:stipple} slot controls the mixing of the @code{:foreground-color} and
@code{:background-color} colors, which default to @code{opal:black} and
@code{opal:white}, respectively. Thus, the default stippled filling-styles
are shades of gray, but other colors may be used as well.
Here is a list of pre-defined stippled filling-styles:

@cindex{default-filling-style}
@cindex{no-fill}
@cindex{black-fill}
@cindex{white-fill}
@cindex{gray-fill}
@cindex{light-gray-fill}
@cindex{dark-gray-fill}


@vtable @code

@item @code{opal:no-fill}
nil

@item @code{opal:black-fill}
same as @code{opal:default-filling-style}

@item @code{opal:gray-fill}
same as @code{(opal:halftone 50)}

@item @code{opal:light-gray-fill}
same as @code{(opal:halftone 25)}

@item @code{opal:dark-gray-fill}
same as @code{(opal:halftone 75)}

@item @code{opal:diamond-fill}
a special pattern, defined with
@item @code{opal:make-filling-style}
See section @ref{fancy-stipple}.
@end vtable

@sp 1
@b{Solid Filling-Styles}

The second set of filling-styles are solid colors, and do not rely on stipples.
For these filling-styles, the @code{:foreground-color} slot of the object is
set with the corresponding instance of @code{opal:color}. For example, the
@code{:foreground-color} slot of @code{opal:red-fill} is set with @code{opal:red}.
Otherwise, these filling-styles are all identical to
@code{opal:default-filling-style}.

@sp 1
@cindex{red-fill}
@cindex{green-fill}
@cindex{blue-fill}
@cindex{yellow-fill}
@cindex{purple-fill}
@cindex{cyan-fill}
@cindex{orange-fill}

@vtable @code
@item opal:white-fill

@item opal:red-fill

@item opal:green-fill

@item opal:blue-fill

@item opal:yellow-fill

@item opal:purple-fill

@item opal:cyan-fill

@item opal:orange-fill
@end vtable

@sp 1
@cindex{motif-(light-)gray-fill}
@cindex{motif-(light-)blue-fill}
@cindex{motif-(light-)green-fill}
@cindex{motif-(light-)orange-fill}

@vtable @code
@item opal:motif-gray-fill

@item opal:motif-blue-fill

@item opal:motif-green-fill

@item opal:motif-orange-fill

@item opal:motif-light-gray-fill

@item opal:motif-light-blue-fill

@item opal:motif-light-green-fill

@item opal:motif-light-orange-fill
@end vtable

@node Creating Your Own Stippled Filling-Styles
@subsubsection Creating Your Own Stippled Filling-Styles
@anchor{custom-stipple}

@cindex{stipple}
The @code{:stipple} slot of a @code{filling-style} object is used to specify
patterns for mixing the foreground and background colors. The @code{:stipple}
slot is either @code{nil} or an @code{opal:bitmap} object, whose image can be generated
from the @code{/usr/misc/.X11/bin/bitmap} Unix program (see section
@ref{bitmap-sec}). Alternatively, there is a Garnet
function supplied for generating halftone bitmaps to get various gray
shades.

@defun opal:halftone percentage


@anchor{halftone} The @code{halftone} function returns an
@code{opal:filling-style} object. The @var{percentage} argument is
used to specify the shade of the halftone (0 is white and 100 is
black). Its halftone is as close as possible to the var{percentage}
halftone value as can be generated. Since a range of @var{percentage}
values map onto each halftone shade, two additional functions are
provided to get halftones that are guaranteed to be one shade darker
or one shade lighter than a specified value.
@end defun

@cindex{halftone-darker}
@cindex{halftone-lighter}

@defun opal:halftone-darker percentage
@defunx opal:halftone-lighter percentage

The @code{halftone-darker} and @code{halftone-lighter} functions return a stippled
@code{opal:filling-style} object that is guaranteed to be exactly one shade
different than the halftone object with the specified
@emph{percentage}. With these functions you are guaranteed to get a different
darker (or lighter) @code{filling-style} object. Currently, there are 17
different halftone shades.


Examples of creating rectangles that are: black, 25% gray, and 33% gray are:

@smallexample
(create-instance 'BLACKRECT opal:rectangle
   (:left 10)(:top 20)(:width 50)(:height 70)
   (:filling-style opal:black-fill))
(create-instance 'LIGHTGRAYRECT opal:rectangle
   (:left 10)(:top 20)(:width 50)(:height 70)
   (:filling-style opal:light-gray-fill))
(create-instance 'ANOTHERGRAYRECT opal:rectangle
   (:left 10)(:top 20)(:width 50)(:height 70)
   (:filling-style (opal:halftone 33)))
@end smallexample

@end defun

@node Fancy Stipple Patterns
@subsubsection Fancy Stipple Patterns

@cindex{make-filling-style}
@cindex{diamond-fill}
Another way to create your own customized filling styles is to use
the function @code{opal:make-filling-style}:


@defun opal:make-filling-style description &key from-file-p @
       (foreground-color opal:black) (background-color opal:white)


The @var{description} can be a list of lists which represent the bit-mask of the
filling style, or may be the name of a file that contains a bitmap. The
@var{from-file-p} parameter should be T if a filename is being supplied as the
@var{description}.

As an example, the filling-style @code{opal:diamond-fill} is defined by:

@smallexample
(setq opal:diamond-fill
      (opal:make-filling-style
       '((1 1 1 1 1 1 1 1 1)
	 (1 1 1 1 0 1 1 1 1)
	 (1 1 1 0 0 0 1 1 1)
	 (1 1 0 0 0 0 0 1 1)
	 (1 0 0 0 0 0 0 0 1)
	 (1 1 0 0 0 0 0 1 1)
	 (1 1 1 0 0 0 1 1 1)
	 (1 1 1 1 0 1 1 1 1)
	 (1 1 1 1 1 1 1 1 1))))
@end smallexample

@end defun

@node Other Slots Affecting Stipple Patterns
@subsubsection Other Slots Affecting Stipple Patterns
@anchor{other-stipple-slots}

@cindex{fill-style}
The @code{:fill-style} slot specifies the colors used for drawing the
"off" pixels in the stippled pattern of filling-styles. The "on"
pixels are always drawn with the @code{:foreground-color} of the filling-style.

@cindex{solid}
@cindex{stippled}
@cindex{opaque-stippled}

@vtable @code
@item @b{Line @code{:fill-style}}
@b{Color used for "off" pixels}
	
@item :solid
Color in @code{:foreground-color}

@item :stippled
Transparent

@item :opaque-stippled
Color in @code{:background-color}
@end vtable

@cindex{even-odd}
@cindex{winding}

@cindex{fill-rule}

The @code{:fill-rule} is either @code{:even-odd} or
@code{:winding}. These are used to control the filling for
self-intersecting polygons. For a better description of these see any
reasonable graphics textbook, or the X11 Protocol Manual.


@node Fast Redraw Objects
@subsection Fast Redraw Objects


@cindex{fast-redraw-p}
@cindex{fast redraw objects}
When an interface contains one or more objects that must be redrawn
frequently, the designer may choose to define these objects as fast
redraw objects. Such objects could be feedback rectangles
that indicate the current selection, or text strings which are updated
after any character is typed. Fast redraw objects are redrawn with an
algorithm that is much faster than the standard update procedure for
refreshing Garnet windows.

However, because of certain requirements
that the algorithm makes on fast redraw objects, most objects in an
interface are not candidates for this procedure. Primarily, fast
redraw objects cannot be covered by other objects, and they must be
either drawn with @emph{xor}, or else are guaranteed to be over only a solid
background. Additionally, aggregates cannot be fast-redraw objects;
only instances of @code{opal:graphical-object} (those with their own @code{:draw}
methods) can be fast-redraw objects.

To define an object as a fast redraw object, the @code{:fast-redraw-p}
slot of the object must be set to one of three allowed values -- 
@code{:redraw}, @code{:rectangle}, or @code{t}. These values determine how the
object should be erased from the window (so that it can be redrawn at
its new position or with its new graphic qualities). The following
paragraphs describe the functions and requirements of each of these values.

@vtable @code 

@item :redraw
The object will be erased by drawing it a second time
with the line style and filling style defined in the slots
@code{:fast-redraw-line-style} and @code{:fast-redraw-filling-style}.
These styles should be defined to 
have the same color as the background behind the object.
Additionally, these styles should have the same structure as the line
and filling styles of the object. For example, if the object has a
line thickness of 8, then the fast redraw line style must have a
thickness of 8 also. This value may be used for objects on color screens
where there is a uniform color behind the object.


@item :rectangle
The object will be erased by drawing a rectangle over
it with the filling style defined in the slot @code{:fast-redraw-filling-style}.
This filling style should have the same color as the
background behind the object. Like @code{:redraw}, this value assumes
that there is a uniform color behind the object. However, @code{:rectangle}
is particularly useful for complicated objects like bitmaps and text,
since drawing a rectangle takes less time than drawing these intricate
objects. 


@item t
In this case, the object must additionally have its
@code{:draw-function} slot set to @code{:xor}. This will cause the object
to be XOR'ed on top of its background. To erase the object, the
object is just drawn again, which will cause the two images to cancel out.
This value is most useful when the background is white and the objects
are black (e.g., on a monochrome screen), and can be used with a
feedback object that shows selection by inverse video.

@end vtable

@section Specific Graphical Objects
@node Specific Graphical Objects

This chapter describes a number of specific subclasses of the
@code{opal:graphical-object} prototype that implement all of the graphic
primitives that can be displayed, such as rectangles, lines, text strings, etc.

For all graphical objects, coordinates are specified as fixnum quantities
from the top, left corner of the window. All coordinates and distances are
specified in pixels.

Most of these objects can be filled with a filling style, have a border
with a line-style or both.
The default for closed objects is that @code{:filling-style} is @code{nil}
(not filled) and the @code{:line-style} is @code{opal:default-line-style}.

Note that only the slots that are not inherited from view objects and
graphic objects are shown below. In addition, of course, all of the
objects shown below have the following slots (described in the previous sections):
@cindex{left}
@cindex{top}
@cindex{width}
@cindex{height}
@cindex{visible}
@cindex{line-style}
@cindex{filling-style}
@cindex{draw-function}
@cindex{draw-function}
@cindex{select-outline-only}
@cindex{hit-threshold}
@smallexample
  (:left 0)
  (:top 0)
  (:width 0)
  (:height 0)
  (:visible (o-formula ...))
  (:line-style opal:default-line-style)
  (:filling-style nil)
  (:draw-function :copy)
  (:select-outline-only nil)
  (:hit-threshold 0)
@end smallexample

@cindex{maybe-constant}
@cindex{constant slots}
Most of the prototypes in this section have a list of slots in their
@code{:maybe-constant} slot, which generally correspond to the
customizable slots of the object. This is part of the @emph{constant
slots} feature of Garnet which allows advanced users to optimize their
Garnet objects by reusing storage space. Consult the KR chapter for
documentation about how to take advantage of constant slots.

@b{HINT:} If you want a black-filled object, set the line-style to be
@code{nil} or else the object will take twice as long to draw (since
it draws both the border and the inside).

@ref{fig:ex3} shows examples of the basic object types in Opal.

@float Figure, fig:ex54
@center @image{allobjspic, 5.5in}
@caption{Examples of the types of objects supported by Opal: lines,
rectangles, rounded rectangles, text, multipoints, polylines,
arrowheads, ovals, circles, arcs, and bitmaps, with a variety of line
and filling styles.}
@end float

@subsection Line
@node Line

@smallexample

@cindex{line}

(create-instance 'opal:line opal:graphical-object
  (:maybe-constant '(:x1 :y1 :x2 :y2 :line-style :visible))
  (:x1 0)
  (:y1 0)
  (:x2 0)
  (:y2 0))
@end smallexample

The @code{opal:line} class describes an object that displays a line
from @math{(@code{:x1}, @code{:y1})} to @math{(@code{:x2},
@code{:y2})}. The @code{:left}, @code{:top}, @code{:width}, and
@code{:height} reflect the correct bounding box for the line, but
cannot be used to change the line (i.e., @b{do not set the}
@code{:left}, @code{:top}, @code{:width}, @b{or} @code{:height}
@b{slots}). Lines ignore their @code{:filling-style} slot.

@subsection Rectangles
@node Rectangles

@smallexample

@cindex{rectangle}

(create-instance 'opal:rectangle opal:graphical-object
  (:maybe-constant '(:left :top :width :height :line-style :filling-style
		     :draw-function :visible)))
@end smallexample

The @code{opal:rectangle} class describes an object that displays a
rectangle with top, left corner at @math{(@code{:left}, @code{:top})}, width
of @code{:width}, and height of @code{:height}.

@node Rounded-corner Rectangles
@subsubsection Rounded-corner Rectangles

@smallexample

@cindex{roundtangle}
@cindex{radius}

(create-instance 'opal:roundtangle opal:rectangle
  (:maybe-constant '(:left :top :width :height :radius :line-style
		     :filling-style :draw-function :visible))
  (:radius 5))
@end smallexample

Instances of the @code{opal:roundtangle} class are rectangles with rounded
corners. Objects of this class are similar to rectangles,
but contain an additional slot, @code{:radius}, which specifies the
curvature of the corners. The values for this slot can be either
@code{:small}, @code{:medium}, @code{:large}, or a numeric value interpreted as the
number of pixels to be used. The keyword values do not correspond directly
to pixels values, but rather compute a pixel value as a fraction of the
length of the shortest side of the bounding box.

@cindex{small}
@cindex{medium}
@cindex{large}

@vtable @code
@item 
@code{:radius} Fraction
	
@item :small
1/5

@item :medium
1/4

@item :large
1/3

@end vtable

Figure @ref{fig:ex4} demonstrates the meanings of the slots of
roundtangles. If the value of @code{:radius} is 0, the roundtangle looks
just like a rectangle. If the value of @code{:radius} is more than half
of the minimum of @code{:width} or @code{:height}, the roundtangle is drawn as
if the value of @code{:radius} were half the minimum of @code{:width} and @code{:height}.

@float Figure, fig:ex55
@center @image{roundtangle, 5.5in}
@caption{The parameters of a roundtangle.}
@end float

@subsection Polyline and Multipoint
@node Polyline and Multipoint

@smallexample

@cindex{polyline}
@cindex{multipoint}

(create-instance 'opal:multipoint opal:graphical-object
  (:maybe-constant '(:point-list :line-style :filling-style :draw-function :visible))
  (:point-list nil))

(create-instance 'opal:polyline opal:multipoint
  (:hit-full-interior-p nil))
@end smallexample

The @code{opal:polyline} prototype provides for multi-segmented
lines. Polygons can be specified by creating a polyline with the same
first and last points.  The point list is a flat list of values
@code{(@var{x-1} @var{y-1} @var{x-2} @var{y-2} ...  @var{x-n}
@var{y-n})}. If a polyline object has a filling-style, and if the last
point is not the same as the first point, then an invisible line is
drawn between them, and the resulting polygon is filled.

The @code{:point-in-gob} method for the @code{opal:polyline} actually
checks whether the point is inside the polygon, rather than just
inside the polygon's bounding box. If the @code{:hit-full-interior-p}
slot of a @code{polyline} is @code{nil} (the default), then the
@code{:point-in-gob} method will use the "even-odd" rule to determine
if a point is inside it. If the value of @code{:hit-full-interior-p}
is T, the method will use the "winding" rule. The slot
@code{:hit-threshold} has its usual functionality.

The @code{:left}, @code{:top}, @code{:width}, and @code{:height} slots
reflect the correct bounding box for the polyline, but cannot be used
to change the polyline (i.e., @b{do not set the} @code{:left},
@code{:top}, @code{:width}, @b{or} @code{:height} @b{slots}).


For example:
@smallexample
@center @image{polyline, 5.5in}
(create-instance nil opal:polyline
   (:point-list '(10 50 50 10 90 10 130 50))
   (:filling-style opal:light-gray-fill)
   (:line-style opal:line-4))
@end smallexample

A multipoint is like a polyline, but only appears on the screen as
a collection of disconnected points. The line-style and filling-style
are ignored.

@subsection Arrowheads
@node Arrowheads

@cindex{arrowhead}
@smallexample
(create-instance 'opal:arrowhead opal:polyline
  (:maybe-constant '(:line-style :filling-style :length :diameter :open-p
		     :head-x :head-y :from-x :from-y :visible))
  (:head-x 0) (:head-y 0)
  (:from-x 0) (:from-y 0)
  (:connect-x (o-formula ...))  @emph{; Read-only slot}
  (:connect-y (o-formula ...))  @emph{; Read-only slot}
  (:length 10)
  (:diameter 10)
  (:open-p T)
  ...)
@end smallexample

@cindex{head-x}
@cindex{head-y}
@cindex{from-x}
@cindex{from-y}
@cindex{connect-x}
@cindex{connect-y}
@cindex{length}
@cindex{diameter}
@cindex{open-p}
The @code{opal:arrowhead} class provides arrowheads. Figure @ref{arrowfig}
shows the meaning of the slots for arrowheads. The arrowhead is
oriented with the point at (@code{:head-x}, @code{:head-y}) and will point away
from (@code{:from-x}, @code{:from-y}). (@b{Note:} no line is
drawn from (@code{:from-x}, @code{:from-y}) to (@code{:head-x}, @code{:head-y}); the
@code{:from-} point is just used for reference.)  The @code{:length} slot
determines the distance (in pixels) from the point of the arrow to the base
of the triangle. The @code{:diameter} is the distance across the base. The
@code{:open-p} slot determines if a line is drawn across the base.

The arrowhead can have both a filling and an outline (by using the standard
@code{:filling-style} and @code{:line-style} slots). Arrowhead objects
also have 2 slots that describe the point at the center of the base to
which one should attach other lines. This point is (@code{:connect-x,
:connect-y}) and is set automatically by Opal; do not set these slots.
These slots are useful if the arrow is closed (see Figure
@ref{arrowfig} below).

If you want an arrowhead connected to a line, you might want to use the
@code{arrow-line} object (with one arrowhead) or @code{double-arrow-line} (with
arrow-heads optionally at either or both ends) supplied in the Garnet
Gadget Set @cite{GarnetGadgetsChapter}.

@float Figure, fig:ex56
@center @image{arrow-illus, 5.5in}

@multitable @columnfractions .25 .15 .15 .15 .15 .15
@headitem @tab 1st @tab 2nd @tab 3rd @tab 4th @tab 5th
@item @code{:open-p:}
@tab t
@tab nil
@tab t
@tab nil
@tab t
@item @code{:filling-style:}
@tab nil
@tab nil
@tab opal:light-gray-fill
@item @code{:line-style:}
@tab ....
@tab opal:line-0
@tab ....
@tab nil
@end multitable

@caption{The slots that define an arrowhead. At the bottom are various 
arrowheads with different styles. Note that a shaft for the arrow must be
drawn by the user.}

@anchor{arrowfig}
@end float


@subsection Arcs
@node Arcs

@smallexample

@cindex{arc}

(create-instance 'opal:arc opal:graphical-object
  (:maybe-constant '(:left :top :width :height :line-style :filling-style
		     :draw-function :angle1 :angle2 :visible))
  (:angle1 0)
  (:angle2 0))
@end smallexample

The @code{opal:arc} class provides objects that are arcs, which are
pieces of ovals. The arc segment is parameterized by the values of the
following slots: @code{:left}, @code{:top}, @code{:width},
@code{:height}, @code{:angle1}, and @code{:angle2}.

The arc is a section of an oval centered about the point
@math{(@code{center-x @var{arc}}, @code{center-y @var{arc}})}
calculated from the arc's @code{:left}, @code{:top}, @code{:width} and
@code{:height}, with width @code{:width} and height
@code{:height}. The arc runs from @code{:angle1} counterclockwise for
a distance of @code{:angle2} radians. That is, @code{:angle1} is
measured from 0 at the center right of the oval, and @code{:angle2} is
measured from @code{:angle1} (@code{:angle2} is relative to
@code{:angle1}).

Arcs are filled as pie pieces to the center of the oval.

For example:
@smallexample
@center @image{arcexample, 5.5in}
;; the rectangle is just for reference
(create-instance 'myrect opal:rectangle
  (:left 10)(:top 10)(:width 100)(:height 50)) 
(create-instance 'myarc opal:arc
  (:left 10)(:top 10)
  (:width 100)(:height 50)
  (:angle1 (/ PI 4))
  (:angle2 (/ PI 2))
  (:line-style opal:line-2)
  (:filling-style opal:light-gray-fill))
@end smallexample

@subsection Ovals
@node Ovals

@smallexample

@cindex{oval}

(create-instance 'opal:Oval opal:arc)
@end smallexample

Instances of the @code{:oval} class are closed arcs parameterized by the slots
@code{:left@r[,] :top@r[,] :width@r[, and] :height}.

@subsection Circles
@node Circles

@smallexample

@cindex{circle}

(create-instance 'opal:Circle opal:arc)
@end smallexample

The circle is positioned at the top, leftmost part of the bounding box
described with the @code{:left}. @code{:top}, @code{:width}, and @code{:height} slots.
The circle drawn has diameter equal to the @emph{minimum} of the width
and height, though the effective bounding box (used by
@code{point-in-gob}, for example) will still be defined by the actual
values in @code{:width} and @code{:height}. Both @code{:width} and
@code{:height} need to be specified.


@subsection Fonts and Text
@node Fonts and Text

@subsubsection Fonts
@node Fonts
There are two different ways to get fonts from Garnet. One way is to
explicitly create your own font object, and supply the object with a
description of the desired font, either with family, face, and size
descriptions, or with a font pathname. The other way is to use the function
@code{get-standard-font} which will create a new font object for you if
necessary, or return a previously created font object that you can use again.

There are two different types of font objects -- one which handles the
standard Garnet fonts (described by family, face, and size parameters), and
one which handles fonts specified by a filename. The @code{get-standard-font}
function only returns font objects that can be described with the three
standard parameters. Either kind of font object may be used anywhere a
@emph{font} is called for.

@subsubheading Built in Fonts
@node Built in Fonts

@cindex fonts
@cindex prototype
@smallexample
(create-instance 'opal:font opal:graphic-quality
  (:maybe-constant '(:family :face :size))
  (:family :fixed)
  (:face :roman)
  (:size :medium)
   ...)

@cindex{default-font}
(create-instance 'opal:default-font opal:font
   (:constant t))
@end smallexample

To use the standard Garnet fonts, create an instance of @code{opal:font} with
your desired values for the @code{:family}, @code{:face}, and @code{:size} slots.
Opal will automatically find the corresponding font for your display. The
allowed values for each slot are as follows:

@cindex{family}
@cindex{fixed}
@cindex{serif}
@cindex{sans-serif}
@cindex fonts
@cindex family

Values for @code{:family} can be:
@vtable @code
@item :fixed
a fixed width font, such as Courier. All characters are the
same width.

@item :serif
a variable-width font, with ``serifs'' on the characters,
such as Times.

@item :sans-serif
a variable-width font, with no serifs on the characters,
such as Helvetica.
@end vtable

@cindex{face}
@cindex{roman}
@cindex{italic}
@cindex{bold}
@cindex{bold-italic}
@cindex{plain}
@cindex{condense}
@cindex{extend}
@cindex{outline}
@cindex{shadow}
@cindex{underline}
@cindex fonts
@cindex face
Values for @code{:face} can be a single keword or a list of the following:

@vtable @code 
Faces available for both X windows and the Mac:

@item :roman

@item :italic

@item :bold

@item :bold-italic
@end vtable

Faces available for the Mac only:
@vtable @code 

@item :plain

@item :condense

@item :extend

@item :outline

@item :shadow

@item :underline
@end vtable

@cindex{size}
@cindex{small}
@cindex{medium}
@cindex{large}
@cindex{very-large}
@cindex fonts
@cindex size

Values for @code{:size} can be:

@vtable @code
:small
a small size, such as 10 points.

:medium
a normal size, such as 12 points.

:large
a large size, such as 18 points.

:very-large
a larger size, such as 24 points.

@end vtable

The exported @code{opal:default-font} object contains the font described by
@code{:fixed}, @code{:roman}, and @code{:medium}. This object should be
used when a font is required and you want to use the default values.
However, since this object's slots have been made constant for efficiency,
do not create instances of the @code{opal:default-font} object.
Instead, create instances of the @code{opal:font} objects with customized
values for the parameters, or use @code{get-standard-font} (explained below).

@subsubheading Reusing Fonts
@node Reusing Fonts

Instead of creating a new font object every time one is needed, you may
use the same font object in multiple applications. The function
@code{get-standard-font} remembers what fonts have been created, and will
return a previously created font object if a new font is needed that has
a matching description. Otherwise, @code{get-standard-font} will allocate a
new font object and return it, remembering it for later.

@defun opal:get-standard-font family face size

The parameters are all the keywords that are allowed for standard fonts.
For example: @code{(opal:get-standard-font :fixed :italic :medium)}. In
addition, any of the parameters can be @code{nil}, which means to use the
defaults (@code{:fixed :roman :medium}). It is more efficient to use
this procedure than to repeatedly allocate new font objects.

Since all the font objects returned by @code{get-standard-font} have
been declared constant for efficiency, you may not change the font
descriptions after the objects have been created.

Note:  @code{get-standard-font} only remembers those fonts that were allocated
by using @code{get-standard-font}. If a requested font matches an
independently-generated font, @code{get-standard-font} will not know about it
and will allocate a new font.

@end defun

@subsubheading Fonts from Files
@node Fonts from Files

@cindex fonts
@cindex font-from-file
@cindex{font-from-file}

@smallexample
(create-instance 'opal:font-from-file opal:graphic-quality
  (:font-path nil)
  (:font-name "")
   ...)
@end smallexample

This allows you to specify a file name to load a font from.

@cindex{font-path}
@cindex{font-name}
@cindex fonts
@cindex font directories
@cindex{xset}

X11 keeps a set of font directories, called the current "Font Path".
You can see what directories are on the font path by typing @code{xset
q} to the Unix shell, and you can add and remove directories from the
font path by using the @code{xset fp+} and @code{xset fp-} commands.

If the @code{:font-path} slot of a @code{:font-from-file} is a string
which is a directory, Opal pushes that directory onto
the X font path and then looks up the font. If the font name is
somewhere on the path already, you can let the @code{:font-path} slot be @code{nil}.
You can usually access fonts in the standard system font area (often
@code{/usr/misc/.X11/lib/fonts/}) without specifying a path name.

For example, for the font @code{vgi-25.snf} in the default
directory, use:
@smallexample
(create-instance nil opal:font-from-file
   (:font-name "vgi-25"))
@end smallexample

If the font was not in the default font path, then use something like:

@smallexample
(create-instance nil opal:font-from-file
   (:font-path "/usr/misc/.X11/lib/fonts/75dpi/")
   (:font-name "vgi-25"))
@end smallexample

@cindex{fonts.dir}
The font name @code{"vgi-25"} is looked up in a special file in the font
directory called @code{fonts.dir}. This file contains a long list of fonts
with the file name of the font on the left and the name for the server to
use on the right. For example, the entry corresponding to
@code{opal:default-font} may look like this:

@smallexample
courier12.pcf           -adobe-courier-medium-r-normal--17-120-100-100-m-100-iso8859-1
@end smallexample

On some displays, this font lookup may not proceed smoothly, and you may have
to supply the long @code{"-adobe-..."} name as the value of @code{:font-name}
instead of the more convenient @code{"courier12"}. Garnet internally builds
these names for the standard fonts, so font name lookup should never be a
problem for them.

@subsubheading Opal:Cursor-Font
@node Opal:Cursor-Font
@cindex{cursor-font}

@smallexample
(create-instance 'opal:cursor-font opal:font-from-file
  (:constant t)
  (:font-name "cursor"))
@end smallexample

The @code{opal:cursor-font} object accesses the
font used by your window manager to display cursors. This object is an
instance of @code{opal:font-from-file}, and may not be fully portable on
different machines. Regular text strings may be printed in this font, but
it is specifically intended for use when changing the cursor of Garnet
windows (see section @ref{the-cursor-slot}).


@subsubheading Functions on Fonts
@node Functions on Fonts

@cindex{string-width}
@cindex{string-height}


@defun opal:string-width @emph{font-obj string} &key (@emph{start} 0) @emph{end}
@defunx opal:string-height @emph{font-obj string} &key (@emph{actual-heightp} nil)

The function @code{string-width} takes a font object (which can be a
@code{font} or a @code{font-from-file}) and a Lisp string, and
returns the width in pixels of that string written in that font.
The @emph{start} and @emph{end} parameters allow you to specify the beginning and
ending indices of the portion of @emph{string} that you want to measure.

The function @code{string-height} takes a font (or font-from-file) and a Lisp
string, and returns the height in pixels of that string written in that
font. There is an optional keyword parameter @emph{actual-heightp} which
defaults to @code{nil}, and has exactly the same effect on the return value of
@code{string-height} that the @code{:actual-heightp} slot of an @code{opal:text}
object has on the value of the @code{:height} slot of that @code{opal:text}
object (see section @ref{actualheightp}).

@end defun

@subsubsection Text
@node Text
@anchor{text}
@smallexample

@cindex{text}
@cindex{string}
@cindex{actual-heightp}

(create-instance 'opal:text opal:graphical-object
  (:maybe-constant '(:left :top :string :font :actual-heightp :line-style :visible))
  (:string "")
  (:font opal:default-font)
  (:actual-heightp nil)
  (:justification :left)
  (:fill-background-p nil)
  (:line-style opal:default-line-style)
  (:cursor-index nil))
@end smallexample

Instances of the @code{opal:text} class appear as a horizontal string of glyphs
in a certain font. The @code{:string} slot holds the string to be displayed,
and can contain multiple lines. The @code{:font} slot specifies a font object
as described in the previous section (an instance of @code{opal:font} or
@code{opal:font-from-file}).

@cindex{line-style}
@cindex{fill-background-p}
The @code{:line-style} slot can control the color of the object, and can hold
any instance of @code{opal:line-style}, such as @code{opal:red-line}. The
@code{:foreground-color} slot of the @code{line-style} object determines the
color of the text. When the @code{:fill-background-p} slot is T,
then the background of each glyph of the text is drawn with the color in the
@code{:background-color} slot of the @code{line-style}. If the
@code{:fill-background-p} slot is @code{nil}, then the background is unaffected.

@cindex{justification}
@cindex{left (justification)}
@cindex{center (justification)}
@cindex{right (justification)}
The @code{:justification} slot can
take one of the three values @code{:left}, @code{:center}, or @code{:right},
and tells whether the multiple-line string is left-, center-, or
right-justified. The default value is @code{:left}.

A vertical bar cursor before the @code{:cursor-index}th
character. If @code{:cursor-index} is 0, the cursor is at the left of the
string, and if it is >= the length of the string, then it is at the right
of the string. If @code{:cursor-index} is @code{nil}, then the cursor is turned
off. The @code{:cursor-index} slot is set by the @code{inter:text-interactor}
during text editing.

@sp 1
@cindex{get-cursor-index}
@smallexample
opal:Get-Cursor-Index @emph{string-obj x y}@ref{function}
@end smallexample
This function returns the appropriate cursor-index for the (x,y) location
in the string. It assumes that the string is displayed on the screen.
This is useful for getting the position in the string when the user presses
over it with the mouse.

@anchor{actualheightp}
The slot @code{:actual-heightp} determines whether the height of the string
is the actual height of the characters used, or the maximum height of the
font. This will make a difference in variable size fonts if you have boxes
around the characters or if you are using a cursor (see section
@ref{text}). The
default (@code{nil}) means that the height of the font is used so all strings
that are drawn with the same font will have the same height.

The @code{:width} and @code{:height} slots reflect the correct width and height
for the string, but cannot be used to change the size (i.e., @b{do not
set the} @code{:width} @b{or} @code{:height} @b{slots}).


@node Scrolling Text Objects
@subsubsection Scrolling Text Objects
@anchor{auto-scroll}

@cindex auto scroll
@cindex opal:text
When an @code{opal:text} or @code{opal:multifont-text} object is used inside a
scrolling-window, there is an option that allows the window to scroll
automatically whenever the cursor is moved out of the top or bottom of
the visible region. To use this feature, two things need to be done:

@enumerate
The @code{:scrolling-window} slot of the text object must contain the scrolling
window object.
@cindex{scrolling-window slot}
@cindex auto scroll
@cindex scrolling-window slot

The text object must also have its @code{:auto-scroll-p} slot set to T.
@cindex auto scroll
@cindex auto-scroll-p slot
@end enumerate

@cindex auto scroll
@cindex vs. word wrap
@cindex{word wrap (in multifont-text)}
NOTE: Auto scroll is NOT the same as word wrap. If the cursor is
moved out of the right edge of the window, auto-scroll will not do
anything. 

@cindex{demo-multifont}
For an example of how the auto-scroll feature works, look at the code
for Demo-Multifont. Try the demo with the
@code{:auto-scroll-p} slot of the object @code{demo-multifont::text1} set to
both T and @code{nil}.

Auto scroll does not keep track of changes in family, font, size, or
when a segment is cut or pasted. The @code{:auto-scroll} method has to be
invoked explicitly in such cases, using the following method:

@defmethod gg:auto-scroll  text-obj

For examples of calling @code{gg:auto-scroll} explicitly, look at the menu
functions in Demo-Multifont.
@end defmethod

@subsection Bitmaps
@node Bitmaps
@anchor{bitmap-sec}

@smallexample
@cindex{bitmap}
@cindex{image}
(create-instance 'opal:bitmap opal:graphical-object
  (:maybe-constant '(:left :top :image :filling-style :visible))
  (:image nil)
  (:filling-style opal:default-filling-style)
  ...)
@end smallexample
On the Mac, and in the
usual case with X11, the @code{:image} slot contains a machine-dependent
structure generated by the function @code{opal:read-image} (see below).
Under X11, there are a variety of other CLX image objects that can be
stored in this slot (consult your CLX Manual for details on images). 

Bitmaps can be any size. Opal provides a function to read in a bitmap
image from a file:
@cindex{read-image}
@smallexample
opal:Read-Image @i{file-name}@ref{function}
@end smallexample
The @code{read-image} function reads a bitmap image from @emph{file-name} which
is stored in the default X11 ".bm" file format. Files of this format may
be generated by using the Unix program @code{/usr/misc/.X11/bin/bitmap}.

The @code{:filling-style} slot can contain any instance of
@code{opal:filling-style}. If the @code{:fill-style} of the bitmap's
@code{:filling-style} is @code{:solid} or @code{:opaque-stippled}, then the bitmap
will appear with that filling-style's foreground-color and background-color.
If, however, the @code{:fill-style} of the filling-style is @code{:stippled},
then the bitmap will appear with the filling-style's @code{:foreground-color},
but its background will be transparent. For example, the following
code creates a bitmap which will be drawn with a red and white stipple
(because white is the default @code{:background-color} of
@code{opal:filling-style}):  @cindex{stippled}

@smallexample
(create-instance 'red-arrow opal:arrow-cursor
   (:filling-style (create-instance nil opal:filling-style
                      (:foreground-color opal:red)
                      (:fill-style :stippled))))
@end smallexample


There are several functions supplied for generating halftone images, which
can then be supplied to the @code{:image} slot of a bitmap object. These
functions are used to create the filling styles returned by the
@code{halftone} function (section @ref{halftone}).
@sp 1
@cindex{halftone-image}
@smallexample
opal:Halftone-Image @emph{percentage}@ref{function}
@end smallexample
The @code{halftone-image} function returns a image for use in the
@code{:image} slot of a bitmap object. The @emph{percentage} argument is
used to specify the 
shade of the halftone (0 is white and 100 black). This image is as close
as possible to the @emph{percentage} halftone value as can be generated.
Since a range of @emph{percentage} values map onto each halftone image, two
additional functions are provided to get images that are guaranteed to be
one shade different or one shade lighter than a specified value.

@sp 1

@cindex{halftone-image-darker}
@cindex{halftone-image-lighter}
@smallexample
opal:Halftone-Image-Darker @emph{percentage}@ref{function}

opal:Halftone-Image-Lighter @emph{percentage}@ref{function}
@end smallexample

The @code{halftone-image-darker} and @code{halftone-image-lighter}
functions return a halftone that is guaranteed to be exactly one shade
darker than the halftone with the specified @emph{percentage}. With these
functions you are guaranteed to get a different darker (or lighter)
image. Currently, there are 17 different halftone shades.

The @code{:width@r[, and] :height} slots reflect the correct width and
height for the bitmap, but cannot be used to change the size (i.e.,
@b{do not set the} @code{:width} @b{or} @code{:height} slots)).

@subsection Pixmaps
@node Pixmaps

@smallexample
@cindex{pixmap}
@cindex{image}
(create-instance 'opal:pixmap opal:bitmap
  (:image nil)
  (:line-style opal:default-line-style)
  (:pixarray (o-formula (if (gvl :image)
			    (gem:image-to-array (gv-local :self :window)
						(gvl :image))))))
  ...)

@end smallexample

This object is similar to the @code{opal:bitmap} object, except that it handles
images which use more than one bit per pixel.

@cindex{image}The @code{:image} slot works exactly like that of
@code{opal:bitmap}, in conjunction with the function @code{opal:read-xpm-file}
(see below).

@cindex{pixarray}
The @code{:pixarray} slot contains an array of colormap indices.
This is useful if you want to manipulate a pixmap directly,
as in the demo "demo-pixmap".

The @code{:width@r[, and] :height} slots reflect the correct width and
height for the pixmap, but cannot be used to change the size (i.e.,
@b{do not set the} @code{:width} @b{or} @code{:height} @b[slots]).


@subsubsection Creating a pixmap
@node Creating a pixmap
@cindex{creating pixmaps}

The following routine can be used to create an image for a pixmap.

@cindex{read-xpm-file}
@smallexample
opal:Read-XPM-File @emph{pathname} @value{function}
@end smallexample

The argument @emph{pathname} should be the name of a file containing a C
pixmap image. @code{Read-xpm-file} returns an X-specific or Mac-specific
object, which then should be put in the @code{:image} slot of an
@code{opal:pixmap}. The file @emph{pathname} containing the C pixmap image
should be in the @emph{xpm} format. Please refer to the X Window System
documentation for more details about that format.

The function @code{read-xpm-file} will read pixmaps in the XPM1 or XPM2 format.
Files in these formats are produced by the program @code{ppmtoxpm} and the
OpenLook @code{IconEditor} utility. The @code{ppm} collection of
utilities are useful for converting one format into another. If you
do not have them, you can @c[ftp] them from one of the standard sites that
store Unix utilities.

In Unix, to convert the contents of a color window into an @emph{xpm} format
file, you can use programs such as @code{xwd}, @code{xwdtopnm}, @code{ppmtoxpm},
etc. For example, inside a Unix shell, type:

@cindex{xwd}
@smallexample
xwd > foo.xwd
@end smallexample

When the cursor changes to a plus, click on the window you want to dump.
Then type:

@cindex{xwdtopnm}
@cindex{ppmtoxpm}
@cindex{ppm}
@smallexample
xwdtopnm foo.xwd > foo.ppm
ppmtoxpm foo.ppm > foo.xpm
@end smallexample

This will create a file named "foo.xpm". @comment[in the ??? format]
Finally, in Garnet, type:

@smallexample
(create-instance 'FOO opal:pixmap
   (:image (opal:read-xpm-file "foo.xpm")))
@end smallexample


Here are two more routines that can be used to create images for pixmaps.

@cindex{create-pixmap-image}
@smallexample
opal:Create-Pixmap-Image @emph{width height} &optional @emph{color} @ref{Function}
@end smallexample
This creates a solid color pixmap image. If you wanted to create a
pixmap whose image was, say, a 20x30 blue rectangle, you
would say:

@smallexample
(create-instance 'BLUE-PIXMAP opal:pixmap
   (:image (opal:create-pixmap-image 20 30 opal:blue)))
@end smallexample

If no color is given, the color defaults to white.

@cindex{creating the image of a window}
@cindex{window-to-pixmap-image}
@smallexample
opal:Window-To-Pixmap-Image @emph{window} &key @emph{left top width height} @ref{Function}
@end smallexample
This creates an image containing the contents of a Garnet window,
within a rectangular region specified by the values @emph{left},
@emph{top}, @emph{width}, and @emph{height}. Left and top default to 0.
@emph{Width} and @emph{height} default to the values of the @code{:width} and
@code{:height} slots of the window, respectively.


@subsubsection Storing a pixmap
@node Storing a pixmap

@sp 1
@cindex{saving pixmaps}
@cindex{write-xpm-file}
@smallexample
opal:Write-XPM-File @emph{pixmap pathname} &key @emph{(xpm-format :xpm1)} @ref{Function}
@end smallexample

This function writes the @code{:image} of a pixmap object into a C pixmap file
whose name is @emph{pathname}. @code{Write-xpm-file} will write pixmap files in
either XPM1 or XPM2 format, depending on the value of the @emph{xpm-format} key,
which may be either @code{:xpm1} or @code{:xpm2}. By default, the function
generates files in XPM1 format, which can be read by the @code{xpmtoppm}
utility.

@section Multifont
@node Multifont
@cindex{multifont-text}

@smallexample
(create-instance 'opal:multifont-text opal:aggregate
   (:left 0)
   (:top 0)
   (:initial-text ...)
   (:word-wrap-p nil)
   (:text-width 300)
   (:current-font ...)
   (:current-fcolor ...)
   (:current-bcolor ...)
   (:fill-background-p t)
   (:draw-function :copy)
   (:show-marks nil))
@end smallexample

@cindex{word wrap (in multifont-text)}
The @code{opal:multifont-text} object is designed to allow users to create more
complicated editing applications. The object is similar to the 
@code{opal:text} object with many added abilities. As the name implies,
the @code{opal:multifont-text} object can accept text input in multiple fonts.
Also, the object has a word wrap mode to permit word-processor-like editing as
well as the ability to highlight text for selection.

Positioning the object is
performed with @code{:left} and @code{:top} as with most Garnet objects. The slots
@code{:width} and @code{:height} are read-only and can be used to
see the size of the object, 
but should not be changed by the user. The @code{:initial-text} slot is used to
initialize the contents of the @code{multifont-text}. The format of the
@code{:initial-text} slot is complicated enough that the next section is devoted
to discussing it. If the user is not particular about the font of the initial
contents, a simple string is sufficient for the 
@code{:initial-text} slot. The slots
@code{:word-wrap-p} and @code{:text-width} control the word wrap mode.
If @code{:word-wrap-p} is T, the text will wrap at the pixel width given in the
@code{:text-width} slot. If @code{:word-wrap-p} is @code{nil}, word wrap mode will
not be activated and no wrapping will occur. In this case, your
string should contain @code{#\newline}s wherever required.
Both @code{:word-wrap-p} and @code{:text-width} can be modified at run time.

The @code{:current-font} slot can
be used to control what font newly added characters will appear as. Also, the
@code{:current-font} slot can be polled to determine the last font of the
character the cursor most recently passed over. The slots @code{:current-fcolor}
and @code{:current-bcolor} act similarly for the foreground and background colors
of the text. The slot
@code{:fill-background-p} controls the background of the characters. If
@code{:fill-background-p} is T, the background of the character will be drawn in
the @code{:current-bcolor}. If @code{:fill-background-p} is @code{nil},
the background of the glyphs will not be drawn at all (allowing
whatever is behind the multifont text object to show through). The slot 
@code{:show-marks} turns on and off the visibility of text marks. If
@code{:show-marks} is T, text-marks will be visible, appearing as little carats
pointing to the character to which they are stuck. When @code{:show-marks} is
@code{nil}, the marks will be invisible.

Along with the multi-font text object are a pair of special
interactors that make them editable
(@xref{multifontinters,,Interactors for Multifont Text}). The font 
object and the two interactors are combined into the
@code{multifont-gadget} gadget for convenience (@xref{multifontgadgetsec,,A Multifont Text Gadget}).

There are two demos that show off multifont capabilities. @code{demo-text}
shows how to use the @code{multifont-text} object with the
@code{multifont-text-interactor}. @code{demo-multifont} shows how to use
multiple text fields in a single window with the
@code{focus-multifont-textinter} and @code{selection-interactor}, and
demonstrates the indentation and paren-matching features of lisp mode.

@subsection Format of the @code{:initial-text} Slot
@node Format of the :initial-text Slot

The format used in the @code{:initial-text} slot of @code{multifont-text}
is also used by many of the procedures and
functions that can be called using the multifont object.

In its simplest form, the @code{:initial-text} format can be a single
string. In this form, the default font and colors are used.

@smallexample
(create-instance 'opal:multifont-text opal:aggregate
   @math{...}
   (:initial-text "here is my example string.")
   @math{...}
 @end smallexample

All other formats require a list structure. The outermost list is the list of
lines:  @code{(list @var{line1} @var{line2} ... )}. A line can either be a string in which
case the default font and colors are used, or 
a line can be a list of fragments:
@code{(list @var{frag1} @var{frag2} ... )}. Each line acts as though it ends with a newline
character. If the @code{multifont-text} has word wrap activated, each line will
also be broken at places where the length of the text exceeds the
@code{:text-width}, thus the user need not compute how to break up the text to
be placed in the window. A fragment is the unit that allows the user to enter
font data into the @code{:initial-text} format. A fragment can be 
one of the following:
@itemize
@item
a string,  in which case the defaults are used.

@item
a @code{cons}ing of a string with a Garnet font:  @code{(cons "string" @var{garnet-font})}.

@item
a list of a string, font, foreground color, and background color:
@code{(list "string" @var{font} @var{f-color} @var{b-color})}. If @emph{font} or
@emph{color} is @code{nil}, the default will be used.

@item
a @code{view-object} (@xref{objects,,Using @code{view-objects} as Text}).

@item
a mark, in the form @code{(list :mark sticky-left name info)} (@xref{marks,,Using Marks}).
@end itemize

Note that only the fragment level contains font or color information.
For instance, a single line in bold font may look like this:


@smallexample
`((,(cons "Here is my example string"
          (opal:get-standard-font :fixed :bold :medium))))
@end smallexample

Here is a set of sample values for the @code{:initial-text} slot. Each
of these examples are pictured in @ref{fig:ex6}. Details
on using fonts, colors, marks, and graphical objects are given in
section @ref{multifont-fns,,Functions on Multifont Text}.

@smallexample
@emph{;; Define some fonts for brevity, and a circle to use in a string.}
(setf italic (opal:get-standard-font :fixed :italic :medium))
(setf bold   (opal:get-standard-font :fixed :bold :medium))
(create-instance 'my-circle opal:circle)

@emph{;; A pair of lines. Both lines are strings.}
'("An example string" "with multiple lines")

@emph{;; Same pair of lines in italics.}
`((("an example string" . ,italic))
  (("with multiple lines" . ,italic)))

@emph{;; A single line with multiple fragments. Note fragments can be strings}
@emph{;; when default font is desired.}
`(("Here " ("is" . ,italic) " my " ("example" . ,bold) " string."))

@emph{;; A single line containing a graphical object}
`(("Here is a circle:" ,my-circle))

@emph{;; A single line with colored fragments}
`(("Here is "
   ("yellow" ,bold ,opal:yellow)
   " and "
   ("red" ,bold ,opal:red)
   " text"))
   
@emph{;; A single line with marks. Note: make marks visible by setting}
@emph{;; @code{:show-marks} to @code{t}.}
`(("The " (:mark nil) "(parentheses)" (:mark t) " are marked")))
@end smallexample

@float Figure, fig:ex57
@center @image{multifont-pix, 2.5in}
@caption{Examples of the multifont-text object}
@anchor{multifont-pix}
@end float

@node Functions on Multifont Text
@subsection Functions on Multifont Text
@anchor{multifont-fns}

The @code{opal:multifont-text} differs from most objects in that it has a great
number of functions that operate on it. The functions range
from mundane cursor movement to complicated operations upon selected
text. Very few operations can be performed by manipulating the slots of a
multifont object.

@node Functions that Manipulate the Cursor
@subsubsection Functions that Manipulate the Cursor

@defun opal:set-cursor-visible text-obj vis


This makes the cursor of a @code{multifont-text} visible or invisible, depending
on whether @var{vis} is @code{t} or @code{nil}. Having a visible cursor is
not required for entering text, but is recommended for situations
requiring user feedback. This function does not return any useful value.

@end defun


@defun opal:set-cursor-to-x-y-position text-obj x y
@defunx opal:set-cursor-to-line-char-position text-obj line-num char-num

These move the cursor to a specific location in the @code{multifont-text}. The
function @code{set-cursor-to-x-y-position} sets the cursor to the position
nearest the @math{(x, y)} pixel location. The function
@code{set-cursor-to-line-char-position} tries to place the cursor at the
position indicated (zero-based). If the line or character
position is not legal, it will
try to find a reasonable approximation of the location given. Neither
function returns any useful value.

@end defun

@defun opal:go-to-next-char text-obj

@defunx opal:go-to-prev-char text-obj

@defunx opal:go-to-next-word text-obj

@defunx opal:go-to-prev-word text-obj

@defunx opal:go-to-next-line text-obj

@defunx opal:go-to-prev-line text-obj


These functions move the cursor relative to where it is currently located.
The functions @code{go-to-next-char} and @code{go-to-prev-char} move the cursor one
character at a time. The functions @code{go-to-next-word} and @code{go-to-prev-word}
move the cursor one word at a time. In this case, a word is defined by
non-whitespace characters separated by whitespace. A whitespace character is
either a space or a newline. These functions will skip over all
non-whitespace until they reach a whitespace character. They will then skip
over the whitespace until they find the next non-white character. The
functions @code{go-to-next-line} and @code{go-to-prev-line} moves down and up one
line at a time. The horizontal position of the cursor will be maintained as
close as possible to its position on the original line. The functions
@code{go-to-next-char}, @code{go-to-prev-char}, @code{go-to-next-word}, and
@code{go-to-prev-word} all return the characters that were passed over including
newlines as a simple string. @code{nil} will be returned if the cursor
does not move as a
consequence of being at the beginning or end of the text. The
functions @code{go-to-next-line} and @code{go-to-prev-line} do not return
useful values. 

@end defun

@defun opal:go-to-beginning-of-line text-obj
@defunx opal:go-to-end-of-line text-obj
@defunx opal:go-to-beginning-of-text text-obj
@defunx opal:go-to-end-of-text text-obj

These functions move the cursor to a position at the beginning or end of
something. The functions @code{go-to-beginning-of-line} and
@code{go-to-end-of-line} move the cursor to the beginning or end of its current
line. The functions @code{go-to-beginning-of-text} and @code{go-to-end-of-text}
move the cursor to the beginning or end of the entire document. None of these
functions return a useful value.

@end defun

@node Functions for Text Selection
@subsubsection Functions for Text Selection

@defun opal:toggle-selection text-obj mode

This will turn off and on the selection mode. When selection mode is on,
moving the cursor will drag the selection highlight to include characters
that it passes over. Moving the cursor back over selected text will unselect
and unhighlight the text. Setting @var{mode} to @code{t} turns on
selection mode, and setting it to @code{nil} turns off selection mode.
Turning off selection mode will unhighlight all highlighted text.

@end defun

@defun opal:set-selection-to-x-y-position text-obj x y
@defunx opal:set-selection-to-line-char-position text-obj line-num char-num


These functions are similar to the functions @code{set-cursor-to-x-y-position}
and @code{set-cursor-to-line-char-position}. The selection highlight has two
ends. One end is bound by the cursor; here, the other end is called the
selection end. To move the cursor end of the highlight, use the cursor
functions. To move the selection end, use these two functions. The function
@code{set-selection-to-x-y-position} sets the selection end based on pixel
position. The function @code{set-selection-to-line-char-position} is based on
line and character position. Neither function returns a useful value.

@end defun

@defun opal:copy-selected-text text-obj

@defunx opal:delete-selection text-obj &optional lisp-mode-p

These functions are used to manipulate the selected text. The
@code{copy-selected-text} function just returns the selected text without affecting
the multifont object. The function @code{delete-selection} removes all selected
text from the multifont object and returns it. Both functions return the text
in the @code{text} format described above. The function @code{delete-selection}
will also automatically turn off selection mode. Since special bookkeeping
is done to keep track of parentheses and function names in lisp-mode, you must
supply a value of T for @emph{lisp-mode-p} when the interactors currently working
on the @emph{text-obj} are in lisp-mode.

@end defun


@defun opal:change-font-of-selection text-obj font &key family size italic bold


The font of selected text can be updated using this function. There are two
options. The new font can be given explicitly using the @emph{font} parameter,
or it can be updated by setting @emph{font} to @code{nil} and using the key
parameters. 

Valid values for @var{family} are:
@itemize
@code{:fixed} - makes font fixed width

@code{:serif} - makes font variable-width with "serifs" on the characters

@code{:sans-serif} - makes font variable-width with no serifs on the characters
@end itemize

Values for @emph{size} are:
@itemize
@code{:small} - makes font smallest size

@code{:medium} - makes font medium size

@code{:large} - makes font large size

@code{:very-large} - makes font the largest size

@code{:bigger} - makes font one size larger than it is

@code{:smaller} - makes font one size smaller than it is
@end itemize

Values for @emph{italic} and @emph{bold} are:
@itemize
@code{t} - makes font italic or bold

@code{nil} - undoes italic or bold

@code{:toggle} - toggles italic or bold throughout the selected region.

@code{:toggle-first} - looks at the first character of the selection,
and changes the entire region by toggling based on the bold or italic
of that character
@end itemize

@end defun

The function @code{change-font-of-selection} is also used to change the value
of the slot @code{:current-font} even if there is no text selected.

@defun opal:Change-Color-Of-Selection text-obj foreground-color background-color

This function will change the color of the selected text. If only one
of foreground-color and background-color needs to be changed, the
other should be sent as @code{nil}. This function also changes the
values of the slots @code{:current-fcolor} and @code{:current-bcolor}.

@end defun

@node Functions that Access the Text or Cursor
@subsubsection Functions that Access the Text or Cursor

@defun opal:get-string text-obj
@defunx opal:get-text text-obj

These functions return the entire contents of the @code{multifont-text} object.
The function @code{get-string} returns the contents as a single string with
@code{#\newline}s separating lines. The function @code{get-text} returns the
contents in the @code{:initial-text} slot format.

@end defun


@defun opal:get-cursor-line-char-position text-obj
@defunx opal:get-selection-line-char-position text-obj


These return the position of the cursor or the selection end of a highlight.
The values are returned using multiple return values: (@var{values line char}).

@end defun

@defun opal:fetch-next-char text-obj
@defunx opal:fetch-prev-char text-obj


These return the character before or after the cursor. The function
@code{fetch-next-char} returns the character after the cursor, and
@code{fetch-prev-char} returns the character before the cursor. Neither function
affects the text of the object. The functions will return @code{nil} if the cursor
is at the beginning or end of the text where there is no character before or
after the cursor.

@end defun

@node Adding and Editing Text
@subsection Adding and Editing Text

@defun opal:add-char text-obj  char &optional font  foreground-color  background-color lisp-mode-p
@defunx opal:insert-string text-obj  string &optional font  foreground-color  background-color
@defunx opal:insert-text text-obj  text

These functions are used to add text to a multifont object. The function
@code{add-char} adds a single character, the function @code{insert-string} adds
a whole string possibly including newline, and @code{insert-text} adds
text that is in @code{:initial-text} slot format.

The optional @var{font} and @var{color} parameters indicate the font and color
of the new text. If any of these parameters are @code{nil}, the newly added text
will use the value of the @code{:current-font}, @code{:current-fcolor}, and/or
@code{:current-bcolor} slots, which can be set chapterly or allowed to take on
the font and colors of the character over which the cursor last passed.

The optional @var{lisp-mode-p} argument indicates whether the interactors
currently working on the multifont object are in lisp-mode. Extra operations
are performed on the string to keep track of parentheses and function names
when in lisp-mode, and this parameter is required to keep the bookkeeping
straight.

@end defun


@defun opal:delete-char text-obj
@defunx opal:delete-prev-char text-obj
@defunx opal:delete-word text-obj
@defunx opal:delete-prev-word text-obj


These functions are used to delete text from a multifont object. The functions
@code{delete-char} and @code{delete-prev-char} delete a single character after
or before the cursor. The functions @code{delete-word} and @code{delete-prev-word}
delete a single word. A word is defined the same way as in the functions
@code{go-to-next-word} and @code{go-to-prev-word}. The word will be deleted by
deleting whitespace characters up to the first non-whitespace character and
then deleting all non-whitespace up to the next whitespace character. The
value returned by these functions is the characters deleted. @code{nil} is returned
if no characters are deleted.

@end defun


@defun opal:delete-substring text-obj start-line-num start-char-num end-line-num end-char-num
@defunx opal:kill-rest-of-line text-obj


These functions are used to delete larger portions of text. The function
@code{delete-substring} removes all characters within the given range. If the
start position is after the end position, nothing will happen. The function
@code{kill-rest-of-line} deletes all characters from the cursor to the end
of the current line. When word wrap is on, the end of a wrapped line is where
the wrap occurs. Both functions return the deleted text as a string.

@end defun

@defun opal:set-text text-obj text

This function is used to reset everything in the multifont object. All
previous text is deleted and the new @var{text} is put in its place. The
@var{text} parameter uses the @code{:initial-text} slot format. The new cursor
position will be at the beginning of the text. This function does not return
a useful value.

@end defun

@node Operations on @code{:initial-text} Format Lists
@subsubsection Operations on @code{:initial-text} Format Lists

@defun opal:text-to-pure-list text
@defunx opal:pure-list-to-text list

These functions converts text in the @code{:initial-text} slot format into a format
that is similar but uses a list representation for fonts, colors,
marks, and view-objects. Converting the
fonts from Garnet objects to lists makes operations such as reading or writing
text objects to files easier. To convert from @code{:initial-text}
format to list use @code{text-to-pure-list} and to convert back use
@code{pure-list-to-text}. 

@end defun


@defun opal:text-to-string text

This function converts text in the @code{:initial-text} format into a regular
character string, losing all font, color, and mark information.

@end defun

@defun opal:concatenate-text text1 text2

This function is like the lisp function @code{concatenate} for arrays. The
function will return the concatenation of @var{text2} onto the end of
@var{text1}. The function will not affect @var{text1} or @var{text2}.

@end defun

@node Using @code{view-objects} as Text
@subsubsection Using @code{view-objects} as Text
@anchor{objects}
@cindex{add-object}
@cindex{get-objects}
@cindex{notice-resize-object}

@defun opal:add-object gob object
@defunx opal:get-objects gob
@defunx opal:notice-resize-object object

These functions are useful when you want to include a shape or other
view-object in the multifont text. The function @code{add-object} will insert
a view-object at the cursor. The object will act just like a character;  the 
cursor can move over it, and it can be selected, deleted, etc. The function 
@code{get-objects} will return a list of all the objects currently in the text. 
When the size of an object which is in the text changes, the function 
@code{notice-resize-objects} should be used to notify multifont of the change.

@end defun

@cindex{marks}
@cindex{show-marks}
@node Using Marks
@subsubsection Using Marks
@anchor{marks}

Another feature of the multifont object is the ability to use text-marks. The
function @code{insert-mark} will insert a mark at the cursor. Marks are
invisible to the cursor as you are typing, and are primarily used as
place-holders in the text. The lisp-mode feature uses marks to keep
track of parentheses when it is paren-matching. To make all of the
marks in a multifont object visible (so you can see them), set the
@code{:show-marks} slot to @code{t}.

@cindex{insert-mark}

@defun opal:insert-mark gob sticky-left &key name info

The @var{sticky-left-p} parameter should be @code{t} if the mark
should stick to the character on its left, and @code{nil} if it should
stick to the one on its right. When a mark "sticks" to a character,
the cursor cannot be inserted between the character and the mark. This
makes the position of the mark equivalent to the position of the
character, so it is easy to determine whether the cursor is on the
left or right side of the mark.

One implication of "stickiness" is that a mark moves through the
string along with the character that it is stuck to (i.e., if you are
typing with the cursor in front of the mark, the mark will be pushed forward
along with the character in front of it). Another implication is
that when a character is deleted, the mark(s) stuck to it will be
deleted as well.

The @var{name} parameter is a useful way to differentiate between marks,
and @var{info} can be used to let the mark carry any additional
information that might be useful.

@end defun

@cindex{search-for-mark}
@cindex{search-backwards-for-mark}
@cindex{between-marks-p}

@defun opal:search-for-mark gob &key name info
@defunx opal:search-backwards-for-mark gob &key name info
@defunx opal:between-marks-p gob &key name info

The functions @code{search-for-mark} and
@code{search-backwards-for-mark} will return the mark which is nearest
to the cursor. Leaving out the keywords will search for any mark, or
include a @var{name} or @var{info} to search for a specific type of
mark.  The function @code{between-marks-p} can help to use marks as a
type of region.  It will search right and left, and will return
@code{t} if the mark found to the left is sticky-left and the one on
the right is sticky-right.

@end defun

@node Interactors for Multifont Text
@subsection Interactors for Multifont Text
@anchor{multifontinters}

It may seem strange to find a section about interactors in the Opal chapter,
since the interactors mentioned here are integral to using the
@code{opal:multifont-text} object, it was decided to include their description
here, near the description of the @code{multifont-text}. If you are not
familiar with the basic principles of interactors, you will be best served
if you read the interactors chapter first, particularly the parts about the
@code{inter:text-interactor} and the slots of all interactors.

There are three interactors for multifont-text objects. The
@code{multifont-text-interactor} is similar to the standard
@code{text-interactor}, and is used in much the same way. Two other
interactors, the @code{focus-multifont-textinter} and
@code{selection-interactor} are designed to work together in more
complicated situations, like when there are two or more multifont
objects being edited in the same window.

The convenient @code{multifont-gadget} (@xref{multifontgadgetsec,,A
Multifont Text Gadget}) combines the @code{focus-multifont-textinter}
and @code{selection-interactor} with a @code{multifont-text} object,
so you might be able to use it rather than explicitly creating the
interactors below. However, the gadget is only useable when you have
exactly one @code{multifont-text} object in a window. If you want more
than one text object, then you should create the interactors
explicitly because there should still be only one pair of
@emph{interactors} in each window, and the interactors should be set
up so the @code{:start-where} will return one of the multifont
objects. So, it could be an @code{:element-of @math{...}} type specification
or a @code{:list-of @math{...}} or whatever that will return multifonts, just
so long that it doesn't return other types of objects.

@node Multifont Text Interactor
@subsubsection Multifont Text Interactor
@anchor{multifontkeyboardcmds}

@smallexample
@cindex{multifont-text-interactor}

(create-instance 'inter:multifont-text-interactor inter:text-interactor
   (:window nil)
   (:edit-func #'inter::multifont-text-edit-string)
   
   @emph{;; For the following three slots, @xref{lisp-mode,, Lisp Mode}}
   (:lisp-mode-p nil)           
   (:match-parens-p nil)
   (:match-obj @math{...})        

   @emph{;; @xref{text-interactor,,@code{text-interactor}}}
   (:button-outside-stop? t)

   (:drag-through-selection? t)

   @emph{;; (lambda (inter text-obj))}
   (:stop-action #'inter::multifont-text-int-stop-action)
   
   (:after-cursor-moves-func nil))
@end smallexample

This interactor was designed to appeal to people familiar with the
@code{inter:text-interactor}. The interactor is started when you click
the mouse on a text object, and it stops when you type the stop-event,
like @key{RET}. The editing commands (listed below) are similar to
@code{inter:text-interactors}'s commands, with many additional ones.

@cindex{drag-through-selection?}
The new slot @code{:drag-through-selection?} controls whether dragging
through the string with the mouse will cause the indicated region to
become selected. You can apply all the standard multifont commands to
a region that is selected this way. Note: since we use "pending-delete"
like the Macintosh, if you type anything when something is selected,
the selected text is deleted. 

@cindex{font changing keys}
@cindex{Editing commands for multifont}

The keys names below are the familiar Unix/Emacs compose and function
keys.

@cindex{key bindings}

@table @asis

    @item @kbd{C-f}, @kbd{C-b}, @kbd{C-d}, @kbd{C-h}
    Move or delete character: forward, backwards, delete forwards, delete backwards
    
    @item @key{LEFT}, @key{RIGHT}
    backwards, forwards
     
    @item @kbd{M-f}, @kbd{M-b}, @kbd{M-d}, @kbd{M-h}
    same but by words
    
    @item @kbd{C-p}, @kbd{C-n}
    previous line, next line
    
    @item @key{UP}, @key{DOWN}
    previous line, next line
    
    @item @kbd{C-,} or @key{HOME}
    beginning of document
    
    @item @kbd{C-.} or @key{END}
    end of document
    
    @item @kbd{C-a}
    beginning of line
    
    @item @kbd{C-e}
    end of line
    
    @item @kbd{C-k}
    kill line
    
    @item @kbd{C-u}
    delete entire string
    
    @item @kbd{C-w}, @key{CUT}
    delete selection
    
    @item @kbd{M-w}, @code{COPY}
    copy selection to interactor cut buffer
    
    @item @kbd{C-c}
    copy entire string to X11 cut buffer
    
    @item @kbd{C-y}, @key{PASTE}
    yank interactor cut buffer or X11 cut buffer into string
    
    @item @kbd{C-Y}, @kbd{C-@key{PASTE}}
    yank X11 buffer
    
    @item @kbd{M-y}, @kbd{C-@key{PASTE}}
    yank interactor cut buffer
@end table

@subsubheading The following key combinations extend the selection while moving:
@node The following key combinations extend the selection while moving:

@table @asis

       @item @kbd{C-@key{LEFT}}, @kbd{C-@key{RIGHT}}
       prev, next char selecting
       
       @item @kbd{C-@key{LEFT}}, @kbd{C-@key{RIGHT}}
       prev, next word selecting
       
       @item @kbd{C-@key{UP}}, @kbd{C-@key{DOWN}}
       up-line, down-line selecting
       
       @item @kbd{C-@key{HOME}}, @kbd{C-@key{END}}
       beginning, end of string selecting
       
       @item @kbd{C-*}
       select all

@end table

@node @code{C-M-}@emph{key} Lisp Stuff If You Have Lisp Mode on (See Below)
@subsubheading @code{C-M-}@emph{key} Lisp Stuff If You Have Lisp Mode on (See Below)

@table @asis

       @item @kbd{C-M-b}, @kbd{C-M-@key{LEFT}}
       prev lisp expression
       
       @item @kbd{C-M-f}, @kbd{C-M-@key{RIGHT}}
        next lisp expression
        
       @item @kbd{C-M-h}, @kbd{C-M-@key{BS}}, @kbd{C-M-@key{DELETE}}
       delete prev s-expr
       
       @item @kbd{C-M-d}
       delete next s-expr
       
@end table

@subsubheading @code{C-@key{SHIFT}-}@emph{key} Is for Font Stuff
@node @code{C-@key{SHIFT}-}@emph{key} Is for Font Stuff
@table @asis
       
       @item @kbd{C-@key{SHIFT}-B}
       toggle bold

       @item @kbd{C-@key{SHIFT}-I}
       toggle italic

       @item @kbd{C-@key{SHIFT}-F}
       fixed font (courier)

       @item @kbd{C-@key{SHIFT}-T}
       times font (serif)

       @item @kbd{C-@key{SHIFT}-H}
       helvetica font (sans-serif)

       @item @kbd{C-@key{SHIFT}-<}
       smaller font

       @item @kbd{C-@key{SHIFT}->}
       bigger font

       @item @kbd{C-1}, @kbd{C-2}, @kbd{C-3}, @kbd{C-4}
       small, medium, large, and very-large fonts
@end table

Of course, you can change the mapping of all these functions, using
the standard @code{inter:bind-key} mechanism
@xref{text-interactor,,@code{text-interactor}}.

@node Focus Multifont Text Interactor
@subsubsection Focus Multifont Text Interactor

@smallexample
@cindex{focus-multifont-textinter}

(create-instance 'inter:focus-multifont-textinter inter:interactor
   (:window nil)
   (:obj-to-change nil)
   (:stop-event nil)
   (:lisp-mode-p nil)
   (:match-parens-p nil)
   (:match-obj ...)
   @emph{;; (lambda (inter obj final-event final-string x y))}
   (:final-function nil)           
   @emph{;; (lambda (inter text-obj))}
   (:after-cursor-moves-func nil))
@end smallexample

For applications where one wants the user to be able to type text into a
multifont text object without first having to click on the object, the
@code{focus-multifont-textinter} was created. This interactor provides
a feel more like a text editor. The demo @code{demo-text} shows how to
use the @code{focus-multifont-textinter} to create and edit @code{multifont-text}
objects. The @code{demo-multifont} text editor shows how to use this
interactor along with the @code{selection-interactor} described in the
next section.

Unlike other interactors, this interactor never goes into the @emph{running} state.
The interactor can only @emph{start}.  This means that aborting this interactor,
or setting the @code{:continuous} slot to non-@code{nil} is meaningless. The only
way to stop the interactor is either to deactivate it (set the @code{:active-p}
slot to @code{nil}) or to destroy it. If two or more of these interactors are in
the same window, all of the interactors will fetch the keyboard events and
send them to their corresponding multifont text objects. Extreme caution
is urged when having two or more focus interactors in the same window to avoid
having keystrokes go to multiple objects. Ways to avoid having keystrokes go
to multiple destinations are to have non-overlapping @code{:start-where}
positions for all the interactors or to make certain that all idle interactors
have their @code{:obj-to-change} slot set to @code{nil}.

Usually this interactor will continue running until it is destroyed, but you may
want to execute a final function whenever a particular key is pressed.
Whenever the user issues the event specified in the @code{:stop-event} slot
(like @key{RET}), the function in @code{:final-function} is executed.
The parameters to the final-function are the same as for the standard
@code{text-interactor}:
@smallexample
@code{(lambda (an-interactor obj-being-edited final-event final-string x y))}
@end smallexample

When a @code{focus-multifont-textinter} is in a window, all keyboard
input will be fed directly into the multifont text object that is in
its @code{:obj-to-change} slot. If the @code{:obj-to-change} slot is
@code{nil}, then no multifont text object has the focus.

The @code{inter:focus-multifont-textinter} has the same key bindings as the 
@code{inter:multifont-text-interactor}.

The @code{inter:focus-multifont-textinter} also has several functions that can
be used on it. These functions are used mainly to manipulate the multifont
text that the interactor is focused upon.

@cindex{set-focus}
@defun inter:set-focus interactor multifont-text

This function changes the focus of a @code{focus-multifont-textinter} from one
text object to another. The cursor of the newly activately text object will
become visible indicating that it is ready to accept text. The cursor of the
previous text object will become invisible and any selected text will become
unselected. If the @emph{multifont-text} parameter is @code{nil}, then the currently
selected text object will become unselected and no object will have the
focus. This function does not return any useful value.

@end defun

@cindex{copy-selection}
@cindex{cut-selection}
@cindex{paste-selection}

@defun inter:copy-selection interactor
@defunx inter:cut-selection interactor
@defunx inter:paste-selection interactor


These functions perform cut, copy, and paste operations upon the text object
that currently has the focus. The @code{cut-selection} and @code{copy-selection}
operations copy the selected text into the cut-buffer. @code{cut-selection}
will delete the selected text, but @code{copy-selection} will leave it
unaffected. @code{paste-selection} inserts the cut buffer at the position of
the cursor.

@end defun

@node Selection Interactor
@subsubsection Selection Interactor

@smallexample
@cindex{selection-interactor}

(create-instance 'inter:selection-interactor inter:interactor
   (:focus-interactor @dots{})
   (:match-parens-p nil)
   (:match-obj @dots{}))
@end smallexample

The @code{selection-interactor} is a complementary interactor to the
@code{focus-multifont-textinter}. The @code{selection-interactor}
controls mouse input so that the user may click and drag the mouse in
order to select text and choose a new multifont object to edit. The
@code{:focus-interactor} slot must be filled with a valid
@code{inter:focus-multifont-textinter} interactor. It is the
interactor in that slot that will be used to reset the focus if a new
multifont object is clicked upon. The @code{:start-where} slot must
include all possible multifont objects that the
@code{selection-interactor} operates upon. If a new multifont object
is clicked upon the @code{selection-interactor} will reset the focus
to the new object and place the cursor at the point where the mouse
was clicked. If the mouse is clicked in the multifont object that
contains the cursor, the cursor will be moved to position of the
click. Dragging the mouse across a multifont object will select the
text that was passed over by the mouse. Clicking the mouse while
holding the shift key (or clicking the mouse with the right button
instead of the left) causes the selection highlight to extend to the
newly clicked position.

The @code{selection-interactor} uses a key translation table to decode different
types of clicking operations. The current table translates @code{:leftdown}
to @code{:start-selection} and @code{:shift-leftdown} and @code{:rightdown} to
@code{:start-selection-continue}. These combinations can be changed and other
combinations added by using the @code{inter:bind-key} function.


@node Lisp Mode
@subsubsection Lisp Mode
@anchor{lisp-mode}
@cindex{lisp mode in multifont}

Multifont supports a special text-entry mode which is useful for typing 
Lisp functions or programs. This mode can be used by setting the 
@code{:lisp-mode-p} slot of the @code{multifont-text-interactor} or 
@code{focus-multifont-textinter} to T. When in lisp mode, lines of text will 
tab to the appropriate spot, and semicolon comments will appear in italics. 
It is important that the fonts of the text are not changed during lisp-mode,
since certain fonts hold special meaning for tabs and parenthesis-matching. 

@cindex{indent in lisp-mode}

@defun inter:indent string how-many how-far

This function can be used to define a special indent amount for your
own function. The  
argument @emph{string} is the name of the function, @emph{how-many} is the number  
of arguments (starting with the first) that should be indented the special 
amount, and @emph{how-far} is an integer signifying how many spaces from the 
start of the function name these special arguments should be placed. If 
@emph{how-far} is -1, then the indent will line up with the first argument on the 
line above it. The argument following the last special argument will be 
placed one space in from the start of the function name, and all following 
arguments will line up with the first argument on the line above it.
Here are some examples of the default indentations:

@smallexample
(indent "defun" 2 4)

(indent "create-instance" 2 4)

(indent "let" 1 4)

(indent "do" 2 -1)

(indent "cond" 0)

(indent "define-method" 3 4)
@end smallexample


There are several keys which are bound specially during lisp mode:

@table @asis
@cindex{key descriptions}
@item @kbd{C-M-f}, @kbd{C-M-@key{RIGHT}}
skip forward lisp expression

@item @kbd{C-M-b}, @kbd{C-M-@key{LEFT}}
skip backward lisp expression

@item @kbd{C-M-d}
delete lisp expression

@item @kbd{C-M-h}, @kbd{C-M-@key{BS}}
delete previous lisp expression
@end table

@cindex{match-parens-p}
@cindex{parenthesis matching}
Also helpful in lisp mode is setting the @code{:match-parens-p} of the 
interactors to T. When the cursor is next to a close parenthesis, the
corresponding open parenthesis will be highlighted in boldface. Also, if 
the interactors' @code{:match-obj} is set to another multifont object, that 
object's text will be set to the text of the line that the matching 
open parenthesis is on.

@end defun

@cindex{turn-off-match}

@defun inter:turn-off-match interactor

This function can be used to externally turn off a matched parenthesis, since 
it will only be automatically turned off when the cursor is moved away from the
close parenthesis.

@end defun

@cindex{add-lisp-char}
@cindex{delete-lisp-region}

@defun inter:add-lisp-char text-obj char &optional new-font new-foreground-color new-background-color
@defunx inter:delete-lisp-region text-obj

Because lisp mode does some extra things during addition and deleting of text, 
these special functions should be used when in lisp mode in the place of 
@code{opal:add-char} and @code{opal:delete-selection}. If changes are made 
externally without using these functions, future tabs and parenthesis-matching 
may not work properly. Note: you can also use the @emph{lisp-mode-p} parameter
of @code{opal:add-char} and @code{opal:delete-selection} to indicate that the
operation is taking place while lisp-mode is active.

@end defun

@cindex{lispify}

@defun inter:lispify string

This function takes a plain string and will return text which will work in 
lisp mode. The returned text is in @code{:initial-text} format, and can be used
with functions such as @code{set-text}. The text will already be indented and 
italicized properly.

@end defun

@subsection Auto-Scrolling Multifont Text Objects
@node Auto-Scrolling Multifont Text Objects
@cindex Auto scroll
@cindex opal:multifont-text

A companion to the word-wrap feature is the vertical auto scroll feature.
The auto scroll option can be utilized when a multifont-text object is
used inside a scrolling-window along with a focus-multifont-textinter,
multifont-text-interactor, or selection-interactor.

The interface for auto-scrolling @code{opal:multifont-text} is the same as for
@code{opal:text}, @xref{auto-scroll,, Scrolling Text Objects}

@subsection After Cursor Moves
@node After Cursor Moves
@cindex{after-cursor-moves-func}

To support lisp-mode, there is a slot of the three multifont
interactors (@code{multifont-textinter},
@code{focus-multifont-textinter}, @code{selection-interactor}) called
@code{:after-cursor-moves-func}. If non-@code{nil}, it should be a
function called as @code{(lambda (inter text-obj))} and will be called
whenever the cursor moves, or the text to the left of the cursor
changes.

If the function in this slot is overridden with a user-supplied function,
the new function should do a @code{(call-prototype-method ...)} to ensure
that the default lisp-mode indentation function is executed, also.

@subsection A Multifont Text Gadget
@node A Multifont Text Gadget
@anchor{multifontgadgetsec}

Putting a gadget description into the Opal section is fairly
strange. Just as the interactors section above, it was decided that the
@code{multifont-gadget} should be described in the
@code{multifont-text} section.

@cindex{multifont-gadget}

@smallexample
(create-instance 'gg:multifont-gadget opal:aggregadget
   (:left 0)
   (:top 0)
   (:initial-text (list ""))
   (:fill-background-p nil)
   (:word-wrap-p nil)
   (:text-width 300)
   (:stop-event nil)
   (:selection-function nil))
@end smallexample

The @code{multifont-gadget} is a conglomeration of a @code{multifont-text},
a @code{focus-multifont-textinter}, and a @code{selection-interactor}.
These are all put together to take some of the trouble out of assembling the
pieces by hand. The slots of the gadget are the same as the
@code{multifont-text}. To use the gadget just create it and go. The keyboard
and mouse handling are built in. The trouble with this gadget is that you
cannot have more than one @code{multifont-gadget} per window. If you have more
than one, all the gadgets will receive the same keystrokes; thus, all the
gadgets will respond to the keyboard at the same time.

Usually the gadget will continue running until it is destroyed, but you may
want to execute a selection function whenever a particular key is pressed.
Whenever the user issues the event specified in the @code{:stop-event} slot
(like @key{RET}), the function in @code{:selection-function} is executed. The
selection function takes the usual parameters (the gadget and its value), where
the value is the pure text representation of the gadget's current string.

There is a small demo of how to use the multifont text gadget in the
gadget file. To run it, execute @code{(garnet-gadgets:multifont-gadget-go)}.

@section Aggregate objects
@node Aggregate objects

@anchor{aggregates}
Aggregate objects hold a collection of
other graphical objects (possibly including other aggregates). The objects
in an aggregate are called its @emph{components} and the aggregate is the
@emph{parent} of each component. An aggregate itself has no filling or
border, although it does have a left, top, width and height.

Note: When you create an aggregate and add components to it, creating an
instance of that aggregate afterwards does @emph{not} create instances of the
children. If you use Aggregadgets instead, then you @emph{do} get copies
of all the components. Aggregadgets also provide a convenient syntax for
defining the components. Therefore, it is often more appropriate to use
Aggregadgets than aggregates. See the Aggregadgets chapter
@cite{AggregadgetsChapter}.

@subsection Class Description
@node Class Description
@anchor{agg-class}
@smallexample

@cindex{aggregate}

(create-instance 'opal:Aggregate opal:view-object
  (:components nil)
  (:hit-threshold 0)
  (:overlapping T))
@end smallexample

@cindex{components}
The @code{:components} slot holds a list of the graphical objects that are
components of the aggregate. @i{This slot should
not be set directly but rather changed using @code{add-component} and
@code{remove-component} (section @ref{addremsection}).}
The covering (which is the ordering among children) in the
aggregate is determined by the order of components in the @code{:components}
slot. @b{The list of components is stored from bottommost to topmost.}  This
slot cannot be set directly.

@cindex{hit-threshold}
@cindex{set-aggregate-hit-threshold}
@smallexample
opal:Set-Aggregate-Hit-Threshold @emph{agg}@ref{function}
@end smallexample
As is the case with graphical objects, the @code{:hit-threshold} slot of an
aggregate controls the sensitivity of the @code{point-in-gob} methods to hits
that are near to that aggregate. The value of the @code{:hit-threshold} slot
defaults to 0, but calling @code{set-aggregate-hit-threshold}
sets the @code{:hit-threshold} of an aggregate to be the maximum of all
its components.

@cindex{overlapping}
The @code{:overlapping} slot is used as a hint to the aggregate as to whether
its components overlap. This property allows the aggregate to redraw it's
components more efficiently. You can set the @code{:overlapping} slot to @code{nil}
when you know that the first level children of this aggregate will never
overlap each other on the screen. @emph{Currently, this slot is not used, but
it may be in the future.}

Aggregates have a bounding box, which, by default, is calculated from the
sizes and positions of all its children. If you want to have the position
or size of the children depend on that of the parent, it is important to
provide an explicit value for the position or size of the aggregate, and
then provide formulas in the components that depend on the aggregate's
values. Be careful to avoid circularities: either the aggregate should
depend on the sizes and positions of the children (which is the default)
@b{or} the children should depend on the parent. These cannot be easily
mixed in a single aggregate. It is important that the size and position of
the aggregate correctly reflect the bounding box of all its components, or
else the redisplay and selection routines will not work correctly.


@subsection Insertion and Removal of Graphical Objects
@node Insertion and Removal of Graphical Objects
@anchor{addremsection}

@cindex{add-component}
@defun opal:add-component aggregate graphical-object [[:where] position[locator]]

The method @code{add-component} adds @emph{graphical-object} to @emph{aggregate}. The
@emph{position} and @emph{locator} arguments can be used to adjust the
placement/covering of @emph{graphical-object} with respect to the rest of the
components of @emph{aggregate}.

@end defun

@cindex{position}
@cindex{front}
@cindex{back}
@cindex{behind}
@cindex{in-front}
@cindex{at}
There are five legal values for @emph{position}; these are: @code{:front},
@code{:back}, @code{:behind}, @code{:in-front}, and @code{:at}. Putting an object
at the @code{:front} means that it is not covered by any other objects in
this aggregate, and
at the @code{:back}, it is covered by all other objects in this aggregate.
Positioning @emph{graphical-object} at either @code{:front} or @code{:back}
requires no value
for @emph{locator}, as these are unique locations. If position is either
@code{:behind} or @code{:in-front} then the value of @emph{locator} should be a
graphical object already in the component list of the aggregate, in which
case @emph{graphical-object} is placed with respect to @emph{locator}. In the
final case, with @emph{position} being @code{:at}, @emph{graphical-object} is placed
at the @emph{locator}th position in the component list, where 0 means at
the head of the list (the back of the screen).

If none are supplied, then the new object is in front of all previous
objects. The @code{:where} keyword is optional before the locators, so
all of the following are legal calls:

@smallexample
(opal:add-component agg newobj :where :back)
(opal:add-component agg newobj :back)
(opal:add-component agg newobj)       @emph{; adds newobj at the :front}
(opal:add-component agg newobj :behind otherobj)
(opal:add-component agg newobj :at 4)
@end smallexample

Objects cannot belong to more than one aggregate. Attempting to add a
component of one aggregate to a second aggregate will cause Opal to
signal an error. If the @emph{locator} for @code{:behind} or
@code{:in-front} is not a component of the aggregate Opal will also
signal an error.


@cindex{add-components}
@defun opal:add-components aggregate &rest graphical-objects

This function adds multiple components to an aggregate. Calling
this function is equivalent to:

@smallexample
(dolist (gob (list {@emph{graphical-object}}@+[*]))
   (add-component @i{aggregate} gob))
@end smallexample

An example of using @code{add-components} is:
@smallexample
(opal:add-components agg obj1 obj2 myrect myarc)
@end smallexample

Note that this has the effect of placing the list of graphical objects from
back to front in @i{aggregate} since it inserts each new object with the
default @code{:where :front}.

@end defun

@cindex{remove-component}

@defmethod opal:remove-component aggregate graphical-object


The @code{remove-component} method removes the @var{graphical-object}
from @var{aggregate}. If @i{aggregate} is connected to a window, then
@var{graphical-object} will be erased when the window next has an
update message (@ref{windowfuncs,, Methods and Functions on Window
Objects}) sent to it.

@cindex{remove-components}

@end defmethod

@defun opal:remove-components aggregate &rest graphical-object

Removes all the listed components from @var{aggregate}.

@end defun

@cindex{move-component}

@defun opal:move-component aggregate graphical-object [[:where] position[locator]]

@code{move-component} is used to change the drawing order of objects in an
aggregate, and therefore change their covering (since the order of objects
in an aggregate determines their drawing order). For example, this function
can be used to move an object to the front or back. The object should
already be in the aggregate, and it is moved to be at the position specified.
It is like a @code{remove-component} followed by an @code{add-component} except
that it is more efficient. The parameters are the same as @code{add-component}.

@end defun

@subsection Application of functions to components
@node Application of functions to components

There are two methods defined on aggregates to apply functions to some
subset of the aggregate's components. The methods work on either the
direct components of the aggregate or all objects that are either direct or
indirect components of the aggregate.

@cindex{do-components}

@defun opal:do-components aggregate function &key type self

The @code{do-components} method applies @var{function} to all components of
@var{aggregate} in back-to-front order. The @var{function} should take one
argument which will be the
component. If a type is specified, the function is only applied to
components that are of that type. If the call specifies @code{:self} to be @code{t}
(the default is @code{nil}), and the aggregate is of the specified type,
then the function is applied to @var{aggregate} after being applied to
all of the components.

The @var{function} must be non-destructive, since it will be applied to the
components list of @var{aggregate}, not to a copy of the components
list. For instance, @var{function} cannot call @var{remove-component} on
the components. If you want to use a @var{function} that is
destructive, you must make a copy of the components list and call
dolist yourself.
@end defun

@cindex{do-all-components}

@defun opal:do-all-components aggregate function &key type self

The @code{do-all-components} method works similarly to @code{do-components},
except that in the case that a component is an aggregate,
@code{do-all-components} is first called recursively on the component
aggregate and then applied to the component aggregate itself.
@code{self} determines whether to call the function on the top level
aggregate (default=@code{nil}) after all components.

@end defun

@subsection Finding Objects Under a Given Point
@node Finding Objects Under a Given Point
@anchor{querying-children}

@cindex{point-to-component}
@cindex{point-to-leaf}

@defun opal:point-to-component aggregate x y &key type
@defunx opal:point-to-leaf aggregate x y &key type

@code{Point-to-component} queries the aggregate for the first generation
children at point (@var{x},@var{y}). The value of @var{type} can limit the search to
graphical objects of a specific type. This function returns the topmost
object at the specified point (@var{x},@var{y}).

@code{Point-to-leaf} is similar except that the query continues to the deepest
children in the aggregate hierarchy (the leaves of the tree). Sometimes you
will want an aggregate to be treated as a leaf in this search, like a button
aggregate in a collection of button aggregates. In this case, you should set
the @cindex{pretend-to-be-leaf} @code{:pretend-to-be-leaf} slot of each
aggregate that should be treated like a leaf. The search will not
proceed through the components of such an aggregate, but will return
the aggregate itself.

The @var{type} slot can be either @code{t} (the default), a type, or a list
of types. 
If @var{type} is specified as an atom, only objects that are of that
@var{type} will be tested. If @var{type} is specified as a list, only
objects whose type belongs to that list will be tested.
The value @code{t} for @var{type} will match all objects. If the @var{type} is
specified for a @code{point-to-leaf} call, and the @code{type} is a kind of
aggregate, then the search will stop when an aggregate of that type (or
types) is found at the specified (x,y) location, rather than going all
the way to the leaves. For example:

@smallexample
(create-instance 'myaggtype opal:aggregate)
(create-instance 'myagg myaggtype)
(create-instance top-agg opal:aggregate)
(opal:add-component top-agg myagg)

(create-instance obj1 @math{...})
(create-instance obj2 @math{...})
(opal:add-components myagg obj1 obj2)

;; @emph{will return obj1, obj2, or nil}
(opal:point-to-leaf top-agg x y)
;; @emph{will return myagg or nil}
(opal:point-to-leaf top-agg x y :type myaggtype) 
@end smallexample

@cindex{point-in-gob}
@code{Point-to-leaf} and @code{point-to-component} always use the function
@code{point-in-gob} on the components.

@end defun

@subsection Finding objects inside rectangular regions
@node Finding objects inside rectangular regions
@anchor{rect-regions}
@cindex{components-in-rectangle}

@sp 1
@smallexample
opal:Components-In-Rectangle @emph{aggregate  top  left  bottom  right} &key @emph{type  intersect}@ref{function}
@end smallexample

@cindex{leaf-objects-in-rectangle}
@smallexample
opal:Leaf-Objects-In-Rectangle @emph{aggregate  top  left  bottom  right} &key @emph{type  intersect}@ref{function}
@end smallexample

@cindex{obj-in-rectangle}
@smallexample
opal:Obj-In-Rectangle @emph{object  top  left  bottom  right} &key @emph{type intersect}@ref{function}
@end smallexample

The routine @code{components-in-rectangle} queries the aggregate for the first
generation children that intersect the rectangle bounded by @emph{top}, @emph{left},
@emph{bottom}, and @emph{right}. If @emph{intersect} is @code{nil}, then the
components which 
are returned must be completely inside the rectangle, whereas if
@emph{intersect} is non-@code{nil} (the default), then the components need only
intersect the rectangle. The value of @emph{type} can limit the search
to graphical objects of a specific type. 
@sp 1


@code{Leaf-objects-in-rectangle} is similar except that the query
continues to the deepest children in the aggregate hierarchy (the
leaves of the tree). Sometimes you will want an aggregate to be
treated as a leaf in this search, like a button aggregate in an
aggregate of buttons. In this case, you should set the
@cindex{pretend-to-be-leaf} @code{:pretend-to-be-leaf} slot of each
aggregate that should be treated like a leaf. The search will not
proceed through the components of such an aggregate, but will return
the aggregate itself.

@code{Obj-in-rectangle} tells whether the bounding box of @emph{object}
intersects the rectangle bounded by @emph{top}, @emph{left}, @emph{width} and
@emph{height}. If @emph{intersect} is non-@code{nil} (the default) 
then @emph{object} need only intersect the rectangle, whereas if
@emph{intersect} is @code{nil} then @emph{object} must lie completely inside the
rectangle. If @emph{type} is not @code{t} (the default) then @emph{object} must be
of type @emph{type}. 

@section Virtual-Aggregates
@node Virtual-Aggregates
@cindex{virtual-aggregates}

@emph{Virtual-aggregates} are used when you are going to create a very large
number of objects (e.g., 300 to 50,000) all of which are fairly similar.
For example, they are useful for points in a scatter plot, squares in
a "fat-bits" bitmap editor, line segments in a map, etc. The virtual
aggregate @emph{pretends} to provide an object for each element, but actually
doesn't. This can save an enormous amount of memory and time, while
still providing an interface consistent with the rest of Garnet.

The primary restriction is that there cannot be references or
constraints from external objects @emph{to} or @emph{from} any of the
elements of the virtual-aggregate. Typically, all the constraints
will be internal to each object displayed, and all the properties will
be determined by the values in the @code{:items} array.

The interface is similar to @emph{aggrelists}. The programmer provides an
item-prototype, used for all the elements, and an (optional) items
list to form the initial value. To be more efficient, the items list
is actually an array for virtual-aggregates. The item-prototype can
be an arbitrary object or aggregadget structure, and can use whatever
formulas are desired to calculate the appropriate display based on the
corresponding value of the items list and the object's rank in the
item's list.

We have implemented two styles of virtual-aggregates, with
a third style in planning.
The first style is for arbitrary overlapping objects, and is described
below. The second style is for non-overlapping 2-D arrays of objects,
such as bitmap-editor tiles. 

The third style is like the first, for arbitrary overlapping objects.
However, unlike the first style, it would use more sophisticated
techniques for computing the overlapping of objects, rather than using
linear search like the first style. For example, it might use
quad trees or whatever.

So far, we have implemented the first and second style only. Examples
of using these virtual-aggregates are in demo-circle for the first
style and demo-array for the second.

@subsection Virtual-Aggregates Slots
@node Virtual-Aggregates Slots

A virtual-aggregate is a graphical object, with its own @code{:draw},
@code{:point-to-component}, @code{:add-item}, and @code{:remove-item} methods.
It is defined as:
@smallexample
(create-instance 'opal:virtual-aggregate opal:graphical-object
    ...
   (:item-prototype ...)  @emph{;; you must provide this}
   (:point-in-item ...)   @emph{;; you must provide this}
   (:item-array ...)      @emph{;; you may provide this}
   (:dummy-item ...)
   )
@end smallexample

For example, in demo-circle the virtual-aggregate is:

@smallexample
    (create-instance nil opal:virtual-aggregate
       (:item-prototype my-circle)
       (:point-in-item #'my-point-in-circle))
@end smallexample

Here are the slots you must provide for a virtual-aggregate.

@b{:ITEM-PROTOTYPE}@*
In the :item-prototype slot, you put the Garnet object of your choice
(primitive object or aggregadget). You must, however, have formulas
in your :item-prototype object that depend on its
@code{:item-values} and/or @code{:rank} slot. The @code{:rank} is set with
the object's rank in the @code{:items} array. The @code{:item-values} is
set with the appropriate data from the @code{:item-array}. For instance, in
demo-circle, the item-prototype is:

@smallexample
(create-instance 'MY-CIRCLE opal:circle
   (:filling-style (o-formula (fourth (gvl :item-values))))
   (:radius (o-formula (third (gvl :item-values))))
   (:left (o-formula (- (first (gvl :item-values)) (gvl :radius))))
   (:top (o-formula (- (second (gvl :item-values)) (gvl :radius))))
   (:width (o-formula (* 2 (gvl :radius))))
   (:height (o-formula (gvl :width))))
@end smallexample

In this case the @code{:item-values} slot contains a list of four numbers:
the x and y coordinates of the center of the circle, the radius of the
circle, and an Opal color. 
For your item-prototype, the format for
the item-values data can be anything you like, and you don't have to
set the @code{:item-values} slot yourself: Opal will do that for you.

@sp 1
@b{:POINT-IN-ITEM}@*
This slot contains a function of the form
@smallexample
(lambda (virtual-aggregate item-values x y) ...)
@end smallexample
which returns @code{t} or @code{nil} depending on whether the point <x,y> lies within
an @code{:item-prototype} object with @code{:item-values} item-values.
Typically, you will be able to compute this function efficiently based
on your knowledge of the how the objects will look.
For instance, in demo-circle, the @code{:point-in-item} slots contains:

@smallexample
(lambda (virtual-aggregate item-values x y)
  (<= (+ (expt (- x (first item-values)) 2)
         (expt (- y (second item-values)) 2))
      (expt (third item-values) 2)))
@end smallexample

@b{:ITEM-ARRAY}@*
This is a slot you @emph{may}, but need not provide. If you don't provide
one, then all of the items will be added using the add-item function, below.
@code{:item-array} contains either a 1-dimensional array of item-values, ordered
from back to front on your display, or a 2-dimensional array. So for the
demo-circle example, it will look something like:
@smallexample
#((304 212 12 #k<RED-FILL>)
  (88 64 11 #k<GREEN-FILL>)
  ...)
@end smallexample
The array may have @code{nil}s in it. Each @code{nil} represents a gap in this items
list.

@subsection Two-dimensional virtual-aggregates
@node Two-dimensional virtual-aggregates
You can create a virtual-aggregate whose @code{:item-array} is a @emph{two}
dimensional array. The formulas in the @code{:dummy-item} of the aggregate
must depend on two slots @code{:rank1} and @code{:rank2} instead of the single
slot @code{:rank}. This is useful for non-overlapping tables, such as
bitmap editors (fat-bits), spreadsheets, etc. See the example in
demo-array.


@subsection Manipulating the Virtual-Aggregate
@node Manipulating the Virtual-Aggregate
These are the routines exported by Opal that you can use to manipulate
the item array:

@cindex{add-item}
@smallexample
opal:Add-Item @emph{a-virtual-aggregate  item-values}@ref{method}
@end smallexample

This adds a new item to the @code{:item-array} of @emph{a-virtual-aggregate}.
@emph{Item-values} is a list containing the values for an @code{:item-values} slot
of the item-prototype. @code{Add-item} returns the rank into the
@code{:item-array} where the new item was inserted. The
@code{:item-array} must be one-dimensional. 

@cindex{remove-item}
@smallexample
opal:Remove-Item @emph{a-virtual-aggregate  rank}@ref{method}
@end smallexample
  This removes an item from the @code{:item-array} of @emph{a-virtual-aggregate}.
Actually, it puts a @code{nil} in the @code{:item-array} (it does not compress the
array). The @code{:item-array} must be one-dimensional.

@cindex{change-item}
@smallexample
opal:Change-Item @emph{a-virtual-aggregate  new-item  rank} &optional @emph{rank2}@ref{method}
@end smallexample
This changes the @emph{rank}'th entry of the @code{:item-array} of the
virtual-aggregate to be @emph{new-item}. (It also marks that item to be
redrawn at the next update). To manipulate a two-dimensional array, use
@emph{rank} and @emph{rank2} as the two indices. Note: you have to use
this function and cannot directly modify the items array after the
virtual-aggregate has been displayed.

@cindex{point-to-rank}
@smallexample
opal:Point-To-Rank @emph{a-virtual-aggregate  x  y}@ref{method}
@end smallexample

Returns the rank of the front-most item in the virtual-aggregate
that contains point <x,y>. (This is why you had to supply @code{:point-in-item}.)
The virtual-aggregate must be one-dimensional.

@cindex{point-to-component}
@smallexample
opal:Point-To-Component @emph{a-virtual-aggregate  x  y}@ref{method}
@end smallexample
  This is like @code{point-to-rank}, but it returns an actual Opal object.
However, the object is actually a dummy object with the appropriate
value placed in its @code{:item-values} and @code{:rank} slots. So you cannot call
Point-to-component twice and hope to hold on the first value.
(The virtual-aggregate must be one-dimensional.)

@cindex{recalculate-virtual-aggregate-bboxes}
@smallexample
opal:Recalulate-Virtual-Aggregate-Bboxes @emph{a-virtual-aggregate}@ref{function}
@end smallexample
  The purpose of this routine is to re-initialize all the bounding
boxes of the items of the virtual-aggregate. This would come in
handy if, for instance, you created a virtual-aggregate whose items
depended for their position on the position of the virtual-aggregate
itself. After you changed the @code{:left} or @code{:top} of the
virtual-aggregate,
you would call @code{recalculate-virtual-aggregate-bboxes} to re-calculate
the bounding boxes of the items.


There is a macro for performing operations iteratively on
elements of a 2-dimensional virtual-aggregate:
@cindex{do-in-clip-rect}
@smallexample
opal:Do-In-Clip-Rect (@emph{var1  var2  a-virtual-aggregate  clip-rect}) &body @emph{body}@ref{macro}
@end smallexample
The variables @emph{var1} and @emph{var2} take on all values for which the item with
@code{:rank1} = @emph{var1} and @code{:rank2} = @emph{var2} intersect the
clip-rectangle @emph{clip-rect}.
The @emph{clip-rect} is a list of left, top, width, and height -- the kind of
argument that is returned from a two-point-interactor.

As an example, consider the following code borrowed from demo-array:
@smallexample
(defun Whiten-Rectangle (dum clip-rect)
  (declare (ignore dum))
  (do-in-clip-rect (index-1 index-2 the-array clip-rect)
    (change-item the-array 1 index-1 index-2)))

(create-instance 'WHITER inter:two-point-interactor
   (:start-event :leftdown)
   (:continuous T)
   (:start-where `(:in ,The-Array))
   (:window w)
   (:feedback-obj FEED-RECT)
   (:final-function #'Whiten-Rectangle))
@end smallexample
The-array is a 2-dimensional virtual-aggregate. The routine
@code{Whiten-Rectangle}
performs @code{opal:change-item} on every element of the-array that is
inside the clip-rect (the second argument to the @code{:final-function} of
a two-point interactor is always a rectangle).



This is a macro for performing operations iteratively on
elements of a 2-dimensional virtual-aggregate. The variables @emph{var1} and
@emph{var2} take on all values for which the item with @code{:rank1} = @emph{var1} and
@code{:rank2} = @emph{var2} intersect the clip-rectangle clip-rect. The clip-rect
is a list of left, top, width, and height -- the kind of argument
that is returned from a two-point-interactor.

@section Windows
@node Windows

@anchor{windows}
@cindex{window} 

Graphical objects can only display themselves in a @emph{window}. 

@smallexample
(create-instance 'inter:Interactor-Window opal::window
  (:maybe-constant '(:left :top :width :height :visible))
  (:left 0)
  (:top 0)
  (:width 355)
  (:height 277)
  (:border-width 2)
  (:left-border-width ...) (:top-border-width ...)     @emph{;; Read-only slots -- Do not set!}
  (:right-border-width ...) (:bottom-border-width ...) @emph{;; See section @ref{border-widths}.}
  (:max-width nil) (:max-height nil)
  (:min-width nil) (:min-height nil)
  (:cursor opal:Arrow-Pair)    @emph{;; Shape of the pointer in this window. (See section @ref{window-cursors}).}
  (:position-by-hand nil)
  (:title "Opal @emph{N}")
  (:omit-title-bar-p nil)
  (:icon-title "Opal @emph{N}")
  (:icon-bitmap nil)
  (:draw-on-children nil)
  (:background-color nil)
  (:double-buffered-p nil)
  (:save-under nil)
  (:aggregate nil)
  (:parent nil)
  (:visible ...)
  (:modal-p nil)               @emph{;; Whether to suspend input while visible. See the Interactors chapter.}
  (:in-progress nil)           @emph{;; Read by }opal:update-all@emph{. See section @ref{quarantine-slot}.}
  ...)
@end smallexample

@b{Caveats:}
@itemize
Garnet windows will not appear on the screen until they are
updated, by calling the functions @code{opal:update} or @code{opal:update-all}.
These functions will also cause all of the graphics in the window to be
brought up-to-date.

Windows are not usually used as prototypes for other windows. If a window
is created with its @code{:visible} slot set to T, then it should be expected
to appear on the screen (even if @code{opal:update} is not explicitly called
on it). When similar windows need to be generated, it is recommended that
a function be written (like at the end of the Tutorial) that will return
the window instances.
@end itemize


@cindex{top}
@cindex{left}
@cindex{width}
@cindex{height}
The @code{:left}, @code{:top}, @code{:width}, and @code{:height} slots of the
window control its position and dimensions.
These slots can be set using @code{s-value} to change the window's
size and position (which will take affect after the next @code{update} call).
If the user changes the size or position of a window using the window manager
(e.g., using the mouse), this will @emph{usually} be reflected in the values
for these slots.@footnote{There are bugs in some window managers that make
this difficult or impossible.}  Some special issues involving the position and
dimensions of Garnet windows when adorned with window manager title bars are
discussed in section @ref{border-widths}.

@cindex{min-width}
@cindex{max-width}
@cindex{min-height}
@cindex{max-height}
If you create a window with values in its @code{:max-width}, @code{:max-height},
@code{:min-width}, and @code{:min-height}, then the window manager will make sure
the user doesn't change the
window's size to be outside of those ranges. However, you can
still @code{s-value} the @code{:width} and @code{:height} of @code{win} to be
any value. The slots @code{:max-width} and @code{:max-height} can only be
set at creation time. Furthermore, due to peculiarities in X windows, you
must set @emph{both} @code{:max-width} and @code{:max-height} 
to be non-@code{nil} at creation time to have any effect.
The slots @code{:min-width} and @code{:min-height} behave in the analogous
manner. 

@cindex{title}
The @code{:title} slot contains a string specifying the title of the Garnet
window. The default title is "Opal @emph{N}", where @emph{N} starts at 1, and
increments each time a new window is created in that Lisp.

@cindex{omit-title-bar-p}
The @code{:omit-title-bar-p} slot tells whether or not the Garnet window should
have a title bar. If the slot has value @code{nil} (the default), and the window
manager permits it, then the window will have a title bar; otherwise the
window will not have a title bar.

@cindex{icon-title}
The @code{:icon-title} slot contains a string specifying the icon title
of the window. The default icon title is the same as the
@code{:title.}  This is the string that gets displayed when a window is
iconified. 

@cindex{icon-bitmap}
You may set the icon of a window to be an arbitrary bitmap by setting
its @code{:icon-bitmap} slot. The value should be a filename which
specifies the location of a bitmap file.

@cindex{draw-on-children}
In the rare case when you want to have graphics drawn on a parent
window appear over the enclosed (child) windows, you can set the
@code{:draw-on-children} of the parent to be non-@code{nil}.
Then any objects that belong to that window will appear on top of
the window's subwindows (rather than being hidden by the subwindows).
Note:  Because of the inability to redraw the graphics in the window and the
subwindows simultaneously, objects that will appear over the subwindows must
be fast-redraw objects drawn with @code{:xor}
(see section @ref{fast-redraw-objects}).

@cindex{background-color}
The @code{:background-color} slot of an @code{inter:interactor-window} can be set
to be any @code{opal:color}. The window will then appear with that as its
background color. This is more efficient than putting a rectangle
behind all the objects.

@cindex{double-buffered-p}
When the @code{:double-buffered-p} slot is T, then an exact copy of the window
will be maintained internally by Garnet. Then, when the graphics in the window
change, the change occurs first in the copy, and then the changed region is
transferred as a pixmap to the original window. This has the potential to
reduce flicker in the redrawing of the window. By default, windows do not use
this feature because of the extra memory required by the internal buffer.

@cindex{save-under}
When the @code{:save-under} slot is T, then Garnet internally stores the
contents of the screen under the window. If the window is made invisible,
then Garnet does not have to redraw any Garnet windows under it, because the
image can simply be redrawn from the saved contents. This option is used in
the @code{menubar} and @code{option-button} gadgets.

@cindex{aggregate}
The @code{:aggregate} slot specifies an aggregate object to hold all the
objects to be displayed in the
window. Each window must contain exactly one aggregate in this slot, and
all objects in the window should be put into this aggregate. This
slot should be set after the window is created, not during the
@code{create-instance} call. This will ensure that the proper demons
are running when the slot is set.
@b{Performance hint: specify the top, left, width and height of this
aggregate to be formulas depending on the window, rather than using the
default formulas, which depend on all of the objects in the aggregate}.

@cindex{visible}
The @code{:visible} slot specifies if the window is currently visible on the
screen or not. In X terminology, this
determines if the window is mapped or not. You can set the @code{:visible}
slot at any time to change the visibility (which will take effect after an
@code{update} call).

@cindex{position-by-hand}
If you create a window and set the @code{:position-by-hand} slot to be
T, then when you call @code{opal:update} the first time, the cursor on your
screen will change to a
prompt asking you where to position the window, and the initial values of
@code{:left} and @code{:top} will be ignored.

@cindex{parent}
If a window is created with a window object in its @code{:parent} slot, then
the new window will be a sub-window of the parent window.
Each window sets up its own coordinate system, so the @code{:left} and
@code{:top} of the subwindow will be with respect to the parent window.
@b{The parent window must be updated before the subwindow is created.}
Using @code{nil} for the @code{:parent} makes the window be at the top level. Only
top-level windows can be manipulated by the window manager (i.e, by using
the mouse).



@subsection Window Positioning
@node Window Positioning

When top-level windows first become visible, their @code{:left} and @code{:top}
slots may change values slightly to accomodate the title bars added by the
window manager. When you create a
regular top-level window with a @code{:top} of 100, for example, the inside
edge of the window will appear at 100. The window manager frame of
the window (the outside edge) will appear a little higher, depending on
the window manager, but somewhere around 25 pixels higher.
The window manager then notifies Garnet that this frame has been added by
changing the @code{:top} of the window to 75. The drawable region of the window
remains at 100.

When the @code{:top} of the window is changed (via @code{s-value}) after it is
visible, then it is the outside edge of the window that is being changed,
which is the top of the frame.
You can always determine the height of the window's title bar in the
@code{:top-border-width} slot (see section @ref{border-widths}).
There are corresponding slots for @code{:left-}, @code{:right-}, and
@code{:bottom-border-width}. All of these slots are read-only,
and are set by Garnet according to your window manager.

When stacking windows in a cascading arrangement, it is
sufficient to be consistent in setting their positions either before or
after updating them. If the two kinds of position-setting strategies need to
be mixed, then the @code{:top-border-width} of the windows that have already
been made visible should be taken into account, versus those that have
never been updated.


@subsection Border Widths
@node Border Widths
@anchor{border-widths}

There are two different meanings of "border widths" in windows. One involves
the user-settable thickness of subwindows, and the other kind involves
@emph{read-only} widths that are determined by the window manager:

@itemize
@cindex{border-width}
@b{Subwindow Border Width} - The @code{:border-width} slot affects the width
of the border on a subwindow.
Setting the @code{:border-width} slot of a subwindow to 0 during its
@code{create-instance} call will cause the window to have no border at all,
but setting it to a value larger than the default usually has no effect.
Currently, the border width cannot be changed after the window is created.

@cindex{left-border-width}
@cindex{right-border-width}
@cindex{top-border-width}
@cindex{bottom-border-width}
@b{Window Manager Frame Widths} - After a window has been created, the
@code{:left-border-width}, @code{:right-border-width},
@code{:top-border-width}, and
@code{:bottom-border-width} slots tell what thicknesses the left, right, top,
and bottom borders of the windows actually have. These slots are set
by the window manager, and should @b{not} be set by Garnet users.
@end itemize


@subsection Window Cursors
@node Window Cursors
@anchor{window-cursors}
@cindex{cursor (pointer)}
@cindex{pointer}

The default cursor shape for Garnet windows is an arrow pointing to the
upper left. However, it would be nice to change this shape sometimes,
particularly when an application is performing a long computation and you
would like to display an hourglass cursor. Several functions and objects
make it easy to change the cursors of Garnet windows.

The following sections discuss how to change window cursors, starting with
some background at the lowest level of the cursor interface. The later
sections, particularly @ref{with-hourglass-sec}, describe the high-level
functions that allow you to change the cursor with a single function call.


@node The @code{:cursor} Slot
@subsubsection The @code{:cursor} Slot
@anchor{the-cursor-slot}
@cindex{cursor slot syntax}

At the lowest level, the cursor of a Garnet window is governed by the value
of its @code{:cursor} slot. The default value for an
@code{inter:interactor-window}'s @code{:cursor} slot is a list of two objects,
@code{(#k<OPAL:ARROW-CURSOR> . #k<OPAL:ARROW-CURSOR-MASK>)}, which are
pre-defined bitmaps whose images are read from the @code{garnet/lib/bitmaps/}
directory. The @code{opal:arrow-cursor} object is the black part of the
pointer, and the @code{opal:arrow-cursor-mask} is the underlying white part.
@footnote{Whenever you change the cursor of a window, it is a good idea to have a
contrasting mask beneath the primary image. This will keep the cursor
visible even when it is over an object of the same color.}

@sp 1
The @code{:cursor} slot permits three different syntaxes which all describe
a cursor/mask pair for the window. The most basic syntax is used for the
default value:

@code{(list @var{bitmap-1} @var{bitmap-2})}

The second syntax allows you to use a font as the source for your cursor,
with the primary image and mask specified by indices into the font:

@code{(list @var{my-font}  @var{index-1}  @var{index-2})}

Most machines come with a font specifically for the window manager cursors,
and this font can be accessed with the @code{opal:cursor-font} object.
So you could try the syntax above with the @code{opal:cursor-font} object
and two consecutive indices, like this:

@code{(s-value @var{win} :cursor (list @var{opal:cursor-font} @var{50} @var{51}))}

You have to update the window to make the cursor change take effect.
It appears that sequential pairs, like 50 and 51,
reliably yield primary cursors and their masks.
It is easy to experiment to find a nice cursor.

Since so many cursors are created from the cursor font, a third syntax is
provided that is analogous to the previous one:

@defop {Slot Syntax} :cursor index-1 index-2

Any of these three syntaxes can be used to @code{s-value} the @code{:cursor}
slot of a window. Changing the @code{:cursor} slot of a window changes
it permanently, until you @code{s-value} the @code{:cursor} slot again.
@end defop

@node Garnet Cursor Objects
@subsubsection Garnet Cursor Objects
@cindex{arrow-cursor}
@cindex{hourglass-cursor}

@smallexample
(create-instance 'opal:ARROW-CURSOR opal:bitmap
  (:image (opal:Get-Garnet-Bitmap "garnet.cursor")))

(create-instance 'opal:ARROW-CURSOR-MASK opal:bitmap
  (:image (opal:Get-Garnet-Bitmap "garnet.mask")))

(defparameter opal:Arrow-Pair
              (cons opal:ARROW-CURSOR opal:ARROW-CURSOR-MASK))



(create-instance 'opal:HOURGLASS-CURSOR opal:bitmap
  (:image (opal:Get-Garnet-Bitmap "hourglass.cursor")))

(create-instance 'opal:HOURGLASS-CURSOR-MASK opal:bitmap
  (:image (opal:Get-Garnet-Bitmap "hourglass.mask")))

(defparameter opal:HourGlass-Pair
              (cons opal:HOURGLASS-CURSOR opal:HOURGLASS-CURSOR-MASK))
@end smallexample
@sp 1

The arrow-cursors are used for the default value of the @code{:cursor} slot
in Garnet windows. The Gilt interface builder and the @code{save-gadget} use
the hourglass-cursors when they are busy with file I/O and performing long
calculations. Users are free to use these objects in their own applications.

The variables @code{opal:Arrow-Pair} and @code{opal:HourGlass-Pair} are provided
so that users can avoid
cons'ing up the same list repeatedly. Setting the @code{:cursor} slot of
a window to be @code{opal:HourGlass-Pair} and then updating the window
will change the cursor in the window.

@node Temporarily Changing the Cursor
@subsubsection Temporarily Changing the Cursor
@anchor{with-hourglass-sec}

Often when the cursor needs to be changed, we will be changing it back to
the default very soon (e.g., when the application has finished its
computation).
Also, usually we want to change all of the windows in an application, rather
than just one window. For this situation, the functions
@code{opal:change-cursors} and
@code{opal:restore-cursors} were written to change the cursors of multiple
windows @b{without} changing the @code{:cursor} slots.

@cindex{change-cursors}
@defun opal:change-cursors cursor-list &optional window-list

The @emph{cursor-list} argument is a pair or triplet that adheres to the syntax
for the @code{:cursor} slot, discussed in the previous section. When
@emph{window-list} is supplied, the cursor of each window is temporarily set
with a cursor constructed out of the
@emph{cursor-list} spec. When @emph{window-list} is @code{nil} (the default), then @b{all}
Garnet windows are set with the temporary cursor. The value of the
@code{:cursor} slot of
each window remains unchanged, allowing the window's normal cursor to be
restored with @code{opal:restore-cursors}.

@end defun

@cindex{restore-cursors}
@defun opal:restore-cursors &optional window-list

This function undoes the work of @code{opal:change-cursors}. Each window is set
with the cursor described by the value of its @code{:cursor} slot (which was
not changed by @code{opal:change-cursors}).


Even the work of calling @code{opal:change-cursors} and @code{opal:restore-cursors}
can be abbreviated, by using the following macros instead:

@end defun

@cindex{with-cursor}
@cindex{with-hourglass-cursor}
@defmac opal:with-cursor cursor &body body
@defmacx opal:with-hourglass-cursor &body body

The @emph{cursor} parameter must be a pair or triplet adhering to the @code{:cursor}
syntax. These macros change the cursor of all Garnet windows while executing
the @emph{body}, and then restore the old cursors. These are the highest level
functions for changing window cursors.
To test the @code{opal:with-hourglass-cursor} macro, bring up any Garnet window
(demos are fine) and execute the following instruction:

@code{(opal:with-hourglass-cursor (sleep 5))}

While lisp is sleeping, the cursors of all the Garnet windows will change
to hourglass cursors, and then they will change back to normal.

@end defmac

@subsection Update Quarantine Slot
@node Update Quarantine Slot
@anchor{quarantine-slot}
@cindex{quarantine slot}
@cindex{in-progress}

A "quarantine slot" named @code{:in-progress} exists in all Garnet windows.
If there was a crash during the last update of the window, then the window
will stop being updated automatically along with the other Garnet windows,
until you can fix the problem and update the window successfully.

Usually when there is an update failure, it is while the main-event-loop
process is running and it is repeatedly calling @code{opal:update-all}.
Without a quarantine slot, these repeated updates
would keep throwing Garnet into the debugger, even as you tried to figure
out what the problem was with the offending window. With the quarantine slot,
@code{opal:update-all} first checks to see if the @code{:in-progress} slot of
the next window is T. If so, then the last update to that window must not
have terminated successfully, and the window is skipped. After you fix
the problem in the window, a successful call to @code{opal:update} will clear
the slot, and it will resume being updated automatically.

Here is an example of a typical interaction involving the quarantine slot.

@enumerate
Execute @code{(garnet-load "demos:demo-multiwin")} and
 @code{(demo-multiwin:do-go)}.

Artificially create an error situation by executing
@smallexample
(kr:with-types-disabled
 (kr:s-value demo-multiwin::OBJ1 :left 'x))
@end smallexample

Try to move an object in the demo by clicking on it and dragging with the
mouse. Even if you did not click on OBJ1 (the rectangle), the main-event-loop
called @code{opal:update-all}, which caused OBJ1's window to update. This
caused a crash into the debugger when @code{'x} was found in the @code{:left}
slot. Get out of the debugger with @code{:reset} or @code{q} or whatever your
lisp requires.

Now move objects again. As long as your first mouse click is not in the same
window as OBJ1, you will not get the crash again. You can even drag
objects into and through OBJ1's window, but that window will not be
updated.

After you give OBJ1's @code{:left} slot a reasonable value and do a @b{total}
update on its window -- @code{(opal:update demo-multiwin::WIN1 T)} -- the window
will be treated normally again. Note: the total update is sometimes required
because the bad @code{:left} value can get stored in an internal Opal data
structure. A total update clears these data structures.
@end enumerate

We have found that this feature makes it much easier to find the source
of a problem in a window that cannot update successfully. Without this
feature, useful tools like the @code{Inspector} would not be able to run
while there was one broken window, since interacting with the @code{Inspector}
requires repeated calls to @code{opal:update-all}.



@subsection Windows on other Displays
@node Windows on other Displays
@cindex{windows on other displays}
@cindex{machines}
@cindex{displays}

An important feature of the X window manager is that it allows you to run a
process on one machine and have its window appear on another machine. Opal
provides a simple way to do this, although many commands have to be given
to the Unix Shell.

Let's suppose that you want to run Opal on a machine named 
@code{OpalMachine.cs.edu} and you want the windows to appear on a machine
named @code{WindowMachine.cs.edu} (of course you will substitute your own
full machine names). Assuming you are sitting at
@code{WindowMachine.cs.edu}, perform the following steps before starting Garnet:

@itemize
Create an extra Xterm (shell) window and use it to telnet to
@code{OpalMachine.cs.edu} and then log in.

@redtext{TODO: Slime makes this approach inconvenient, as you have to
change the way that emacs launches Slime to set the environment
variable before you start lisp. An easy approach is to use uiop, the
cross platform utility functions provided by ASDF. If you had a second
display running on local machine you could specify it using the
following command:

@smallexample
(setf (uiop:getenv "DISPLAY") ":1")
@end smallexample

Then launch Garnet as usual. Unfortunately this is propably not 100%
reliable accross platforms. Idealy the display that you want to
connect to would be part of an initialization parameter you could pass.}


Type the following to @code{OpalMachine.cs.edu} to tell Opal where the
windows should go:
@smallexample
setenv DISPLAY WindowMachine.cs.edu:0.0
@end smallexample


Now go to another Xterm (shell) window on @code{WindowMachine.cs.edu}
and type the following to allow @code{OpalMachine.cs.edu} to talk to X:
@smallexample
xhost + OpalMachine.cs.edu
@end smallexample

Now go back to the telnet window, and start Lisp and load Garnet and any
programs. All windows will now appear on @code{WindowMachine.cs.edu}.
@end itemize

@cindex{*screen-width*}
@cindex{*screen-height*}
The exported variables @code{opal:*screen-width*} and @code{opal:*screen-height*}
contain the width and height of the screen of the machine you are using. Do
not set these variables yourself.

@node Methods and Functions on Window Objects
@subsection Methods and Functions on Window Objects
@anchor{windowfuncs}

There are a number of functions that work on window objects, in addition to
the methods described in this section. All of the extended accessor
functions (@code{bottom}, @code{left-side}, @code{set-center}, etc.) described in
section @ref{Extended-accessors} also work on windows.

@cindex{update}


@defmethod {Window} opal:update window &optional total-p


The @code{update} method updates the image in @var{window} to reflect
changes to the objects contained inside its aggregate. If @var{total-p} is a
non-@code{nil} value, then the window is erased, and all the components of the
window's aggregate are redrawn. This is useful for when the window is
exposed or when something is messed up in the window (e.g., after a bug).
The default for @var{total-p} is @code{nil}, so the window only redraws the
changed portions. @code{update} must be called on a newly-created window
before it will be visible. Updating a window also causes its subwindows to
be updated.

@cindex{fix-up-window}
If @code{update} crashes into the debugger, this is usually because there is
an object with an illegal value attached to the window. In this case, the
debugging function @code{garnet-debug:fix-up-window} is very useful; see
the Debugging chapter.

@end defmethod

@cindex{destroy}

@defmethod {Window} opal:destroy window


The @code{destroy} method unmaps and destroys the X
window, destroys the @emph{window} object, and calls destroy on the
window's aggregate and the window's subwindows.

@end defmethod

@cindex{update-all}

@defun opal:update-all &optional total-p

been created but never @code{update}d (so they are not yet visible).
When @emph{total-p} is T, then @code{opal:update-all} will redraw the entire
contents of all existing Garnet windows. Since this procedure is expensive,
it should only be used in special situations, like during debugging.

@end defun

@cindex{clean-up}

@defun opal:clean-up how-to


This function is useful when debugging for deleting the windows created using
Opal. It can delete windows in various ways:

@cindex{orphans-only}
@cindex{clx}

@multitable @columnfractions .3 .7
@headitem @code{how-to} @tab Result])

@item @code{:orphans-only}
Destroy all orphaned garnet windows. Orphans are
described below.

@item @code{:opal}
Destroy all garnet windows by calling @code{xlib:destroy-window}
or @code{ccl:window-close} on orphaned CLX "drawables" and
Mac "views", and @code{opal:destroy} on non-orphaned windows.

@item @code{:opal-set-agg-to-nil}
Same as above, but before calling @code{opal:destroy},
set the aggregate to @code{nil} so it won't get destroyed as well.

@item @code{:clx}
Destroy all Garnet windows by calling @code{xlib:destroy-window}
or @code{ccl:window-close}. Does not call the @code{:destroy} method on
the window or its aggregate.

@end multitable

@end defun

A window is "orphaned" when the Opal name is no longer attached to the
CLX drawable or Mac view.
This can happen, for example, if you create an instance of a window
object, update it, then create another instance of a window with the same
name, and update it as well. Then the first window will not be
erased and will be orphaned.

@cindex{fix-up-window}
The default is @code{orphans-only}. Another useful value is @code{:opal}. The
other options are mainly useful when attempts to use these fail due to
bugs. See also the function @code{Fix-Up-Window} in the Garnet Debugging
chapter @cite{Garnetdebugchapter}.

@cindex{convert-coordinates}

@defun opal:convert-coordinates win1 x1 y1 &optional win2 @
  (declare (values @emph{x2 y2}))

This function converts the coordinates @code{x1} and @code{y1} which are in
window @code{win1}'s
coordinate system to be in @code{win2}'s. Either window can be @code{nil}, in which
case the screen is used.

@end defun

@cindex{cut buffer}

@defun opal:get-x-cut-buffer window
@defunx opal:set-x-cut-buffer window newstring

These manipulate the window manager's cut buffer. @code{get-x-cut-buffer}
returns the string that is in the X cut buffer, and @code{set-x-cut-buffer}
sets the string in the X cut buffer.

@end defun


@defun opal:raise-window window
@defunx opal:lower-window  window
@defunx opal:iconify-window window
@defunx opal:deiconify-window window

@code{Raise-window} moves a window to the front of the screen, so that
it is not covered by any other window. @code{Lower-window} moves a
window to the back of the screen. @code{Iconify-window} changes the
window into an icon, and @code{deiconify-window} changes it back to a window.

@end defun

@section Printing Garnet Windows
@node Printing Garnet Windows
@anchor{printing}
@cindex{make-ps-file}
@cindex{PostScript}
@cindex{printing}

The function @code{make-ps-file} is used to generate a PostScript file for
Garnet windows. This file can then be sent directly to any PostScript
printer. The file is in "Encapsulated PostScript"
format, so that it can also be included in other documents, such as Scribe,
LaTeX and FrameMaker on Unix, and Pagemaker on Macintoshes.

The PostScript files generated by this function will produce pictures that
are prettier, have much smaller file sizes, and work better in color than
those produced by the window utilities like @code{xwd} and @code{xpr}. However,
a limitation of PostScript is that it is not possible to print with XOR.
It is usually possible to change the implementation of Garnet objects or
hand-edit the generated PostScript file to simulate the XOR draw function.

By default, the contents of the window and all subwindows are
reproduced exactly as on the screen, with the image scaled and
centered on the output page. Other options (see the @code{clip-p}
parameter) allow this function to be
used to output the entire contents of a window (not just what is on
the screen), so it can be used to do the printing for application data
that might be in a scrolling-window, for example. This is used in the
demo @code{demo-arith}.

@sp 1

@defun opal:make-ps-file window-or-window-list  filename @
       &key position-x  position-y  left-margin  right-margin  top-margin  bottom-margin  left  top @
       scale-x  scale-y  landscape-p  borders-p  clip-p  subwindows-p  color-p  background-color @
       paper-size  title  creator  for  comment

The only two required parameters to @code{make-ps-file} are the Garnet window
to be printed and the name of the file in which to store the PostScript
output. The @emph{window-or-window-list} parameter may be either a single window
or a list of
windows. When multiple windows are printed, the space between the windows is
filled with the color specified by @emph{background-color}.

The optional arguments affect the position and appearance of the
picture:

@vtable @code

@item @emph{position-x}
Either @code{:left}, @code{:center}, or @code{:right}.
Determines the position of the picture on the page horizontally.
Ignored if a value is supplied for @emph{left}. Default is @code{:center}.

@item @emph{position-y}
Either @code{:top}, @code{:center}, or @code{:bottom}.
Determines the position of the picture on the page vertically.
Ignored if a value is supplied for @emph{top}. Default is @code{:center}.

@item @emph{left-margin, right-margin, top-margin, bottom-margin}
These parameters specify the minimum distance (in points) from the
corresponding edge of the page to the rendered image. All four values
default to 72, which is one inch in PostScript.

@item @emph{left, top}
The distance (in points) from the left and top margins
(offsets from @emph{left-margin} and @emph{top-margin}) to
the rendered image. The defaults are @code{nil}, in which
case the values of @emph{position-x} and @emph{position-y} are used instead.

@item @emph{scale-x, scale-y}
Horizontal and vertical scaling for the image. The
default is @code{nil}, which will ensure that the image fits within the specified
margins (the scaling will be the same for vertical and horizontal).

@item @emph{landscape-p}
If @code{nil} (the default) then the top of the picture will be
parallel to the short side of the page (portrait).
If T, then the picture will be rotated 90 degrees, with the top of the picture
parallel to the long side of the page.

@item @emph{subwindows-p}
Whether to include the subwindows of the specified window
in the image. Default is T.

@item @emph{borders-p}
Whether to draw the outline of the window (and subwindows,
if any). The allowed values are @code{t}, @code{nil},
@code{:generic}, and @code{:motif}. The default value of @code{:motif} gives your
image a simulated Motif window manager frame, like the picutres in the Gilt
Reference chapter. The value of @code{:generic} puts a plain black frame around
your printed image, with the title of the window centered in the title bar.
The value @code{t} gives the image a thin black border, and @code{nil} yields no
border at all.

@item @emph{clip-p}
How to clip the objects in the window. Allowed values are:

@itemize
@item @code{t}
This is the default, which means that the printed picture will look
like the screen image. If the graphics inside the window extend outside the
borders of the window, then they will be clipped in the printed image.

@item @code{nil}
This value causes the window in the printed image to be the same
size as the top-level aggregate, whether it is larger or smaller than the
actual window. That is, if the window is too small to show all of the objects
in its aggregate, then the printed window will be enlarged to show all of the
objects. Conversely, if the top-level aggregate is smaller than the dimensions
of the window on the screen, then the printed window will be "shrink wrapped"
around the objects.

@item @code{(@emph{left top width height})}
A list of screen-relative coordinates that
describe absolute pixel positions for the printed window. This makes it
possible to clip to a region when you are printing @emph{multiple} windows.
Clip regions can be used to make multiple-page PostScript
files -- you have to chapterly divide the image into its component regions,
and generate one PostScript file for each region. In the future, we may
attempt to automate the process of multiple-page printing.
@end itemize

@item @emph{color-p}
Whether to generate a file that will print out the real colors
of the window's objects (T), or pretend that all the colors are
black (@c[nil]). Default is T. (Many PostScript printers will
automatically produce half-tones for colors, so usually T will work
even for color pictures printed on black and white printers.)  @b{Note:}
@cindex{pixmap}
@cindex{colorimage}
Pixmaps print in full color when they are being displayed on a color
screen and the @emph{color-p} parameter is T. However, older
printers may not know the PostScript command @code{colorimage} which is
required to render a color pixmap. This command is only defined on Level 2
printers. If your printer cannot print your pixmap (it crashes with a
"colorimage undefined" error), then try using a @emph{color-p} argument of
@code{nil}.

@item @emph{background-color}
When @emph{window-or-window-list} is a list of windows,
the space between the windows will be filled with this color. The value of
this parameter may be any Opal color. The default is @code{opal:white}.

@item @emph{paper-size}
This parameter is provided mainly for users in the
United Kingdom. Allowed values are @code{:letter}, @code{:a4}, or a list
of (@emph{width height}). The default value of @code{:letter} generates a
PostScript image for 612x792 point size paper. The @code{:a4} value generates
an image for 594x842 point size paper, which is commonly used in the UK.

@item @emph{title, creator, for}
These parameters should take strings to be printed
in the header comments of the PostScript file. These comments are sometimes
used to print user information on the header sheets of printer output.
The default @emph{title} is based on the window's title. The default @emph{creator}
is Garnet, and the default @emph{for} is "".


allows you to put a single line of text at the top of your PostScript file.
In the generated file, the characters @code{"%%"} are concatenated to the front
of your comment, telling PostScript to ignore the text in the line. If you
wish to use multiple lines in the comment, you will have to add the @code{"%%"}
to the second line of the string and every line thereafter.


@end vtable

@end defun

@section Saving and Restoring
@node Saving and Restoring
@cindex{lisp image}
@cindex{core image}
@cindex{saving lisp images}
Opal includes the ability to save and restore Garnet core images.
The function @code{opal:make-image}, described below, can be used to automate
the process of closing the connection to the display server and generating
a core file. Low-level details are provided below also, in case you need
more control over the saving process.


@subsection Saving Lisp Images
@node Saving Lisp Images
@cindex{make-image}

@sp 1
@defun opal:make-image filename &key quit (verbose t) (gc t) &rest other-args

The function @code{opal:make-image} is used to save an image of your current
lisp session. Without @code{make-image}, you would have to call
@code{opal:disconnect-garnet}, use your implementation-dependent function
to save your lisp image, and then call @code{opal:reconnect-garnet} if you
wanted to continue the session. @code{Opal:make-image} does all of this for
you, and also does a total garbage collection before the save if the @emph{gc}
parameter is T. If the @emph{quit} parameter is T, then your lisp image will
automatically exit after saving itself. The @emph{verbose} parameter controls
whether the function should announce when it is in the stages of garbage
collection, disconnection, saving, and reconnection.

The @emph{other-args} parameter is supplied to accomodate the miscellaneous
parameters of each lisp vendor's image-saving function. For example, with
Allegro's @code{dumplisp} command, you can supply the keywords @code{:libfile}
and @code{:flush-source-info?}. Since @code{opal:make-image} calls @code{dumplisp}
for Allegro, you can supply the extra parameters to @code{opal:make-image} and
they will be passed on to @code{dumplisp}. Therefore, it is not necessary to
call your lisp's image-saving function chapterly; you can always pass the
additional desired parameters to @code{opal:make-image}.

When you restart the saved image, it will print a banner indicating the time
at which the image was saved, and will automatically call
@code{opal:reconnect-garnet}. Some lisps (like Allegro) allow you to restart
the saved image just by executing the binary file, while others (like CMUCL)
require that the binary file is passed as an argument when the standard lisp
image is executed. Consult your lisp's reference chapter for instructions on
restarting your saved image.

@end defun

@subsection Saving Lisp Images Manually in X11
@node Saving Lisp Images Manually in X11

It recommended that you use @code{opal:make-image} whenever possible to save
images of lisp. In particular, restarted images of MCL containing Garnet that
were created by other means will probably not work right, due to the skipping
of initialization steps that would have been performed automatically if the
image had been saved with @code{opal:make-image}.

When you do not want to use the function @code{opal:make-image} to generate
an executable lisp image, and instead want to perform the saving procedure
chapterly, you can use the functions @code{opal:disconnect-garnet} and
@code{opal:reconnect-garnet}, along with your implementation-dependent
function for saving lisp images.

@smallexample
@cindex{disconnect-garnet}
opal:Disconnect-Garnet@ref{function}

opal:Reconnect-Garnet &optional @emph{display-name} @ref{function}
@end smallexample

Before saving a core image of Garnet, you must first close all connections
to the X server by calling @code{opal:disconnect-garnet}. All windows which are
currently visible will disappear (but will reappear when
@code{opal:reconnect-garnet} is executed).

While the connection to the X server is closed, you
may save a core image of Garnet by calling the appropriate Lisp
command. In Lucid Lisp the command is @code{(disksave)}, in
Allegro Lisp it is @code{(excl:dumplisp)}, and in CMU Common Lisp
it is @code{(ext:save-lisp)}. Consult your Common Lisp chapter to
find the disk save command for your version of Common Lisp, as
well as how to start up a saved Lisp core.

It is usually convenient to specify @code{opal:reconnect-garnet} as the
@emph{restart-function} during your save of lisp. For example, the following
instruction will cause @code{opal:reconnect-garnet} to be invoked in
Allegro lisp whenever the saved lisp is restarted:

@smallexample
(excl:dumplisp :name "garnet-image" :restart-function #'opal:reconnect-garnet)
@end smallexample

Otherwise, you will need to call @code{opal:reconnect-garnet} chapterly when
the lisp image is restarted in order to restore the connection to the server
and make all Garnet windows visible again.

If the @emph{display-name} parameter to @code{opal:reconnect-garnet} is specified,
it should be the name of a machine (e.g., "ecp.garnet.cs.cmu.edu").
If not specified, @emph{display-name} defaults to the current machine.

@section Utility Functions
@node Utility Functions

@subsection Executing Unix Commands
@node Executing Unix Commands
@cindex{unix}
@cindex{shell-exec}

@defun opal:shell-exec command

The function @code{opal:shell-exec} is used to spawn a Unix shell and
execute Unix commands. The @emph{command} parameter should be a string of the
Unix command to be executed. The spawned shell does not read the @code{.cshrc}
file, in order to save time. The function returns a string of the output
from the shell.

In Lucid, CMUCL, and LispWorks, the shell spawned by @code{opal:shell-exec}
is @code{/bin/sh}. In Allegro and CLISP, the shell is the user's default.
Executing this function in other lisps, including MCL, causes an error
(please let the Garnet group know how to enhance this function to run in
your lisp).

@end defun

@subsection Testing Operating System Directories
@node Testing Operating System Directories
@cindex{directory-p}

This function is used to determine whether a string describes an
existing directory or not.

@defun opal:directory-p string

The @var{string} should name a potential directory, like @code{"/usr/garnet/"}.
If your lisp is running on a Unix system, this function spawns a shell and
executes a Unix command to test the directory.
There is no other standard way to test directories on different
lisps and operating systems. On the Mac, a lisp-specific directory command
is executed.

@end defun

@section Aggregadgets and Interactors
@node Aggregadgets and Interactors

@cindex{aggregadgets}
The @emph{Aggregadgets} module makes it much easier to create instances of an
aggregate and all its components. With an aggregadget, you only have to
define the aggregate and
its components once, and then when you create an instance, it creates all
of the components automatically. Aggregadgets also allow lists of items to
be created by simply giving a single prototype for all the list elements,
and a controlling value that the list iterates through. Aggregadgets are
described in their own chapter @cite{AggregadgetsChapter}. 

@cindex{Interactors}
@emph{Interactors} are used to handle all input from the user. Interactor
objects control input and perform actions on Opal graphical objects.
There are high-level interactor objects to
handle all the common forms of mouse and keyboard input. Interactors are
described in their own chapter @cite{InterChapter}.

Together Opal and Interactors should hide all details of X and QuickDraw
from the programmer. There should never be a need to reference any symbols in
@code{xlib} or @code{ccl}.


@section Creating New Graphical Objects
@node Creating New Graphical Objects

An interesting feature of object-oriented programming in Garnet is that
users are expected to create new objects only by combining existing
objects, not by writing new methods. Therefore, you should only need to
use Aggregadgets to create new kinds of graphical objects. It should never
be necessary to create a new @code{:draw} method, for example.

If for some reason, a new kind of primitive object is desired (for example,
a spline or some other primitive not currently supplied by X11), then
contact the Garnet group for information about how this can be done. Due
to the complexities of X11, Mac QuickDraw, and automatic update and
redrawing of objects in Opal, it is not particularly easy to create
new primitives.

@ref{References}
