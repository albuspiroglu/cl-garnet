
@chapter Garnet Gadgets
@node Garnet Gadgets 

by Andrew Mickish,
Brad A. Myers,
Rajan Parthasarathy,

@value{DATE}

@section Abstract
@node Abstract

The Garnet Gadget Set contains common user interface objects which can
be customized for use in an interface. Because the objects
are extremely versatile, they may be employed in a wide range of applications
with a minimum of modification. Examples of provided gadgets include menus,
buttons, scroll bars, sliders, and gauges.





@section Introduction
@node Introduction

Many user interfaces that span a wide variety of applications usually have
several elements in common. Menus and scroll bars, for example, are used so
frequently that an interface designer would waste considerable time and effort
recreating those objects each time they were required in an application.

The intent of the Garnet Gadget Set is to supply several frequently used objects
that can be easily customized by the designer. By importing these
pre-constructed objects into a larger Garnet interface, the designer is able
to specify in detail the desired appearance and behavior of the interface, while
avoiding the programming that this specification would otherwise entail.

This document is a guide to using the Gadget Set. The objects
were constructed using the complete Garnet system, and their descriptions assume
that the reader has some knowledge of KR, Opal, Interactors, and Aggregadgets.


@section Current Gadgets
@node Current Gadgets

Most of the gadgets described in this chapter are pictured in figures
@ref{scroll-group} through @ref{db-group}

@float Figure, fig:ex2
@center @image{scroll-group-pix, 5.5in}
@center @image{motif-scroll-group-pix, 5.5in}
@caption{The Garnet-style and Motif-style scroll bars, sliders, and gauges.
@code{@b[(a)] v-scroll-bar},@*@code{@b[(b)] v-slider}, @code{@b[(c)] gauge},
@code{@b[(d)] trill-device}, @code{@b[(e)] h-scroll-bar},
@code{@b[(f)] h-slider},
@*@code{@b[(g)] motif-v-scroll-bar}, @code{@b[(h)] motif-slider},
@code{@b[(i)] motif-gauge}, @code{@b[(j)] motif-@*trill-device},
@code{@b[(k)] motif-slider}}
@anchor{scroll-group}
@end float

0
@itemize
@b{Gadgets used to choose a value from a range of values}
@vtable @code
@code{v-scroll-bar} -  Vertical scroll bar (p. @ref{scroll-bars})

@code{v-slider} -  Vertical slider (same idea as a scroll bar, but with a
tic-marked shaft rather than a rectangular bounding box) (p. @ref{sliders})

@code{gauge} -  Semi-circular gauge (the needle on the gauge may be
moved to select a value) (p. @ref{gauge})

@code{trill-device} -  Number input box with increment/decrement trill
boxes (p. @ref{trill-device})

@code{h-scroll-bar} -  Horizontal scroll bar (p. @ref{scroll-bars})

@code{h-slider} -  Horizontal slider (p. @ref{sliders})

@code{motif-v-scroll-bar} - Vertical scroll bar (p. @ref{motif-scroll-bars})

@code{motif-slider} - Vertical slider (same idea as a scroll bar, but with text
beside the indicator showing the current value) (p. @ref{motif-slider})

@code{motif-gauge} - Semi-circular gauge (p. @ref{motif-gauge})

@code{motif-trill-device} - Number input with trill boxes
(p. @ref{motif-trill-device})

@code{motif-h-scroll-bar} - Horizontal scroll bar
(p. @ref{motif-scroll-bars})

@end vtable
@end itemize



@float Figure, fig:ex2
@center @image{menu-group-pix, 5.5in}
@center @image{motif-menu-group-pix, 5.5in}
@caption{The Garnet-style and Motif-style buttons and menus.
@b{(a)} @code{menubar},@*
@b{(b)} @code{popup-menu-button}, @b{(c)} @code{menu},
@b{(d)} @code{scrolling-menu}, @b{(e)} @code{text-button-panel},@*
@b{(f)} @code{x-button-panel}, @b{(g)} @code{radio-button-panel},
@b{(h)} @code{option-button},@*
@b{(i)} @code{motif-menubar}, @b{(j)} @code{motif-menu},
@b{(k)} @code{motif-scrolling-menu},@*
@b{(l)} @code{motif-text-button-panel},
@b{(m)} @code{motif-check-button-panel},@*
@b{(n)} @code{motif-radio-button-panel},
@b{(o)} @code{motif-option-button} in its unselected and selected state}
@anchor{menu-group}
@end float


@itemize
@b{Gadgets used to choose items from a list of possible choices}
@vtable @code
@code{menubar} - A pull-down menu (p. @ref{menubar})

@code{popup-menu-button} - A button which pops up a menu when pressed. The
appearance of the button does not change with the selection.
(p. @ref{popup-menu-button})

@code{menu} -  Vertical menu, single selection (p. @ref{menu})

@code{scrolling-menu} -  A menu with a scroll bar on one side, which allows a
subset of all items in the menu to be viewed. (single or multiple selection)
(p. @ref{scrolling-menu})

@code{text-buttons} -  A panel of rectangular buttons, each with a choice
centered inside the button. As an option, the currently selected choice
may appear in inverse video. (single selection) (p. @ref{buttons} and
@ref{text-buttons})

@code{x-buttons} -  A panel of square buttons, each with a choice beside the
button. An "X" appears inside each currently selected button. (multiple
selection)  (p. @ref{buttons} and @ref{x-buttons})

@code{radio-buttons} -  A panel of circular buttons, each with a choice beside
the button. A black circle appears inside the currently selected button. 
(single selection)  (p. @ref{buttons} and @ref{radio-buttons})

@code{option-button} - A button which pops up a menu when pressed. Selection of
a choice from the menu causes that item to appear as the new label of the
button. (p. @ref{option-button})

@code{motif-menubar} - A pull-down menu. (p. @ref{motif-menubar})

@code{motif-menu} - Vertical menu, single selection  (p. @ref{motif-menu})

@code{motif-scrolling-menu} - A menu with an attached scroll bar.
(p. @ref{motif-scrolling-menu})

@code{motif-text-buttons} - A panel of rectangular buttons, each with a
choice appearing inside the button. (single selection)
(p. @ref{motif-buttons} and @ref{motif-text-buttons})

@code{motif-check-buttons} - A panel of square buttons, each with a
choice beside the buttons. (multiple selection)
(p. @ref{motif-buttons} and @ref{motif-check-buttons})

@code{motif-radio-buttons} - A panel of diamond buttons, each with a
choice beside the button. (single selection)
(p. @ref{motif-buttons} and @ref{motif-radio-buttons})

@code{motif-option-button} - A button which pops up a menu when pressed.
Selection of a choice from the menu causes that item to appear as the new
label of the button. (p. @ref{motif-option-button})

@end vtable
@end itemize




@float Figure, fig:ex2
@center @image{text-group-pix, 5.5in}
@center @image{multifont-gadget-pix, 5.5in}
@caption{Text gadgets. @b{(a)} @code{labeled-box},
@b{(b)} @code{scrolling-labeled-box},@*@b{(c)} @code{scrolling-input-string},
@b{(d)} @code{motif-scrolling-labeled-box},@*@b{(e)} @code{multifont-gadget}}
@anchor{text-group}
@end float

@itemize
@b{Gadgets used to handle text input}
@vtable @code
@code{labeled-box} -  A framed text object that may be edited. As the string
gets longer, the frame expands. (p. @ref{labeled-box})

@code{scrolling-labeled-box} - A scrolling input string in a box with a label.
The frame stays fixed, and the string scrolls.
(p. @ref{scrolling-labeled-box})

@code{scrolling-input-string} - Input a text string, but using a fixed width
area and scroll the string horizontally if necessary.
(p. @ref{scrolling-input-string})

@code{motif-scrolling-labeled-box} - A labeled box with text inside that may
be edited. (p. @ref{motif-scrolling-labeled-box})

@code{multifont-gadget} - A text editing gadget that includes word wrap,
text selection, and many functions that allow manipulation of the
text. This gadget is discussed in the Opal chapter. 

@end vtable
@end itemize



@float Figure, fig:ex2
@center @image{dialog-box-pix, 5.5in}
@caption{Garnet dialog boxes. @b{(a)} @code{motif-save-gadget},
@b{(b)} @code{error-gadget},@*@b{(c)} @code{motif-query-gadget},
@b{(d)} @code{motif-prop-sheet-with-OK}}
@anchor{db-group}
@end float

@itemize
@b{Dialog boxes for reading and writing to files} (the @code{motif-save-gadget} is
pictured in figure @ref{db-group})
@vtable @code
@code{save-gadget} - Saves a file in a directory whose contents are displayed
in a scrolling menu. (p. @ref{save-gadget})

@code{load-gadget} - Loads a file from a directory whose contents are displayed
in a scrolling menu. (p. @ref{load-gadget})

@code{motif-save-gadget} - Saves a file in a directory whose contents are
displayed in a Motif style scrolling menu. (p. @ref{motif-save-gadget})

@code{motif-load-gadget} - Loads a file from a directory whose contents are
displayed in a Motif style scrolling menu. (p. @ref{motif-load-gadget})
@end vtable
@end itemize

@itemize
@b{Dialog boxes for reporting errors to the user and asking for user
input}  (the @code{error-gadget} and @code{motif-query-gadget} are pictured
in figure @ref{db-group}).
@vtable @code
@code{error-gadget} - Used to display error messages in a window with an
"OK" button (p. @ref{error-gadget})

@code{query-gadget} - A dialog box like the @code{error-gadget}, but with
multiple buttons and the ability to return values.
(p. @ref{query-gadget})

@code{motif-error-gadget} - A dialog box used to display error messages
with an "OK" button in the Motif style.
(p. @ref{motif-error-gadget})


@code{motif-query-gadget} - A Motif style dialog box with multiple buttons.
(p. @ref{motif-query-gadget})

@end vtable
@end itemize


@itemize
@b{Property sheet gadgets} (a Motif property sheet is pictured in figure
@ref{db-group})
@vtable @code
@code{prop-sheet} - Displays a set of labels and values and allows the values
to be edited. This gadget can be easily displayed in its own window.
(p. @ref{propertysheets})

@code{prop-sheet-for-obj} - A property sheet designed to display the slots
in a Garnet object. (p. @ref{propsheetforobj})

@code{prop-sheet-with-OK} - A property sheet with OK-Cancel buttons.
(p. @ref{propsheetwithok})

@code{prop-sheet-for-obj-with-OK} - A property sheet designed to display the
slots in a Garnet object with attached OK-Cancel buttons.
(p. @ref{propsheetforobjwithok})

@code{motif-prop-sheet-with-OK} - A property sheet with OK-Cancel buttons
in the Motif style. (p. @ref{motif-prop-sheets})

@code{motif-propt-sheet-for-obj-with-OK} - A Motif style property sheet designed
to display the slots in a Garnet object with attached OK-Cancel buttons.
(p. @ref{motif-prop-sheet-for-obj-with-ok})
@end vtable


@b{Scrolling windows}
@vtable @code
@code{scrolling-window} - Supports a scrollable window
(p. @ref{scrolling-windows})


@code{scrolling-window-with-bars} - Scrolling window complete with scroll bars.
(p. @ref{scrolling-windows})

@code{motif-scrolling-window-with-bars} - Motif style scrolling window
(p. @ref{motif-scrolling-window})
@end vtable


@b{Special gadgets}
@vtable @code
@code{arrow-line} - A line with an arrowhead at one end
(p. @ref{arrow-line})

@code{double-arrow-line} - A line with arrowheads at both ends
(p. @ref{double-arrow-line})

@code{browser-gadget} - Used to examine structures and hierarchies
(p. @ref{browser-gadget})

@code{graphics-selection} - Bounding boxes and
interactors to move and change the size of other graphical objects.
(p. @ref{graphics-selection})

@code{multi-graphics-selection} - Same as @code{graphics-selection}, but for
multiple objects. (p. @ref{multi-gs})

@code{polyline-creator} - For creating and editing polylines.
(p. @ref{polyline-creator})

@code{MouseLine} and @code{MouseLinePopup} - A gadget that pops up a "help" string,
informing the user about the object that the mouse is held over.

@code{standard-edit} - A module of predefined "cut" and "paste" procedures,
and many other common editing functions. (p. @ref{standardeditsec})
@end vtable
@end itemize



@section Customization
@node Customization
@cindex{customization} The most important feature of the Garnet Gadgets
is the ability to create a variety of interface styles from a small
collection of prototype objects. Each gadget includes many parameters
which may be customized by the designer, providing a great deal of
flexibility in the behavior of the gadgets. The designer may,
however, choose to leave many of the default values unchanged, while
modifying only those parameters that integrate the object into the
larger user interface.

The location, size, functionality, etc., of a gadget is determined by
the values in each of its slots. When instances of gadgets are
created, the instances inherit all of the slots and slot values from
the prototype object except those slots which are specifically
assigned values by the designer. The slot values in the prototype can
thus be considered "default" values for the instances, which may be
overridden when instances are created.@footnote{See the KR chapter for a
more detailed discussion of inheritance.}  The designer may also add
new slots not defined in the gadget prototype for use by special
applications in the larger interface.
@cindex{slots}
@cindex{inheritance}
Slot values may be changed after the instances are
created by using the KR function @code{s-value}.

@section Using Gadget Objects
@node Using Gadget Objects
@cindex{garnet-gadgets package}
@cindex{gg nickname}
@cindex{use-package}
The gadget objects reside in the @code{GARNET-GADGETS} package, which
has the nickname "GG". We recommend that programmers explicitly
reference the name of the package when creating instances of the 
gadgets, as in @code{garnet-gadgets:v-scroll-bar} or @code{gg:v-scroll-bar}.
However, the package name may be dropped if the line @code{(use-package
"GARNET-GADGETS")} is executed before referring to gadget objects.

Before creating instances of gadget objects, a set of component
modules must be loaded. These modules are loaded in the correct order
when the "-loader" files corresponding to the desired gadgets are used
(see Chapter @ref{accessing}).
@cindex{loader files}

Since each top-level object is exported from the @code{GARNET-GADGETS}
package, creating instances of gadget objects is as easy as
instantiating any other Garnet objects. To use a gadget, an instance
of the prototype must be defined and added to an interactor window.
The following lines will display a vertical scroll bar in a window:
@example
(create-instance 'MY-WIN inter:interactor-window
   (:left 0) (:top 0) (:width 300) (:height 500))
(create-instance 'MY-AGG opal:aggregate)
(s-value my-win :aggregate my-agg)
(create-instance 'MY-SCROLL-BAR garnet-gadgets:v-scroll-bar)
(opal:add-component my-agg my-scroll-bar)
(opal:update my-win)
@end example
@cindex{v-scroll-bar}
@cindex{displaying objects} The first two instructions create an
interactor window named @code{my-win} and an aggregate named
@code{my-agg}. The third instruction sets the @code{:aggregate} slot of
@code{my-win} to @code{my-agg}, so that all graphical objects attached to
@code{my-agg} will be shown in @code{my-win}. The next two instructions
create an instance of the @code{v-scroll-bar} object named
@code{my-scroll-bar} and add it as a component of @code{my-agg}. The last
instruction causes @code{my-win} to become visible with
@code{my-scroll-bar} inside.

In most cases, the use of a gadget will follow the same form as the
preceding example. The important difference will be in the
instantiation of the gadget object (the fifth instruction above),
where slots may be given values that override the default values
defined in the gadget prototype. The following example illustrates
such a customization of the vertical scroll bar.

Suppose that we would like to create a vertical scroll bar whose
values span the interval [0..30], with its upper-left coordinate at
(25,50). This vertical scroll bar may be created by:
@example
(create-instance 'CUSTOM-BAR garnet-gadgets:v-scroll-bar
   (:left 25)
   (:top 50)
   (:val-1 0)
   (:val-2 30))
@end example
@cindex{customization} This instruction creates an object called
CUSTOM-BAR which is an instance of @code{v-scroll-bar}. The
vertical scroll bar CUSTOM-BAR has inherited all of the slots
that were declared in the @code{v-scroll-bar} prototype along with their
default values, except for the coordinate and range values which have
been specified in this schema definition (see section
@ref{scroll-bars} for a list of customizable slots in the scroll bar
objects).


@section Application Interface
@node Application Interface

There are several ways that the gadgets can interface with your
application. This section describes several ways the you can get the
gadgets to "do something" to your application.

@subsection The :value slot
@node The :value slot
@cindex{value slot}
@anchor{value-slot}
In most gadgets, there is a top-level @code{:value}
slot. This slot is updated automatically after a user changes the
value or position of some part of the gadget. This is therefore the
main slot through which the designer perceives action on the part of
the user.

The @code{:value} slot may be accessed directly (by the KR functions
@code{gv} and @code{gvl})
order to make other objects in the larger interface dependent on the
actions of the user. The slot may also be set directly by the KR
function @code{s-value} to change the current value or selection
displayed by the gadget (except in the scrolling menu gadget, where
the @code{:selected-ranks} slot must be set).

@cindex{initial value}
An instance of a gadget can be given initial
values by setting the @code{:value} slot after the instance has been
created. In most gadgets, this slot may
@b{not} be given a value in the @code{create-instance} call, since this
would override the formula in the slot. Therefore, the general
procedure for selecting an initial value in a gadget is to create the
instance, access the @code{:value} slot using @code{gv} (to
initialize the formula in the slot and establish dependencies), and
then use @code{s-value} to set the slot to the desired initial value.

See sections @ref{use-value} and @ref{sel-buttons} for examples of the
@code{:value} slot in use.

@subsection The :selection-function slot
@node The :selection-function slot
@anchor{sel-fn}
@cindex{selection-function}
In most gadgets there is a
@code{:selection-function} slot which holds the name of a function to be
called whenever the @code{:value} slot changes due to action by the user
(such as the pressing of a button). The @code{:selection-function} is
not automatically called when the designer's interface sets the
@code{:value} slot directly.

This is probably the most important link between the gadgets and your
application. By supplying a gadget with a selection function, then
the gadget can execute some application-specific procedure when the
user operates it.

In the scroll bars, sliders, trill device, and gauge, this function is
called after the user changes the value by moving the indicator or
typing in a new value (the function is called repeatedly while the
user drags an indicator). In buttons and menus, it is called when the
user changes the currently selected item or set of items, and it
precedes the function attached locally to the item. In the labeled
box, scrolling-input-string and scrolling-labeled-box, it is called
after the user has finished editing the text (i.e., after a carriage
return). In the @code{:graphics-selection} gadget, it is called
whenever the user selects a new object or deselects the current
object.

In the scrolling menu gadget, there are two selection functions, named
@code{:scroll-selection-function} and @code{:menu-selection-function}
which are called independently when the user moves the scroll bar or
selects a menu item, respectively.

The function must take two parameters: the top-level gadget itself and the
value of the top-level @code{:value} slot:
@example
(lambda (gadget-object value))
@end example
In x-buttons, the parameter @code{value} will be a
list of strings. The scrolling menu sends the menu item (a Garnet
schema) on which the user just clicked as its @code{value}. Other
gadgets will have only a single number or string as their @code{value}.
@cindex{selection-function}

An example use of @code{:selection-function} is in section @ref{use-selection}.


@subsection The :items slot
@node The :items slot
@cindex{items slot}
@anchor{items-slot}
The button and menu gadgets are built up from items supplied by the designer.
These items are supplied as a list in the @code{:items} slot of the gadgets.
@b{Note:} Do not destructively modify the @code{:items} list; instead, create
a new list using @code{list} or copy the old value with @code{copy-list} and
modify the copy.

@subsection Item functions
@node Item functions
@cindex{item functions}
@cindex{atoms}
There are several ways to specify items:

@itemize
@b{List of strings} - This is the obvious case, such as @code{'("Open" "Close"
"Erase")}.

@b{List of atoms} - In Garnet, the values of slots are often specified
by atoms -- symbols preceded by a colon (e.g., @code{:center}). If a
formula in the larger interface depends upon the @code{:value} slot of
the button panel, then the designer may wish the items to be actual
atoms rather than strings, so that the value is immediately used
without being coerced. Such a list would look like @code{'(:left
:center :right)}. The items will appear to the user as capitalized
strings without colons.

@b{List of objects} - In addition to string labels, the gadgets can have
labels that are objects (like circles and rectangles). Such a list might
look like @code{`(,MY-CIRCLE ,MY-SQUARE ,OBJ3)}. Objects, strings, and atoms
can be mixed together in any @code{:items} list. Most of the demo functions
for the gadgets use at least one object in the example.

@b{List of label/function pairs} - This mode is
useful when the designer wishes to execute a specific function upon
selection of a button. If the @code{:items} slot contained the list
@code{'(("Cut" My-Cut) ("Paste" My-Paste))}, then the function
@code{My-Cut} would be executed when the button labeled "Cut" becomes
selected. The designer must define these functions with two parameters:
@example
(lambda (gadget-object item-string))
@end example
The @emph{gadget-object} is the top-level gadget
(such as a @code{text-button-panel}) and the @emph{item-string} is the
string (or atom) of the item that was just selected.
@end itemize

The item functions are executed along with the selection function
whenever the user operates the gadget. These functions are different,
however, because the selection function is executed when @b{any} item
is selected, and the item functions are only executed when the item
associated with them is selected.

The gadgets always assume that if an element of the @code{:items} list is
a list, then the first element in the item is a label and the second element
is a function. If you intend to use the @code{:items} list for storing
application-specific data, you should avoid storing data in these reserved
positions of the item elements. It is fine to store arbitrary data in the
third and subsequent elements of an item list.

Section @ref{use-item-fn} shows an example implementation of item
functions.


@subsection Adding and removing items
@node Adding and removing items
@cindex{Add-item",Secondary="Gadgets}
@cindex{notice-items-changed}
There are two ways to add and remove items from a button or menu gadget:
use @code{add-item} and @code{remove-item} to change the @code{:items} list,
or set the @code{:items} slot by hand using @code{s-value}.
Both ways to change items are shown in the example below.

The various methods for changing items are

@example
opal:Add-Item @i{gadget item} [[:where] @i{position[locator]} [:key @i{function-name}]]@ref{method}

opal:Remove-Item @i{gadget} [@i{item} [:key @i{function-name}]]@ref{method}

opal:Remove-Nth-Item @emph{gadget} @emph{n}@ref{method}

opal:Change-Item @emph{gadget item n}@ref{method}
@end example

These methods are described in the Aggregadgets chapter.
@code{Add-item} will add @emph{item} to the @code{:items} list of @emph{gadget}, and
will place it in the list according to the @emph{position}, @emph{locator}, and
@emph{key} parameters.

All gadgets that have an @code{:items} slot support @code{add-item} and the other
methods (except for the @code{browser-gadget}, which has other
item maintenance functions). The documentation for the @code{menubar} and
@code{motif-menu} describes special features supported by those gadgets.

For example, consider adding an item to the X-BUTTONS-OBJ in the
@code{x-button-panel} demo.
@example
@emph{; Use opal:add-item in one step}
(opal:add-item gg:X-BUTTONS-OBJ "newitem-1")

@emph{; Use s-value (directly or indirectly)}
(push "newitem-2" (gv gg:X-BUTTONS-OBJ :items))
@end example

The @code{push} function uses @code{s-value} indirectly.
@code{S-value} may also be used explicitly. After changing the @code{:items} list
with @code{s-value}, the components of the gadget
(like the individual buttons in a button panel) will be adjusted during the
next call to @code{opal:update}. If information about the gadget (like its new
dimensions) is required @emph{before} the next update, the components can be
adjusted chapterly with a call to @code{opal:notice-items-changed} with the
gadget as a parameter. See the Aggregadgets Chapter for more information about
@code{opal:notice-items-changed}.

Because of internal references to the @code{:items} slot, destructive
modification of the @code{:items} list is not allowed. If you change the list
in the @code{:items} slot, you should create a new list (e.g., with @code{list}),
or use @code{copy-list} on the original, and destructively modify the copy.


@section Constants with the Gadgets
@node Constants with the Gadgets
@cindex{Constants", Secondary="Gadgets}
@cindex{maybe-constant}
At the top of most gadget definitions, there is a slot called
@code{:maybe-constant} with a list of slots as its value. These are the
slots that will be declared constant in an instance of a gadget, if
the instance was created with its @code{:constant} slot set to T. By
declaring a slot constant, the user promises that the value of that
slot will never change, and all formulas that depend on it can be
thrown away and replaced by absolute values.

Removing formulas that depend on constant slots can free up a large
amount of storage space. Therefore, users who have finished designing
part of an interface may want to go back through their gadget
instances and delclare constant as many slots as possible.

In addition to using the special T value in a @code{:constant} list,
you can selectively declare slots constant by listing them
explicitly (e.g., @code{(:constant '(:left :top))}).
You can also use the @code{:except} keyword, as in the following schema:
@example
(create-instance NIL gg:motif-radio-button-panel
   (:constant '(T :except :active-p))
   (:left 10)(:top 30)
   (:items '("Start" "Pause" "Quit")))
@end example
In this example, the user declares constant all of the slots in the
@code{:maybe-constant} list, with the exception of @code{:active-p}. This
allows the value of the @code{:active-p} slot to change, and retains all
the formulas that depend on it (so that the gadget will update its
appearance correctly when the value is toggled).

Constants are discussed in detail in the KR chapter.


@section Accessing the Gadgets
@node Accessing the Gadgets

@anchor{accessing}

@section Gadgets Modules
@node Gadgets ModulesThe schemata definitions in the gadgets
package are modularized so that one schema may be used by several
objects. For example, trill boxes with arrows pointing to the left
and right are used in the horizontal scroll bar, the horizontal
slider, and the trill device. As a result, all of the code for the
gadget objects has a consistent style, and the gadgets themselves have
a uniform look and feel.
@cindex{modules}


@section Loading the Gadgets
@node Loading the Gadgets

Since much of the gadget code is shared
by the top-level objects, a set of "parts" modules must be loaded
before some of the top-level gadgets. The required modules are loaded
in the proper order when the loader files corresponding to the desired
gadgets are used. The standard gadgets and their associated loader
files are listed in figure @ref{loader-files-figure}. The motif
gadgets and loader files appear in figure
@ref{motif-loader-files-figure}. It is safe to load the
"xxx-loader" files multiple times, they will not re-load the
objects the second time.@cindex{loader files}

@float Figure, fig:ex2
@vtable @code
@code{arrow-line} - "arrow-line-loader"

@code{browser-gadget} - "browser-gadget-loader"

@code{double-arrow-line} - "arrow-line-loader"

@code{error-gadget} - "error-gadget-loader"

@code{gauge} - "gauge-loader"

@code{graphics-selection} - "graphics-loader"

@code{h-scroll-bar} - "h-scroll-loader"

@code{h-slider} - "h-slider-loader"

@code{labeled-box} - "labeled-box-loader"

@code{load-gadget} - "save-gadget-loader"

@code{menu} - "menu-loader"

@code{menubar} - "menubar-loader"

@code{MouseLine} and @code{MouseLinePopup} - "mouseline-loader"

@code{multifont-gadget} - "multifont-loader"

@code{multi-graphics-selection} - "multi-selection-loader"

@code{option-button} - "option-button-loader"

@code{popup-menu-button} - "popup-menu-button-loader"

@code{prop-sheet} - "prop-sheet-loader"

@code{prop-sheet-for-obj} - "prop-sheet-loader"

@code{prop-sheet-for-obj-with-OK} - "prop-sheet-win-loader"

@code{prop-sheet-with-OK} - "prop-sheet-win-loader"

@code{query-gadget} - "error-gadget-loader"

@code{radio-button} - "radio-buttons-loader"

@code{radio-button-panel} - "radio-buttons-loader"

@code{save-gadget} - "save-gadget-loader"

@code{scrolling-input-string} - "scrolling-input-string-loader"

@code{scrolling-labeled-box} - "scrolling-labeled-box-loader".

@code{scrolling-menu} - "scrolling-menu-loader"

@code{scrolling-window} - "scrolling-window-loader"

@code{scrolling-window-with-bars} - "scrolling-window-loader"

@code{standard-edit} - "standard-edit-loader"

@code{text-button} - "text-buttons-loader"

@code{text-button-panel} - "text-buttons-loader"

@code{trill-device} - "trill-device-loader"

@code{v-scroll-bar} - "v-scroll-loader"

@code{v-slider} - "v-slider-loader"

@code{x-button} - "x-buttons-loader"

@code{x-button-panel} - "x-buttons-loader"

@end vtable
@caption{Loader files for Garnet Gadgets}
@anchor{loader-files-figure}
@end float


@float Figure, fig:ex2
@vtable @code

@code{motif-check-button} - "motif-check-buttons-loader"

@code{motif-check-button-panel} - "motif-check-buttons-loader"

@code{motif-error-gadget} - "motif-error-gadget-loader"

@code{motif-gauge} - "motif-gauge-loader"

@code{motif-h-scroll-bar} - "motif-h-scroll-loader"

@code{motif-load-gadget} - "motif-save-gadget-loader")

@code{motif-menu} - "motif-menu-loader"

@code{motif-menubar} - "motif-menubar-loader"

@code{motif-option-button} - "motif-option-button-loader"

@code{motif-prop-sheet-...} - "motif-prop-sheet-win-loader"

@code{motif-query-gadget} - "motif-error-gadget-loader"

@code{motif-radio-button} - "motif-radio-buttons-loader"

@code{motif-radio-button-panel} - "motif-radio-buttons-loader"

@code{motif-save-gadget} - "motif-save-gadget-loader"

@code{motif-scrolling-labeled-box} - "motif-scrolling-labeled-box-loader"

@code{motif-scrolling-menu} - "motif-scrolling-menu-loader"

@code{motif-scrolling-window-with-bars} - "motif-scrolling-window-loader"

@code{motif-slider} - "motif-slider"

@code{motif-text-button} - "motif-text-buttons-loader"

@code{motif-text-button-panel} - "motif-text-buttons-loader"

@code{motif-trill-device} - "motif-trill-device-loader"

@code{motif-v-scroll-bar} - "motif-v-scroll-loader"

@end vtable
@caption{Loader files for Motif Gadgets}
@anchor{motif-loader-files-figure}
@end float

@cindex{garnet-gadgets-loader}
To load the entire Gadget Set, execute
@code{(load Garnet-Gadgets-Loader)} after loading the
@code{Garnet-Loader}. @emph{This is not recommended, since there are so
many gadgets, and you will only need a few of them!}  To load
particular objects, such as the @code{v-slider} and @code{menu} gadgets,
load the specific loader files:
@example
(garnet-load "gadgets:v-slider-loader")
(garnet-load "gadgets:menu-loader")
@end example
For a discussion of the @code{garnet-load} function, see the Overview at the
beginning of this reference chapter.

@section Gadget Files
@node Gadget Files

There are several gadgets files that
normally have names that are longer than 31 characters. Since the Mac
restricts the length of filenames to 31 characters, some gadget files have
their names truncated on the Mac. Mac users may
continue to specify the full-length names of these files by using
@code{user::garnet-load}, described in the Overview section of this chapter,
which translates the regular names of the gadgets into their truncated
31-character names so they can be loaded. It is recommended that
@code{garnet-load} be used
whenever any Garnet file is loaded, so that typically long and cumbersome
pathnames can be abbreviated by a short prefix.

@section Gadget Demos
@node Gadget Demos

Most gadgets have small demo functions that are loaded along with their
schema definitions.@footnote{Unless the @code{:garnet-debug} key was removed from
from the @code{*features*} list when the Garnet software was compiled or
loaded (see the Hints chapter).}  For example, after loading the
@code{"v-slider-loader"}, you can do @code{gg:v-slider-go} to see a demo of the
vertical slider.

A complete list of all gadget demos is included in the Demonstration Programs
section of this reference chapter. The names of all gadget demos are also
mentioned at the top of each section in this Gadget chapter.



@section The Standard Gadget Objects
@node The Standard Gadget Objects

@anchor{Standard-Gadgets}

Each of the objects in the Gadget Set is an interface mechanism
through which the designer obtains chosen values from the user. The
scroll bars, sliders, gauge, and trill device all have a "continuous"
flavor, and are used to obtain values between maximum and minimum
allowed values. The buttons and menus are more "discrete", and allow
the selection of a single choice from several alternatives.

The sections of this chapter describe the gadgets in detail. Each
object contains many customizable slots, but the designer may choose
to ignore most of them in any given application. If slot values are
not specified when instances are created, then the default values will
be used.

Each description begins with a list of the customizable slots and
default values for the gadget object.

@section Scroll Bars
@node Scroll Bars
@anchor{scroll-bars}
@cindex{v-scroll-bar}
@cindex{h-scroll-bar}
@cindex{scroll-bars}

@example
(create-instance 'gg:V-Scroll-Bar opal:aggregadget
   (:maybe-constant '(:left :top :height :min-width :val-1 :val-2 :scr-trill-p
                      :page-trill-p :indicator-text-p :page-incr :scr-incr
                      :int-feedback-p :scroll-p :format-string :indicator-font
                      :visible))
   (:left 0)
   (:top 0)
   (:height 250)
   (:min-width 20)
   (:val-1 0)
   (:val-2 100)
   (:scr-incr 1)
   (:page-incr 5)
   (:scr-trill-p T)
   (:page-trill-p T)
   (:indicator-text-p T)
   (:int-feedback-p T)
   (:scroll-p T)
   (:indicator-font (opal:get-standard-font :fixed :roman :small))
   (:value (o-formula ...))
   (:format-string "~a")
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example
@sp 1

@example
(create-instance 'gg:H-Scroll-Bar opal:aggregadget
   (:maybe-constant '(:left :top :width :min-height :val-1 :val-2 :scr-trill-p
                      :page-trill-p :indicator-text-p :page-incr :scr-incr
                      :int-feedback-p :scroll-p :format-string :indicator-font :visible))
   (:left 0)
   (:top 0)
   (:width 250)
   (:min-height 20)
   (:val-1 0)
   (:val-2 100)
   (:scr-incr 1)
   (:page-incr 5)
   (:scr-trill-p T)
   (:page-trill-p T)
   (:indicator-text-p T)
   (:int-feedback-p T)
   (:scroll-p T)
   (:indicator-font (create-instance NIL opal:font (:size :small)))
   (:value (o-formula ...))
   (:format-string "~a")
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

@float Figure, fig:ex2
@center @image{scroll-pix, 5.5in}
@caption{Vertical and horizontal scroll bars}
@end float

The loader file for the @code{v-scroll-bar} is "v-scroll-loader". The
loader file for the @code{h-scroll-bar} is "h-scroll-loader".

The scroll bar is a common interface object used to specify a desired
position somewhere in a range of possible values. The distance of the
indicator from the top and bottom of its bounding box is a graphical
representation of the currently chosen value, relative to the minimum
and maximum allowed values.

The scroll bars in the Gadget Set, @code{v-scroll-bar} and
@code{h-scroll-bar}, allow the interface designer to specify the minimum
and maximum values of a range, while the @code{:value} slot is a report
of the currently chosen value in the range. The interval is
determined by the values in @code{:val-1} and @code{:val-2}, and either
slot may be the minimum or maximum of the range. The value in
@code{:val-1} will correspond to the top of the vertical scroll bar and
the left of the horizontal scroll bar. The @code{:value} slot may be
accessed directly by some function in the larger interface, and other
formulas in the interface may depend on it. If the @code{:value} slot
is set directly, then the appearance of the scroll bar will be updated
accordingly.


The trill boxes at each end of the scroll bar allow the user to
increment and decrement @code{:value} by precise amounts. The intent of
the two sets of boxes is to give the user a choice between increment
values -- either a conventional scroll of @code{:scr-incr} in the single
arrow box or @code{:page-incr} in the double arrow box. There is no
restriction on whether one value must be larger or smaller than the
other.
@cindex{scr-incr}
@cindex{trill-incr}
@cindex{trill boxes}

In fact, the designer may choose to leave the trill boxes out
completely. The slots @code{:scr-trill-p} and @code{:page-trill-p} may be
set to @code{nil} in order to prevent the appearance of the scroll boxes or
page boxes, respectively.
@cindex{scr-trill-p}
@cindex{page-trill-p}

The indicator may also be moved directly by mouse movements. Dragging
the indicator while the left mouse button is pressed will cause a
thick lined box to follow the mouse. The indicator then moves to the
position of this feedback box when the mouse button is released. If
@code{:int-feedback-p} is set to @code{nil}, the thick lined box will not
appear, and the indicator itself will follow the mouse. A click of
the left mouse button in the background of the scroll bar will cause
the indicator to jump to the position of the mouse.
@cindex{indicator}
@cindex{int-feedback-p}

With each change of the indicator position, the @code{:value} slot is
updated automatically to reflect the new position. The current value
is reported as a text string inside the indicator unless the slot
@code{:indicator-text-p} is set to @code{nil}.

Since the scroll bar must be wide enough to accommodate the widest
text string in its range of values, the width of the vertical scroll
bar (and similarly the height of the horizontal scroll bar) is the
maximum of the width of the widest value and the @code{:min-width}. The
@code{:min-width} will be used if there is no indicator text (i.e.,
@code{:indicator-text-p} is @code{nil}), or if the @code{:min-width} is greater
than the width of the widest value.

The slot @code{:scroll-p} is used to enable and disable the scrolling
feature of the scroll bar. When @code{:scroll-p} is set to @code{nil}, the
trill boxes of the scroll bar become inactive and the background turns
white. This ability to disable scrolling is useful in applications
where the range of the scroll bar is not fixed. For example, in the
@code{scrolling-menu} gadget, the scroll bar is disabled there are not
enough items to fill the entire menu.

The font in which @code{:value} is reported in the indicator may be set
in the slot @code{:indicator-font}.


@section Sliders
@node Sliders
@anchor{sliders}
@cindex{v-slider}
@cindex{h-slider}
@cindex{sliders}

@example
(create-instance 'gg:V-Slider opal:aggregadget
   (:maybe-constant '(:left :top :height :shaft-width :scr-incr :page-incr :val-1 :val-2
                      :num-marks :scr-trill-p :page-trill-p :tic-marks-p :enumerate-p
                      :value-feedback-p :scroll-p :value-feedback-font :enum-font
                      :format-string :enum-format-string :visible))
   (:left 0)
   (:top 0)
   (:height 250)
   (:shaft-width 20)
   (:scr-incr 1)
   (:page-incr 5)
   (:val-1 0)
   (:val-2 100)
   (:num-marks 11)
   (:scr-trill-p T)
   (:page-trill-p T)
   (:tic-marks-p T)
   (:enumerate-p T)
   (:value-feedback-p T)
   (:scroll-p T)
   (:value-feedback-font opal:default-font)
   (:enum-font (create-instance NIL opal:font (:size :small)))
   (:format-string "~a")
   (:enum-format-string "~a")
   (:value (o-formula ...))
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example
@sp 1

@example
(create-instance 'gg:H-Slider opal:aggregadget
   (:maybe-constant '(:left :top :width :shaft-height :scr-incr :page-incr :val-1 :val-2
                      :num-marks :tic-marks-p :enumerate-p :scr-trill-p :page-trill-p
                      :scroll-p :value-feedback-p :value-feedback-font :enum-font
                      :format-string :enum-format-string :visible))
   (:left 0)
   (:top 0)
   (:width 300)
   (:shaft-height 20)
   (:scr-incr 1)
   (:page-incr 5)
   (:val-1 0)
   (:val-2 100)
   (:num-marks 11)
   (:tic-marks-p T)
   (:enumerate-p T)
   (:scr-trill-p T)
   (:page-trill-p T)
   (:value-feedback-p T)
   (:scroll-p T)
   (:value-feedback-font opal:default-font)
   (:enum-font (create-instance NIL opal:font (:size :small)))
   (:format-string "~a")
   (:enum-format-string "~a")
   (:value (o-formula ...))
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

@center @image{slider-pix, 5.5in}

The loader file for the @code{v-slider} is "v-slider-loader".
The loader file for the @code{h-slider} is "h-slider-loader".
@sp 1

The @code{v-slider} and @code{h-slider} gadgets have the same
functionality as scroll bars, but they are used when the context
requires a different style. The slider is comprised of a shaft with
perpendicular tic-marks and an indicator which points to the current
chosen value. Optional trill boxes appear at each end of the slider,
and the indicator can be moved with the same mouse commands as the
scroll bar. The vertical slider has an optional feedback box above
the shaft where the current value is displayed (this box is to the
left of the horizontal slider). The value that appears in the
feedback box may be edited directly by the user by pressing in the
text box with the left mouse button and entering a new
number.@footnote{Backspace and several editing commands are provided
through Interactors. See "Text-Interactor" in the Interactors
chapter.}

The slots @code{:value}, @code{:val-1}, @code{:val-2}, @code{:scr-incr},
@code{:page-incr}, @code{:scr-trill-p}, and @code{:page-trill-p} all have
the same functionality as in scroll bars (see section @ref{scroll-bars}).

The designer may specify the number of tic-marks to appear on the
shaft in the slot @code{:num-marks}. This number includes the tic-marks
at each end of the shaft in addition to the internal tic-marks.
Tic-marks may be left out by setting the @code{:tic-marks-p} slot to
NIL. If the slot @code{:enumerate-p} is set to T, then each tic-mark
will be identified by its position in the range of allowed values.
Also, numbers may appear without tic-marks marks by setting
@code{:enumerate-p} to T and @code{:tic-marks-p} to @code{nil}. The slot in
which to specify the font for the tic-mark numbers is @code{:enum-font}.

The slot @code{:shaft-width} in the vertical slider (analogously,
@code{:shaft-height} in the horizontal slider) is used to specify the
width of the trill boxes at the end of the shaft. This determines the
dimensions of the (invisible) bounding box for the interactors which
manipulate the indicator.

The slot @code{:scroll-p} is used to enable and disable the scrolling
feature of the sliders, just as in the scroll bars. When
@code{:scroll-p} is set to @code{nil}, the trill boxes of the slider become
inactive, and the indicator ceases to move.

The font for the feedback of the current value (which appears at the
end of the shaft) may be specified in @code{:value-feedback-font}. The
value feedback may be left out completely by setting
@code{:value-feedback-p} to @code{nil}.

The @code{:format-string} and @code{:enum-format-string} slots allow you to
control the formatting of the text strings, in case the standard formatting
is not appropriate. This is mainly useful for floating point numbers.
The slots should each contain a string that can be passed to the lisp function
@code{format}. The default string is @code{"~a"}.

@section Trill Device
@node Trill Device
@anchor{trill-device}
@cindex{trill-device}
@cindex{Number input}
@example
(create-instance 'gg:Trill-Device opal:aggregadget
   (:maybe-constant '(:left :top :min-frame-width :min-height :scr-incr :page-incr
                      :val-1 :val-2 :scr-trill-p :page-trill-p :scroll-p
                      :value-feedback-p :format-string :value-feedback-font :visible))
   (:left 0)
   (:top 0)
   (:min-frame-width 20)
   (:min-height 20)
   (:scr-incr 1)
   (:page-incr 5)
   (:val-1 0) (:val-2 100)
   (:scr-trill-p T)
   (:page-trill-p T)
   (:scroll-p T)
   (:value-feedback-p T)
   (:value-feedback-font opal:default-font)
   (:value 20)
   (:format-string "~a")
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

@center @image{trill-pix, 5.5in}

The loader file for the @code{trill-device} is "trill-device-loader".

The @code{trill-device} is a compact gadget which allows a value to be
incremented and decremented over a range as in the scroll bars and
sliders, but with only the numerical value as feedback. All slots
function exactly as in horizontal sliders, but without the shaft and
tic-mark features. As with sliders, the feedback value may be edited
by the user.

A unique feature of the trill box is that either or both @code{:val-1}
or @code{:val-2} may be @code{nil}, implying no lower or upper bound on the
input value, respectively. If numerical values for both slots are
supplied, then clipping of the input value into the specified range
occurs as usual. Otherwise, @code{:val-1} is assumed to be the minimum
value, and clipping will not occur at the @code{nil} endpoints of the
interval.

The width of the trill device may be either static or dynamic. If
both @code{:val-1} and @code{:val-2} are specified, then the width of the
value frame is the maximum of the widest allowed value and the
@code{:min-frame-width}. Otherwise, the value frame will expand with
the width of the value, while never falling below
@code{:min-frame-width}.

The height of the trill device is the maximum of the greatest string
height of all values in the range and the value of the slot
@code{:min-height}. The @code{:min-height} will be used if there is no
indicator text or if the @code{:min-height} is greater than the height
of the tallest value.

@sp 1
The @code{:format-string} slot allows you to control the formatting of
the text string, in case the standard formatting is not appropriate.
This is mainly useful for floating point numbers. This slot takes a
string that can be passed to the lisp function @code{format}. The
default string is @code{"~a"}. For example:

@example
(create-instance 'TRILL garnet-gadgets:trill-device
   (:left 35)(:top 70)(:val-1 0.0)(:val-2 1.0)(:scr-incr 0.01)
   (:page-incr 0.1)(:format-string "~4,2F"))
@end example


@section Gauge
@node Gauge
@anchor{gauge}
@cindex{Circular gauge}

@center @image{gauge-pix, 5.5in}

@cindex{gauge}

@example
(create-instance 'gg:Gauge opal:aggregadget
   (:maybe-constant '(:left :top :width :polygon-needle-p :int-feedback-p
		      :title :title-font :value-font :enum-font :num-marks
		      :tic-marks-p :enumerate-p :value-feedback-p :text-offset
		      :val-1 :val-2 :visible))
   (:left 0)
   (:top 0)
   (:width 230)
   (:val-1 0)
   (:val-2 180)
   (:num-marks 10)
   (:tic-marks-p T)
   (:enumerate-p T)
   (:value-feedback-p T)
   (:polygon-needle-p T)
   (:int-feedback-p T)
   (:text-offset 5)
   (:title "Gauge")
   (:title-font opal:default-font)
   (:value-font opal:default-font)
   (:enum-font (create-instance NIL opal:font (:size :small)))
   (:value (o-formula ...))
   (:format-string "~a")       @emph{; How to print the feedback value}          
   (:enum-format-string "~a")  @emph{; How to print the tic-mark values}
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

The loader file for the @code{gauge} is "gauge-loader".

The @code{gauge} object is a semi-circular meter with tic-marks around
the perimeter. As with scroll bars and sliders, this object allows
the user to specify a value between minimum and maximum values. A
needle points to the currently chosen value, and may either be a bare
arrow or a thick, arrow-shaped polygon with a gray filling. The
needle may be rotated by dragging it with the left mouse button
pressed. Text below the gauge reports the current value to which the
needle is pointing.

If the slot @code{:polygon-needle-p} is T, then the needle will be thick
with a gray filling. If @code{nil}, then the needle will be a bare arrow.

If @code{:int-feedback-p} is T, then the needle will not follow the
mouse directly, but instead a short line will appear and be rotated.
When the mouse button is released, the large needle will swing over to
rest at the new location. The needle will follow the mouse directly
if @code{:int-feedback-p} is set to @code{nil}.

The slots @code{:num-marks}, @code{:tic-marks-p}, @code{:enumerate-p}, @code{:val-1},
@code{:val-2}, and @code{:enum-font} are implemented as in the sliders
(see section @ref{sliders}). The value in @code{:val-1} corresponds to
the right side of the gauge.

The title of the gauge is specified in @code{:title}. No title will
appear if @code{:title} is @code{nil}. The fonts for the title of the gauge
and the current chosen value are specified in @code{:title-font} and
@code{:value-font}, respectively.

If @code{:value-feedback-p} is T, then numerical text will appear below the
gauge indicating the currently chosen value. The value in @code{:text-offset}
determines the distance between the gauge and the title string, and between
the title string and the value feedback.

The @code{:format-string} and @code{:enum-format-string} slots allow you to
control the formatting of the text strings, in case the standard formatting
is not appropriate. This is mainly useful for floating point numbers.
The slots should each contain a string that can be passed to the lisp function
@code{format}. The default string is @code{"~a"}.



@section Buttons
@node Buttons
@cindex{buttons}
@anchor{buttons}

The button objects in the Garnet Gadgets can be either a single
stand-alone button, or a panel of buttons. Each button in the set is
related to the others by common interactors and constraints on both
the sizes of the buttons and the text beside (or inside) the buttons.

The button objects all have several common features.

@enumerate
When used as a panel, the buttons are implemented
with aggrelists, so all slots that can be customized in an aggrelist
can be customized in the button panels.@footnote{See the Aggregadgets
chapter for greater detail.}  These slots are:
@cindex{aggrelists}
@vtable @code
@code{:direction} --- @code{:vertical} or @code{:horizontal} (default @code{:vertical})

@code{:v-spacing} --- distance between buttons, if vertical orientation (default 5)

@code{:h-spacing} --- same, if horizontal orientation

@code{:fixed-width-p} --- whether all the buttons should have the width of
the value in @code{:fixed-width-size}, or the width of each button
should be determined by the width of the string associated with that
button (default T)

@code{:fixed-height-p} --- same, but with heights

@code{:fixed-width-size} --- width of all components (default is the width
of the widest button, as determined by the widest string)

@code{:fixed-height-size} --- same, but with heights

@code{:h-align} --- How to align buttons, if vertical orientation.
Allowed values are @code{:left}, @code{:center}, or @code{:right}. (default
@code{:right} for radio-buttons and x-buttons, @code{:center} for
text-buttons)

@code{:rank-margin} --- after this many buttons, a new row (or column)
will be started (default @code{nil})

@code{:pixel-margin} --- absolute position in pixels after which a new row
(or column) will be started (default @code{nil})

@code{:indent} --- amount to indent the new row (or column) in pixels
(default 0)
@end vtable

In the button and menu objects, the @code{:value} slot contains to the
string or atom of the currently selected item (in the
@code{x-button-panel} this value is a list of selected items). The
currently selected object is named in the @code{:value-obj} slot. In
order to set an item to be selected, either the @code{:value} slot of
the button panel must be set with the desired string or atom from the
@code{:items} list, or the @code{:value-obj} slot must be set with the
desired button object (see section @ref{sel-buttons} for examples of
selecting buttons).
@cindex{value slot}
@cindex{value-obj}

The @code{:width} of the buttons is determined by the width of the
longest item, and therefore cannot be specified by the designer.
However, the @code{:width} is computed internally and may be accessed
after the object is instantiated. (The :height is computed
similarly.)

The shadow below each button has the effect of simulating a floating
three-dimensional button. When the left mouse button is clicked on
one of the gadget buttons, the button frame moves onto the shadow and
appears to be depressed. The slot @code{:shadow-offset} specifies the
amount of shadow that appears under the button when it is not pressed.
A value of zero implies that no shadow will appear (i.e., no floating
effect).

There is a gray border in the frame of each of the buttons, the width
of which may be specified in the slot @code{:gray-width}.

The strings or atoms associated with each button are specified in the
@code{:items} slot. See section @ref{items-slot} for a discussion of
specifying items and item functions.
@cindex{items slot}
@cindex{item functions}

The font in which the button labels appear may be specified in the
@code{:font} slot.

Most of the buttons and button panels have a @code{:toggle-p} slot.
When the value of this slot is T, then the button will become
deselected if it is clicked a second time. Otherwise, after the
button is selected the first time, it is always selected (though its
@code{:selection-function} and associated item functions will continue
to be executed each time it is pressed.
@end enumerate

@float Figure, fig:ex2
@center @image{button-pix, 5.5in}
@caption{Text buttons, radio buttons, and x-buttons}
@anchor{button-pix}
@end float
@cindex{buttons}

@subsection Text Buttons
@node Text Buttons
@anchor{text-buttons}
@cindex{text-button}
@example
(create-instance 'gg:Text-Button opal:aggregadget
   (:maybe-constant '(:left :top :shadow-offset :text-offset :gray-width
		      :string :toggle-p :font :final-feedback-p :visible))
   (:left 0)
   (:top 0)
   (:shadow-offset 10)
   (:text-offset 5)
   (:gray-width 5)
   (:string "Text Button")
   (:toggle-p T)
   (:font opal:default-font)
   (:final-feedback-p T)
   (:value (o-formula (if (gvl :selected) (gvl :string))))
   (:selected (o-formula (gvl :value)))   ; @emph{ This slot is set by the interactor}
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example
@sp 1

@cindex{text-button-panel}
@example
(create-instance 'gg:Text-Button-Panel opal:aggregadget
   (:maybe-constant '(:left :top :direction :v-spacing :h-spacing :h-align
		      :fixed-width-p :fixed-width-size :fixed-height-p
		      :fixed-height-size :indent :rank-margin :pixel-margin
		      :shadow-offset :text-offset :gray-width :final-feedback-p
		      :toggle-p :font :items :visible))
   (:left 0)
   (:top 0)
   (:shadow-offset 10)
   (:text-offset 5)
   (:gray-width 5)
   (:final-feedback-p T)
   (:toggle-p NIL)
   (:font opal:default-font)
   (:items '("Text 1" "Text 2" "Text 3" "Text 4"))
   (:value-obj NIL)
   (:value (o-formula (gvl :value-obj :string)))
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   <All customizable slots of an aggrelist>)
@end example

@sp 1
The loader file for the @code{text-button} and
@code{text-button-panel} is "text-buttons-loader".

The @code{text-button-panel} object is a set of rectangular buttons,
with the string or atom associated with each button centered inside.
When a button is pressed, the text of the button will appear in
inverse video if @code{:final-feedback-p} is T. The @code{text-button} is
just a single button.

The distance from the beginning of the longest label to the inside
edge of the button frame is specified in @code{:text-offset}. The value
in @code{:text-offset} will affect the height and width of every button
when specified.

@subsection X Buttons
@node X Buttons
@anchor{x-buttons}
@cindex{x-button}
@example
(create-instance 'gg:X-Button opal:aggregadget
   (:maybe-constant '(:left :top :button-width :button-height
		      :shadow-offset :text-offset :gray-width
		      :text-on-left-p :toggle-p :string :font :visible))
   (:left 0)
   (:top 0)
   (:button-width 20)
   (:button-height 20)
   (:shadow-offset 5)
   (:text-offset 5)
   (:gray-width 3)
   (:text-on-left-p T)
   (:string "X Button")
   (:toggle-p T)
   (:font opal:default-font)
   (:value (o-formula (if (gvl :selected) (gvl :string))))
   (:selected (o-formula (gvl :value))) @emph{; Set by interactor}
   (:selection-function NIL)            @emph{; (lambda (gadget value))}
   )
@end example
@sp 1

@cindex{x-button-panel}
@example
(create-instance 'gg:X-Button-Panel opal:aggregadget
   (:maybe-constant '(:left :top :direction :v-spacing :h-spacing :h-align
		      :fixed-width-p :fixed-width-size :fixed-height-p :fixed-height-size
                      :indent :rank-margin :pixel-margin :button-width :button-height
                      :shadow-offset :text-offset :gray-width :text-on-left-p
		      :font :items :visible))
   (:left 0)
   (:top 0)
   (:button-width 20)
   (:button-height 20)
   (:shadow-offset 5)
   (:text-offset 5)
   (:gray-width 3)
   (:text-on-left-p T)
   (:font opal:default-font)
   (:items '("X-label 1" "X-label 2" "X-label 3"))
   (:value-obj NIL)
   (:value (o-formula (mapcar #'(lambda (object)
				  (gv object :string))
			      (gvl :value-obj))))
   (:selection-function NIL)  @emph{; (lambda (gadget value))}
   <All customizable slots of an aggrelist>)
@end example

@sp 1
The loader file for the @code{x-button} and @code{x-button-panel} is
"x-buttons-loader".

The @code{x-button-panel} object is also a set of rectangular buttons,
but the item associated with each button appears either to the left or
to the right of the button. Any number of buttons may be selected at
one time, and clicking on a selected button de-selects it. Currently
selected buttons are graphically indicated by the presence of a large
"X" in the button frames. The @code{x-button} is just a single button.

Since the @code{x-button-panel} allows selection of several items at
once, the @code{:value} slot is a list of strings (or atoms), rather
than a single string. Similarly, @code{:value-obj} is a list of
objects.

The slot @code{:text-on-left-p} specifies whether the text will appear
on the right or left of the x-buttons. A @code{nil} value indicates the text
should appear on the right. When text appears on the right, the designer
will probably want to set @code{:h-align} to @code{:left} in order to left-justify
the text against the buttons.

The distance from the labels to the buttons is specified in
@code{:text-offset}.

The slots @code{:button-width} and @code{:button-height} specify the width
and height of the x-buttons. The "X" will stretch to accommodate
these dimensions.

@subsection Radio Buttons
@node Radio Buttons
@anchor{radio-buttons}
@cindex{radio-button}
@example
(create-instance 'gg:Radio-Button opal:aggregadget
   (:maybe-constant '(:left :top :button-diameter :shadow-offset :text-offset
                      :gray-width :string :text-on-left-p :toggle-p :font :visible))
   (:left 0) (:top 0)
   (:button-diameter 23)
   (:shadow-offset 5) (:text-offset 5) (:gray-width 3)
   (:string "Radio button")
   (:toggle-p T)
   (:text-on-left-p T)
   (:font opal:default-font)
   (:value (o-formula (if (gvl :selected) (gvl :string))))
   (:selected (o-formula (gvl :value))) @emph{; Set by interactor}
   (:selection-function NIL)            @emph{; (lambda (gadget value))}
   )
@end example
@sp 1

@cindex{radio-button-panel}
@example
(create-instance 'gg:Radio-Button-Panel opal:aggregadget
   (:maybe-constant '(:left :top :direction :v-spacing :h-spacing :h-align
                      :fixed-width-p :fixed-width-size :fixed-height-p :fixed-height-size
                      :indent :rank-margin :pixel-margin :button-diameter :shadow-offset
                      :text-offset :gray-width :text-on-left-p :toggle-p :font
                      :items :visible))
   (:left 0)
   (:top 0)
   (:button-diameter 23)
   (:shadow-offset 5)
   (:text-offset 5)
   (:gray-width 3)
   (:text-on-left-p T)
   (:toggle-p T)
   (:font opal:default-font)
   (:items '("Radio-text 1" "Radio-text 2" "Radio-text 3" "Radio-text 4"))
   (:value-obj NIL)
   (:value (o-formula (gvl :value-obj :string)))
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   <All customizable slots of an aggrelist>)
@end example

@sp 1
The loader file for the @code{radio-button} and @code{radio-button-panel} is
"radio-buttons-loader".

The @code{radio-button-panel} is a set of circular buttons with items
appearing to either the left or right of the buttons (implementation
of @code{:text-on-left-p} and @code{:text-offset} is identical to
x-buttons). Only one button may be selected at a time, with an
inverse circle indicating the currently selected button. A
@code{radio-button} is a single button.


@section Option Button
@node Option Button
@anchor{option-button}
@cindex{option-button}

@example
(create-instance 'gg:Option-Button opal:aggregadget
  (:maybe-constant '(:left :top :text-offset :label :button-offset :button-shadow-offset
                     :items :initial-item :button-font :label-font :button-fixed-width-p
                     :v-spacing :keep-menu-in-screen-p :menu-h-align))
  (:left 40) (:top 40)
  (:text-offset 4)
  (:label "Option button:")
  (:button-offset 10)
  (:button-shadow-offset 5)
  (:items '("Item 1" "Item 2" "Item 3" "Item 4"))
  (:initial-item (o-formula (first (gvl :items))))
  (:button-font opal:default-font)
  (:label-font (opal:get-standard-font NIL :bold NIL))
  (:value (o-formula (gvl :option-text-button :string)))
  (:button-fixed-width-p T)
  (:v-spacing 0)
  (:menu-h-align :left)
  (:keep-menu-in-screen-p T)
  (:selection-function NIL)   @emph{; (lambda (gadget value))}
  ...)
@end example

@float Figure, fig:ex2
@center @image{option-button-normal, 5.5in}

@center @image{option-button-pressed, 5.5in}


@caption{An option button in its normal state (left), and showing the
available options after the button is pressed (right).}
@anchor{option-button-tag}
@end float

The loader file for the @code{option-button} is "option-button-loader".

When the left mouse button
is clicked and held on an option button, a menu will pop up, from
which items can be selected by moving the pointer to the desired item
and releasing the mouse button.
Figure @ref{option-button-tag} shows an option button in its normal
state (on the left) and when the button is pressed.

The @code{:items} slot is a list of strings or Garnet objects, which will
appear in the menu. The @code{:initial-item} slot contains the initial item
that will appear in the button. This slot MUST be non-NIL, and should contain
either an element of the @code{:items} list, or a formula to calculate the same.

The @code{:text-offset} slot specifies how far from the frame the text should
begin. The slot @code{:button-offset} specifies how far from the label the
button should begin. The @code{:button-shadow-offset} contains the size of the
button's shadow.

The @code{:label} slot contains a string that appears before the option
button. If no label is desired, this slot can be set to the empty string, "".

The @code{:button-font} and @code{:label-font} slots specify the fonts to use
in the button and the label. The font of the items in the menu is the
same as the font in the @code{:button-font} slot.

The @code{:value} slot contains the currently selected item, which is the
same as the value in the @code{:string} slot of the button.

The @code{:button-fixed-width-p} slot specifies whether to keep the button's
width constant or not. If it is set to T, the button's width will be
the width of the longest string in the @code{:items} slot. If it is set to
NIL, the width of the button will be the width of the currently
selected item. 

The value in @code{:v-spacing} specifies the amount of space between each menu
item.

The @code{:menu-h-align} slot should be either @code{:left}, @code{:center}, or
@code{:right}, and specifies the justification of the menu items.

If the @code{:keep-menu-in-screen-p} slot is T, then the menu will never pop
out of the screen, i.e., the top of the menu will never be less than
the screen's top, and the bottom of the menu will never be greater
than the screen's bottom. If this slot is set to @code{nil}, the menu may
pop out of the top or out of the bottom of the screen.
NOTE: If the number of items in the menu makes it so that both the top
of the menu and the bottom of the menu are out of the screen, this
slot will be disregarded.



@section Popup-Menu-Button
@node Popup-Menu-Button
@anchor{popup-menu-button}
@cindex{popup-menu-button}
@center @image{popupmenubutton, 5.5in}

@example
(create-instance 'gg:Popup-Menu-Button gg:text-button
  (:left 0)
  (:top 0)
  (:string gg:lines-bitmap)
  (:items '("Item 1" "Item 2" "Item 3" "Item 4"))
  (:v-spacing 0)
  (:h-align :LEFT)
  (:item-font opal:default-font)
  (:item-to-string-function
   #'(lambda (item)
       (if item
	   (if (or (stringp item) (schema-p item))
	       item
	       (string-capitalize (string-trim ":" item)))
	   "")))
  (:min-menu-width 0) 
  (:shadow-offset 2)
  (:text-offset 3)
  (:gray-width 2)
  (:selection-function NIL)   @emph{; (lambda (gadget value))}
  (:value (o-formula ...))
  (:position :below)
  (:keep-menu-in-screen-p T)
@end example

The loader file for the @code{popup-menu-button} is
@code{popup-menu-button-loader}, and you can see a demo by executing
@code{(gg:popup-menu-button-go)}. (Sorry, there isn't a Motif version
yet.)

This is a combination of a button and a popup menu. When you press on
the button, the menu is shown, and then you can select something from
the menu, and then the menu disappears. If you release outside of the
menu, the menu just goes away and keeps its current value. The button
itself can show a string or an arbitrary Garnet object (e.g., a
bitmap, as shown here).

The @code{:left} and @code{:top} determine when the button goes.

@cindex{lines-bitmap}
@cindex{downarrow-bitmap}
The @code{:string} slot determines what is shown in the button. It can
be a regular string (e.g., @code{"Value"}) or an arbitrary Garnet
object. The default value is the @code{gg:lines-bitmap} shown above.
Another bitmap provided is @code{gg:downarrow-bitmap} which looks like
@center @image{downarrowpopup, 5.5in}

The @code{:items} slot holds the items that are shown in the popup menu.
It can have the standard format for items (e.g., a list of strings,
objects, pairs of strings and functions, etc.). See section @ref{items-slot}
for more information.

The @code{:v-spacing, :h-align,} and @code{:item-font} control the display
of the menu items. See the Gadgets chapter for menus for more information.

The @code{:min-menu-width} slot can contain a minimum width for the popup menu.
You might use this to make the menu line up with a text entry field.

The @code{:item-to-string-function} can be used to convert the values in
the @code{:items} list into strings.

The @code{:shadow-offset}, @code{:text-offset} and @code{:gray-width}
parameters control the appearance of the button itself.

When the user selects a menu item, the @code{:selection-function} is
called with parameters:@* @code{(lambda (gadget value))}, where the gadget is
the popup-menu-button and the value is the appropriate item from
@code{:items}. The @code{:value} slot will also be set with the
appropriate item.

The position of the menu with respect to the button is controlled by
the @code{:position} parameter. Legal options are:
@vtable @code
@code{:below} - the menu is below and left justified with the button
(the default).

@code{:left} - the menu will be centered vertically at the left of the button.

@code{:right} - the menu will be centered vertically at the right of the button.

a list of two numbers (x y) - the menu will be at this location. The
@code{:position} slot can contain a formula that calculates these
numbers.
@end vtable

If @code{:keep-menu-in-screen-p} is non-NIL, then the position computed
based on the @code{:position} argument will be adjusted so the menu
always stays in the screen. Otherwise, the menu might extend off the
screen edges.



@section Menu
@node Menu
@anchor{menu}
@cindex{Menu}
@example
(create-instance 'gg:Menu opal:aggregadget
   (:maybe-constant '(:left :top :v-spacing :h-align :shadow-offset
		      :text-offset :title :title-font :items :item-font
		      :item-to-string-function :visible))
   (:left 0)
   (:top 0) 
   (:v-spacing 0)
   (:h-align :left)
   (:shadow-offset 5)
   (:text-offset 4)
   (:min-menu-width 0)
   (:title NIL)
   (:title-font (create-instance NIL opal:font
                   (:family :serif)
		   (:size :large)
		   (:face :roman)))
   (:items '("Item 1" "Item 2" "Item 3" "Item 4"))
   (:item-font opal:default-font)
   (:item-to-string-function #'(lambda (item)
				 (if item
				     (if (or (stringp item) (schema-p item))
					 item
				       (string-capitalize (string-trim ":" item)))
				   "")))
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   (:value-obj NIL)
   (:value (o-formula (gvl :value-obj :string))))
@end example


@center @image{menu-pix, 5.5in}

The loader file for the @code{menu} is "menu-loader".

The @code{menu} object is a set of text items surrounded by a
rectangular frame, with an optional title above the items in inverse
video. When an item is selected, a box is momentarily drawn around
the item and associated item functions and global functions are
executed.

The @code{:items} slot may be a list of strings, atoms, string/function
pairs or atom/function pairs, as with buttons (see section
@ref{buttons}). If this slot is @code{s-value}'d with a new list of items,
the components of the gadget will be adjusted automatically during the next
call to @code{opal:update}.

The amount of shadow that appears below the menu frame (the menu frame
is stationary) is specified in @code{:shadow-offset}. A value of zero
implies that no shadow will appear.

The slot @code{:h-align} determines how the menu items are justified in
the frame. Allowed values are @code{:left}, @code{:center} and
@code{:right}.

The slot @code{:text-offset} is the margin spacing -- the distance from
the frame to the longest string.

The slot @code{:item-font} determines the font in which the items will
appear.

A title for the menu may be specified as a string in the @code{:title}
slot. If @code{:title} is @code{nil}, then no title will appear. The font in
which the title should appear is specified in @code{:title-font}.


@cindex{item-to-string-function} The @code{:items} slot may be a list of
any objects, including strings, atoms, schemas, string/function pairs,
etc. The default scrolling menu assumes that @code{:items} contains a
list as described in section @ref{buttons}, but this can be easily
changed by the designer. A function defined in
@code{:item-to-string-function} takes an item (or the first element of
an item pair) and returns a string corresponding to that item for
display in the menu. The default function for this slot is

@example
(lambda (item)
  (if item
      (if (stringp item)
	  item
	  (string-capitalize (string-trim ":" item)))
      ""))
@end example

This function takes an item and returns it if it is a string, or
coerces it into a string if it was an atom. See section @ref{sm-ex}
for an example where the @code{:items} list is composed of Garnet
schemas.

@section Scrolling Menu
@node Scrolling Menu
@anchor{scrolling-menu}
@cindex{Scrolling menu}
@center @image{scrolling-menu-pix, 5.5in}

@example

(create-instance 'gg:Scrolling-Menu opal:aggregadget
   (:maybe-constant '(:left :top :scroll-on-left-p :min-scroll-bar-width :scr-trill-p
                      :page-trill-p :indicator-text-p :scr-incr :page-incr
                      :int-scroll-feedback-p :indicator-font :min-frame-width :v-spacing
                      :h-align :multiple-p :items :item-to-string-function :item-font
                      :num-visible :int-menu-feedback-p :final-feedback-p :text-offset
                      :title :title-font :visible))
   (:left 0) (:top 0)

   @emph{;; Scroll bar slots}
   (:scroll-on-left-p T)
   (:min-scroll-bar-width 20)
   (:scr-trill-p T)
   (:page-trill-p T)
   (:indicator-text-p NIL)
   (:scr-incr 1)
   (:page-incr 5)
   (:int-scroll-feedback-p NIL)
   (:indicator-font (create-instance NIL opal:font (:size :small)))
   (:scroll-selection-function NIL)

   @emph{;; Menu slots}
   (:min-frame-width 0)
   (:v-spacing 6)
   (:h-align :left)
   (:multiple-p T)
   (:toggle-p T)
   (:items '("Item 1" "Item 2" "Item 3" ... "Item 20"))
   (:item-to-string-function
       #'(lambda (item)
           (if item
               (if (stringp item)
                   item
                   (string-capitalize (string-trim ":" item)))
               "")))
   (:item-font opal:default-font)
   (:num-visible 5)
   (:int-menu-feedback-p T)
   (:final-feedback-p T)
   (:text-offset 4)
   (:title NIL)
   (:title-font (create-instance NIL opal:font
		   (:family :serif)
		   (:size :large)
		   (:face :roman)))
   (:menu-selection-function NIL)
   (:selected-ranks NIL)
   (:value (o-formula ...)))
@end example

The loader file for the @code{scrolling-menu} gadget is "scrolling-menu-loader".

The @code{scrolling-menu} object is a combination of a vertical scroll
bar and a menu which allows the user to only see a subset of the
available choices in a menu at one time. The set of visible choices
is changed by moving the scroll bar, which causes the choices to
scroll up or down in the menu.

@subsection Scroll Bar Control
@node Scroll Bar ControlIf the slot @code{:scroll-on-left-p} is
T, then the scroll bar will appear on the left side of the menu.
Otherwise, the scroll bar will be on the right.

The slot @code{:min-scroll-bar-width} determines the minimum width of
the scroll bar. The scroll bar will be wider than this width only if
the indicator text is too wide to fit into this width.

The interim feedback of the scroll bar is controlled by the slot
@code{:int-scroll-feedback-p}. If this slot is set to T, then a
thick-lined box will follow the mouse when the user drags the
indicator. Otherwise, the indicator will follow the mouse directly.

A function may be specified in @code{:scroll-selection-function} to be
executed whenever the user changes the scroll bar, either by clicking
on the trill boxes or by dragging the indicator. The function takes
the same parameters as the usual selection function described in
section @ref{sel-fn}.

The slots @code{:scr-trill-p}, @code{:page-trill-p}, @code{:scr-incr},
@code{:page-incr}, @code{:indicator-text-p}, and @code{:indicator-font} are
all used for the scroll bar in the scrolling menu in the same way as
the vertical scroll bar described in section @ref{scroll-bars}.

@subsection Menu Control
@node Menu ControlThe minimum width of the scrolling menu
frame is determined by @code{:min-frame-width}. The scrolling menu will
appear wider than this value only if the title or the longest item
string will not fit in a menu of this width.

The @code{:v-spacing} slot determines the distance between each item in
the menu.

The justification of the items in the menu is determined by the slot
@code{:h-align} which may be either @code{:left}, @code{:center}, or
@code{:right}.

If the value of @code{:multiple-p} is T, then the user may make multiple
selections in the menu by clicking on items while holding down the
shift key. If this slot is @code{nil}, then only single selections are
permitted.

The @code{:toggle-p} slot specifies whether to toggle the current selection when
it is clicked on again. If @code{:toggle-p} is @code{nil}, then a selected item can
be clicked upon for any number of times and it will stay selected. If the
@code{:toggle-p} slot is set to T (the default), clicking on an already selected
item will cause the item to become unselected. NOTE: Clicking on a selected
item while doing multiple selections will always toggle the selection,
regardless of the value of the @code{:toggle-p} slot.

The @code{:item-to-string-function} slot is identical in operation to the one
described for the @code{gg:menu} in section @ref{menu}.
If the @code{:items} slot does not contain a list of the usual items or
item/function pairs, then this function should return the conversion of each
element into a valid item.
The default @code{:item-to-string-function} assumes that the @code{:items} list
is composed of the usual items or item/function pairs.

The slot @code{:num-visible} determines how many items should be visible
in the menu at one time.

A box will appear around the item being selected while the mouse
button is held down if the slot @code{:int-menu-feedback-p} is T.

Selected items will appear in inverse video if the slot
@code{:final-feedback-p} is set to T.

The slot @code{:text-offset} determines the distance from each string to
the menu frame.

A title will appear above the menu if a title string is specified in
@code{:title}. If @code{:title} is @code{nil}, then no title will appear. The
font of the title is in @code{:title-font}.

The font of the items is in @code{:item-font}.

The @code{:selected-ranks} slot is used by the designer to select items
in the menu. The slot contains a list of indices which correspond to
the ranks of the selected items in the @code{:items} list. The ranks
are zero-based. For example, if the @code{:selected-ranks} slot
contained @code{'(0 3)}, then the first and fourth items (not
necessarily visible) in the scrolling menu will be selected.

A function defined in @code{:menu-selection-function} will be executed
whenever the user selects an item from the menu. This function takes
two parameters,
@example
(lambda (gadget scrolling-menu-item))
@end example
 where @emph{gadget} is the programmer's instance of
the @code{scrolling-menu} and @emph{scrolling-menu-item} is the object just
selected by the user. The item associated with the user's selection
can be obtained through the @code{:item} slot of the
@emph{scrolling-menu-item}:
@example
(gv scrolling-menu-item :item) @emph{--> The item just selected}
@end example


@section Menubar
@node Menubar
@anchor{menubar}
@cindex{pull-down menus}
@cindex{menubar}
@cindex{bar-item}
@cindex{submenu-item}

@example
(create-instance 'gg:Menubar opal:aggrelist
   (:left 0)(:top 0)
   (:items NIL)
   (:title-font (create-instance NIL opal:font (:size :large)))
   (:item-font (create-instance NIL opal:font (:face :italic)))
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

@float Figure, fig:ex2
@center @image{menubar-pix, 5.5in}
@caption{Picture of a pull-down menu (an instance of @code{menubar})}
@anchor{menubar-pix-1}
@end float

The @code{menubar} gadget is a set of pull down menus that is similar to
the Macintosh design. When the user clicks on an inverse bar item,
a submenu pops up and the user can then choose one of the displayed
items.

@b{NOTE:}  There is no @code{:value} slot in this gadget. The designer should
define functions in the @code{:selection-function} or @code{:items} slots to
propagate the user's selections to the rest of the interface (see below).

The complete @code{menubar} gadget is a collection of three objects.
In addition to the top-level @code{menubar} object, there are @code{bar-item}
and @code{submenu-item} objects. The @code{menubar} is an aggrelist of
@code{bar-item} objects, which are the inverse-video text objects that appear
horizontally at the top of the window. The @code{submenu-item} objects are
vertically arranged in an aggrelist within each @code{bar-item}. 

The programmer may approach the @code{menubar} from two perspectives:  the
traditional Garnet way which involves setting the @code{:items} slot and allowing
the gadget to maintain its own components, or from a bottom-up approach which
involves creating the sub-objects and chapterly adding (and removing) them
from the @code{menubar} instance.

Programmers who choose the Garnet approach can ignore most of the functions
described below, since interaction with the @code{menubar} will
almost exclusively involve setting the @code{:items} slot. The other approach
requires creating instances of @code{bar-item} and @code{submenu-item} gadgets
and adding them as components to a @code{menubar} using the support functions.


@subsection Item Selection Functions
@node Item Selection Functions
@anchor{item-selection-functions}

There are three levels of functions in the @code{menubar} gadget that may be
called when the user makes a selection. Functions
can be attached to individual submenu-items, whole submenus, or the top-level
@code{menubar}. All three types of functions take the parameters
@code{(lambda (gadget menu-item submenu-item))}

When a function is supplied in the @code{:selection-function} slot of the
@code{menubar}, it will be executed whenever any item is selected from any
of the submenus. If a function is attached to a submenu (e.g., it is the
value for @emph{m1func} in the @code{:items} syntax of section
@ref{garnet-menubar-programming}), then it is executed when any item is
chosen from that submenu. If a function is attached to a submenu-item
(e.g., @emph{mX,Yfunc}), then it is executed only when that submenu-item is
selected.

The order for calling these functions is:  first, the submenu function is
called, then the submenu-item function is called, and finally the
@code{:selection-function} is called.



@subsection Programming the Menubar in the Traditional Garnet Way
@node Programming the Menubar in the Traditional Garnet Way
@anchor{garnet-menubar-programming}

The @code{:items} slot of the @code{menubar} is a complicated list with the
following format:
@example
(:items '(("m1" m1func (("m1,1" [m1,1func])...("m1,N" [m1,Nfunc])))
          ("m2" m2func (("m2,1" [m2,1func])...("m2,N" [m2,Nfunc])))
          ...))
@end example
where @emph{"mN"} is a string or atom that is the title of a menu (atoms 
appear as capitalized strings in the submenu titles),
@emph{"mX,Y"}
is a string or atom in menu X, row Y, @emph{mNfunc} is executed when any item in
menu N is selected, and @emph{mX,Yfunc} is executed when item @emph{"mX,Y"} is
selected. See section @ref{item-selection-functions} for the parameters of
these functions. NOTE:  the syntax above requires that the submenu-items be
described with lists, even when no submenu-item functions are supplied (i.e.,
the list @code{("m1,1")} is required instead of just the string @code{"m1,1"}).

In order to maintain the syntax of the sublists, the submenu functions
(@emph{m1func} and @emph{m2func} above) must always be supplied.
Thus, @code{nil} should be placed in this position if no function is
to be executed for the submenu. The submenu-item functions (@emph{m1,1func} etc.
above) are optional and may be omitted.

The @code{:title-font} is the font for the @code{bar-item} objects which appear
in inverse video, and the @code{:item-font} is the font for the
@code{submenu-item} objects arranged vertically in the pop-up menus.


@subsection An example
@node An example

@float Figure, fig:ex2
@example

(create-instance 'WIN inter:interactor-window
   (:left 750)(:top 80)(:width 200)(:height 200)
   (:title "Menubar Example"))
(s-value WIN :aggregate (create-instance 'TOP-AGG opal:aggregate))
(opal:update win)

(defun Fixed-Fn (gadget menu-item submenu-item)
  (format t "Calling Fixed-Fn with ~S ~S ~S.~%" gadget menu-item submenu-item))

(defun Face-Fn (gadget menu-item submenu-item)
  (format t "Calling Face-Fn with ~S ~S ~S.~%" gadget menu-item submenu-item))

(create-instance 'DEMO-MENUBAR garnet-gadgets:menubar
   (:items
    '(("family" NIL
       (("fixed" Fixed-Fn)("serif")("sans-serif")))
      ("face" Face-Fn
       (("roman")("bold")("italic")("bold-italic")))
      ("size" NIL
       (("small")("medium")("large")("very-large"))))))

(opal:add-component TOP-AGG DEMO-MENUBAR)
(opal:update win)

@end example
@caption{The code to generate the picture in Figure @ref{menubar-pix-1}}
@anchor{menubar-code-1}
@end float

The code in Figure @ref{menubar-code-1} creates the @code{menubar} picture
shown in Figure @ref{menubar-pix-1}. It illustrates the Garnet method for
handling the @code{menubar} gadget.

@subsection Adding items to the menubar
@node Adding items to the menubar
@cindex{Add-item", Secondary="Menubar}
@cindex{add-submenu-item}

There are two types of items that can be added to a @code{menubar}:  an entire
submenu can be added to the top-level @code{menubar}, or single submenu-item can
be added to a submenu.

The @code{add-item} method for the @code{menubar} can be used to add submenus --
@code{opal:Add-Item @i{menubar submenu} [[:where] @i{position [locator]} [:key @i{index-function}]]@ref{method}}
Using the standard Garnet method, the @emph{submenu}
parameter should be a sublist of a top-level items list,
@* (e.g., @code{'("underline" NIL (("none") ("single") ("double")))}.
The remaining
optional parameters follow the standard @code{add-item} definition described in
the Aggregadgets chapter, and refer to the placement of the new submenu among
the existing submenus. @emph{Locator} should be some element of the current
@emph{:items} list, or may be the title of a submenu when the @emph{index-function}
is @code{#'car} (see examples below).

For example, each of the following lines will add a new submenu to
DEMO-MENUBAR in Figure @ref{menubar-code-1}:
@example
(opal:add-item DEMO-MENUBAR '("font-name" NIL (("courier") ("times") ("geneva"))))
(opal:add-item DEMO-MENUBAR
               '("other-fonts" NIL (("helvetica") ("chicago")))
	       :after '("family" NIL (("fixed" Fixed-Fn)("serif")("sans-serif"))))
(opal:add-item DEMO-MENUBAR
               '("symbols" NIL (("mathematical") ("greek")))
	       :before "face" :key #'car)
@end example

Individual submenu-items can be added to a @code{menubar} with the following
function:
@example
add-submenu-item @i{menubar submenu-title submenu-item} [[:where] @i{position [locator]} [:key @i{index-function}]])
@end example
This function adds the new @emph{submenu-item} to the menubar, and places it in
the submenu named by @emph{submenu-title}. The new @emph{submenu-item} description
should be a list containing a string (or atom) and an optional function
(e.g., @code{'("italic")} or @code{'("italic" italic-fn)}).

For example, the following lines will add new submenu-items to the
DEMO-MENUBAR in Figure @ref{menubar-code-1}:
@example
(garnet-gadgets:add-submenu-item DEMO-MENUBAR "face" '("outline"))
(garnet-gadgets:add-submenu-item DEMO-MENUBAR "size" '("very small")
                                              :before "small" :key #'car)
@end example
As shown in the second example, the @emph{position} and @emph{locator} parameters
should correspond to existing submenu items.


@subsection Removing items from the menubar
@node Removing items from the menubar
@cindex{remove-item}
@cindex{remove-submenu-item}

Just as submenus and submenu-items can be added to the @code{menubar}, these
two types of items can be removed. 

@code{opal:Remove-Item @i{menubar submenu}@ref{method}}
This function removes the @emph{submenu} from @emph{menubar}. For traditional
Garnet programming, the @emph{submenu} should be a sublist of the top-level
@code{:items} list, or just the title of a submenu (a string or atom).

For example, the following lines will remove an item from the DEMO-MENUBAR
in Figure @ref{menubar-code-1}:
@example
(opal:remove-item DEMO-MENUBAR
                  '("face" Face-Fn (("roman")("bold")("italic")("bold-italic"))))
(opal:remove-item DEMO-MENUBAR "size")
@end example

The following function is used to remove submenu-items from a @code{menubar}:

@code{gg:Remove-Submenu-Item @i{menubar submenu-title submenu-item}@ref{function}}
@emph{Submenu-item} may either be the list description of the submenu-item
(i.e., @code{("italic")}) or just the string (or atom) of the submenu-item
(i.e., @code{"italic"}).

For example,
@code{(garnet-gadgets:remove-submenu-item DEMO-MENUBAR "size" "small")}


@subsection Programming the Menubar with Components
@node Programming the Menubar with Components

In the bottom-up approach to programming the @code{menubar}, the user must
create components of the @code{menubar} (i.e., instances of @code{bar-item} and
@code{submenu-item} gadgets) and attach them piece-by-piece. This design is
loosely based on the interface to the Macintosh menubar in Macintosh Common
Lisp. The functions
for creating the components are described in section
@ref{creating-menubar-components}. Section
@ref{adding-menubar-components} explains how to attach these components to
the @code{menubar}.


@subsection An example
@node An example

@float Figure, fig:ex2
@example

(create-instance 'WIN inter:interactor-window
   (:left 750)(:top 80)(:width 200)(:height 200)
   (:title "Menubar Example"))
(s-value WIN :aggregate (create-instance 'TOP-AGG opal:aggregate))
(opal:update win)

@emph{; Create the menubar and the bar-item}
(setf demo-menubar (garnet-gadgets:make-menubar))
(setf mac-bar (garnet-gadgets:make-bar-item :title "Mac Fonts"))

@emph{; Create submenu-items}
(setf sub-1 (garnet-gadgets:make-submenu-item :desc '("Gothic")))
(setf sub-2 (garnet-gadgets:make-submenu-item :desc '("Venice")))
(setf sub-3 (garnet-gadgets:make-submenu-item :desc '("Old English")))

@emph{; Add the submenu-items to the bar-item}
(opal:add-item mac-bar sub-1)
(opal:add-item mac-bar sub-2 :before sub-1)
(opal:add-item mac-bar sub-3 :after "Venice" :key #'car)
	
@emph{; Add the menubar to the top-level aggregate}
(opal:add-component TOP-AGG demo-menubar)

@emph{; Add the bar-item to the menubar and update the window}
(opal:add-item demo-menubar mac-bar)
(opal:update win)

@end example
@caption{The creation of a menubar and its components}
@anchor{menubar-code-2}
@end float

The code in Figure @ref{menubar-code-2} creates a @code{menubar} and several
component pieces, and then attaches the components to the @code{menubar}. This
illustrates the bottom-up approach to programming the @code{menubar}.

Notice that the @code{menubar} instance must be added to the top-level aggregate
before any bar-items are attached. This ensures that the @code{menubar} will
be initialized with the proper main window before new submenu windows are
added.


@subsection Creating components of the menubar
@node Creating components of the menubar
@anchor{creating-menubar-components}

The functions in this section are used to create the three types of components
that comprise a pull-down menu -- the @code{menubar} (the top-level part),
the @code{bar-item} (which contains a submenu), and the @code{submenu-item}.
Once the parts of the pull-down menu are created, they are attached using
the functions of section @ref{adding-menubar-components}. Please see section
@ref{adding-menubar-components} for examples of the creation functions
and attachment functions together.


@defun gg:make-menubar

Returns an instance of @code{menubar}.
@end defun

@cindex{make-bar-item}
@defun gg:make-bar-item &key desc font title
this function returns an instance of @code{bar-item}. If any of the keys are
supplied, then the corresponding slots of the @code{bar-item} instance are
set with those values. The @emph{desc} parameter is the description of a
submenu (e.g., @code{'("underline" NIL (("none")("single")("double")))}).
The @emph{font} is the font of the submenu-items within the submenu, and @emph{title}
is a string or atom that will be the heading of the submenu. If the title was
already specified in the @emph{desc} parameter, then no @emph{title} parameter should
be supplied.
@end defun

@cindex{make-submenu-item}
@defun gg:make-submenu-item &key desc enabled
this function returns an instance of @code{submenu-item}. If any of the
keys are supplied, then the corresponding slots of the @code{submenu-item}
instance are set with those values. The @emph{desc} parameter is the description
of a submenu-item (e.g., @code{'("italic")} or @code{'("italic" italic-fn)}).
The default for @emph{enabled} is T.

@end defun

@subsection Adding components to the menubar
@node Adding components to the menubar
@anchor{adding-menubar-components}

Just as with the traditional Garnet approach, the two types of components
that can be added to the @code{menubar} gadget are instances of the @code{bar-item}
gadget and instances of
the @code{submenu-item} gadget. The @code{add-item} method can be used to add
new bar-items to a menubar, or to add new submenu-items to existing bar-items.
Also, the following @code{Set-...} functions can be used to install a collection
of components all at once.

@cindex{set-menubar}

@defun gg:set-menubar menubar new-bar-items
Removes all current bar-items from @emph{menubar} and installs the
@emph{new-bar-items}. The @emph{new-bar-items} should be a list of @code{bar-item}
instances.
@end defun

@cindex{set-submenu}
@defun gg:Set-Submenu bar-item submenu-items
Sets @emph{bar-item} to have @emph{submenu-items} in its submenu.
@var{Submenu-items} is a list of @code{submenu-item} instances.
@end defun

@cindex{add-item, menubar}

@defmethod opal:add-item menubar bar-item [[:where] position [locator] [:key index-function]]
@defmethodx opal:add-item bar-item submenu-item [[:where] position [locator] [:key index-function]]


The @emph{menubar}, @emph{bar-item}, and @emph{submenu-item} parameters above should be
supplied with objects created by the functions in section
@ref{creating-menubar-components}. The optional parameters follow the
standard @code{add-item} definition described in the Aggregadgets chapter, and
refer to the placement of the new @code{bar-item} among the existing bar-items.
@emph{Locator} may be either an existing @code{menubar} component,
or some element of the @code{:items} list (like a submenu-title) used together
with the @emph{index-function} (see below).

After creating three @code{bar-item} instances, the example below shows how
the bar-items can be attached as components to a @code{menubar}.

@example
(setf bar1 (garnet-gadgets:make-bar-item
             :desc '("font-name" NIL (("courier") ("times") ("geneva")))))
(setf bar2 (garnet-gadgets:make-bar-item
             :desc '("other-fonts" NIL (("helvetica") ("chicago")))))
(setf bar3 (garnet-gadgets:make-bar-item
             :desc '("symbols" NIL (("mathematical") ("greek")))))
(opal:add-item DEMO-MENUBAR bar1)
(opal:add-item DEMO-MENUBAR bar2 :after "family" :key #'car)
(opal:add-item DEMO-MENUBAR bar3 :after bar2)
@end example

The following instructions show how submenu-items can be attached to
oa @code{bar-item}. A @code{bar-item} object is first created, and then several
submenu-items are attached to it using @code{add-item}:
@example
(setf mac-bar (garnet-gadgets:make-bar-item :title "Mac Fonts"))
(setf sub-1 (garnet-gadgets:make-submenu-item :desc '("Gothic")))
(setf sub-2 (garnet-gadgets:make-submenu-item :desc '("Venice")))
(setf sub-3 (garnet-gadgets:make-submenu-item :desc '("Old English")))
(opal:add-item mac-bar sub-1)
(opal:add-item mac-bar sub-2 :before sub-1)
(opal:add-item mac-bar sub-3 :after "Venice" :key #'car)
@end example
@end defmethod

@subsection Removing components from the menubar
@node Removing components from the menubar
@cindex{remove-item}

The @code{bar-item} and @code{submenu-item} components can be removed from the
@code{menubar} with the @code{remove-item} method:

@defmethod opal:remove-item menubar bar-item
@defmethodx opal:remove-item bar-item submenu-item

For example, if we have already created a @code{bar-item} called BAR-1 and added
it to DEMO-MENUBAR, then the following line will remove that item:
@code{(opal:remove-item DEMO-MENUBAR bar1)}

The @code{remove-item} method can also be used to remove submenu-items from
bar-items. In order to remove a submenu item from the @code{bar-item}
instance MAC-BAR, the following line can be used (provided SUB-1 is an
existing @code{submenu-item} that was added to MAC-BAR):
@code{(opal:remove-item mac-bar sub-1)}
@end defmethod


@subsection Finding Components of the Menubar
@node Finding Components of the Menubar


@defun gg:Menubar-Components menubar
@defunx gg:submenu-components bar-item

returns a list of @code{submenu-item} instances that are installed in
@emph{bar-item}'s submenu.
@end defun

@defun gg:get-bar-component menubar item
returns the first @code{bar-item} object in @emph{menubar} that corresponds to
@emph{item}. The @emph{item} parameter may be a string or an atom, or one of the
sublists of the @emph{menubar}'s @code{:items} list.
@end defun

@cindex{get-submenu-component}
@defun gg:get-submenu-component bar-item item
returns the first @code{submenu-item} object in @emph{bar-item} that corresponds to
@emph{item}. The @emph{item} parameter may be a string or an atom, or a
string/function pair that describes a @code{submenu-item}.

@end defun

@cindex{find-submenu-component}
@defun gg:find-submenu-component menubar submenu-title submenu-item
similar to @code{get-submenu-component}, except that @code{find-submenu-component}
finds the appropriate @code{bar-item} instance in the given @emph{menubar}.
Returns the @code{submenu-item} object that corresponds to @emph{submenu-item}.
The parameter @emph{submenu-title} should be the string or atom that is the
title of some submenu. @emph{Submenu-item} should be a string or atom, or a
string/function pair that describes a @code{submenu-item} already installed
in @emph{submenu-title}.

@end defun

@subsection Enabling and Disabling Components
@node Enabling and Disabling Components

@cindex{menubar-disable-component}
@defun gg:menubar-disable-component menubar-component
disables @emph{menubar-component}'s interactors and makes its label grayed-out.
The user will not be able to select @emph{menubar-component} while it is
disabled. @emph{Menubar-component} is an instance of @code{bar-item} or
@code{submenu-item}.

@end defun

@cindex{menubar-enable-component}
@defun gg:menubar-enable-component menubar-component
enables @emph{menubar-component}'s interactors and returns its label to solid
text. @emph{Menubar-component} is an instance of @code{bar-item} or
@code{submenu-item}.
@end defun

@cindex{menubar-enabled-p}
@defun gg:menubar-enabled-p menubar-component
Returns T if the @emph{menubar-component} is enabled. @emph{Menubar-component} is
an instance of @code{bar-item} or @code{submenu-item}.
@end defun

@subsection Other Menubar Functions
@node Other Menubar Functions

@cindex{menubar-get-title}
@defun gg:menubar-get-title menubar-component
returns the string or atom associated with @emph{menubar-component}.
The @emph{menubar-component} must be an instance of a @code{bar-item} or
@code{submenu-item} gadget.
@end defun 

@cindex{menubar-set-title}
@defun gg:menubar-set-title menubar-component string
changes the title of @emph{menubar-component} to @emph{string} and, if
@emph{menubar-component} is
installed in a @code{menubar}, sets the @code{:items} slot of the @code{menubar}
appropriately. @emph{Menubar-component} can be either an instance of
@code{bar-item} or @code{submenu-item}. @emph{String} is a string or an
atom, suitable for putting in the @code{:items} slot. Returns @emph{string}.
@end defun

@defun gg:menubar-installed-p menubar-component
Returns @code{nil} if @emph{menubar-component} is not attached to a @code{menubar};
otherwise returns the object it is installed in (either a @code{menubar} or
a @code{bar-item}.
@end defun 


@section Labeled Box
@node Labeled Box
@anchor{labeled-box}
@cindex{Box}
@cindex{Labeled box}
@cindex{String input}
@center @image{labeled-box-pix, 5.5in}

@example
(create-instance 'gg:Labeled-Box opal:aggregadget
   (:maybe-constant '(:left :top :label-offset :field-offset :min-frame-width
                      :label-string :field-font :label-font :visible))
   (:left 0)
   (:top 0)
   (:min-frame-width 10)
   (:label-offset 5)
   (:field-offset 6)
   (:label-string "Label:")
   (:value "Field")
   (:field-font opal:default-font)
   (:label-font (create-instance NIL opal:font (:face :bold)))
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

The loader file for the @code{labeled-box} is "labeled-box-loader".

The @code{labeled-box} gadget is comprised of a dynamic box with text
both inside and to the left of the box. The text to the left of the
box is a permanent label and may not be changed by the user. The text
inside the box may be edited, however, and the width of the box will
grow with the width of the string. As always, the current string
inside the box may be accessed by the top level @code{:value} slot.

The width of the text frame will not fall below @code{:min-frame-width}.

The label to appear beside the box is in @code{:label-string}. The
distance from the label to the left side of the box is specified in
@code{:label-offset}, and the font of the label is in @code{:label-font}.

The distance from the box to the inner text is in @code{:field-offset},
and the font of the inner text is in @code{:field-font}.

@section Scrolling-Input-String
@node Scrolling-Input-String
@anchor{scrolling-input-string}
@cindex{Scrolling-Input-String}

@example
(create-instance 'gg:Scrolling-Input-String opal:aggregadget
   (:maybe-constant '(:left :top :width :font :line-style :visible))
   (:left 0)
   (:top 0)
   (:width 100) ; @i{ The width of the string area in pixels.}
   (:value "Type here") ; @i{The string that will originally appear in the}
			;@i{  box and that will be changed.}
   (:selection-function NIL) ; @i{Function to be executed after editing text}
   (:font opal:default-font) ; @i{**Must be fixed width**}
   (:line-style opal:default-line-style)) ; @emph{line style can be used to set the color of the string}
@end example

@center @image{scrolling-input, 5.5in}

The loader file for the @code{scrolling-input-string} gadget is
"scrolling-input-string-loader".
@cindex{Scrolling-Input-String-loader}

This allows the user to enter a one-line edited string of arbitrary
length, but only requires a fixed area on the screen since if the
string gets too long, it is automatically scrolled left and right as
needed. Three little dots (an ellipsis) are displayed on either side
of the string if any text is not visible on that side.

The user interface is as follows: To start editing, click with the
left mouse button on the string. To stop, hit @code{return}. To abort, hit
@code{^g}. If the string gets to be too large to fit into the
specified width, then the string inside is scrolled left and right so
the cursor is always visible. The cursor can be moved and text
deleted with the usual editing commands (see the Interactors chapter,
page 170).

The top level @code{:value} slot is set with the final value of the
string appearing inside the box. This slot may be set directly to
change the initial value, and formulas may depend on it. A function
may be specified in the @code{:selection-function} slot to be executed
after the field text has changed (i.e., after the carriage return).
Room is left on both sides of the string for a "..." symbol which
shows whether the string has been scrolled or not. Therefore, the
string will not appear exactly at the @code{:left} or extend the full
@code{:width} (since room is left for the ...'s even when they are not
needed).

@section Scrolling-Labeled-Box
@node Scrolling-Labeled-Box
@anchor{scrolling-labeled-box}
@cindex{Scrolling-Labeled-Box}

@example
(create-instance 'gg:Scrolling-Labeled-Box opal:aggregadget
   (:maybe-constant '(:left :top :width :label-offset :field-offset
		      :label-string :field-font :label-font :visible))
   (:left 0) (:top 0)
   (:width 130) ; @emph{The width of the entire area in pixels.}  @emph{This must be big enough}
 	        ; @emph{for the label and at least a few characters of the string!}
   (:value "Field") ; @i{The string that will originally appear in the}
		    ; @i{  box and that will be changed.}
   (:selection-function NIL) ; @i{Function to be executed after editing text}
   (:field-font opal:default-font) ; @emph{**Must be fixed width**}

   (:label-string "Label:") ; @emph{The string that will appear beside the box}
   (:label-offset 5) ; @i{The distance between the label and the box}
   (:field-offset 2) ; @i{The distance between the field text and the box}
   (:label-font (create-instance NIL opal:default-font (:face :bold))))
		     ; @i{The font of the string beside the box, can be variable-width}
@end example

@center @image{scrolling-labeled-box, 5.5in}

The loader file for the @code{scrolling-labeled-box} gadget is
"scrolling-labeled-box-loader".
@cindex{Scrolling-labeled-box-loader}

This is a combination of the @code{scrolling-input} gadget and the
@code{labeled-box} gadget. It has a label and a box around the text. It
operates just like the @code{scrolling-input-string}.


@section Graphics-Selection
@node Graphics-Selection
@anchor{graphics-selection}
@cindex{graphics selection}
@cindex{Selection}

@example
(create-instance 'gg:Graphics-Selection opal:aggregadget
   (:start-where NIL)
   (:start-event :leftdown)
   (:running-where T)
   (:modify-function NIL)
   (:check-line T)
   (:movegrow-boxes-p T)
   (:movegrow-lines-p T)
   (:value NIL)
   (:active-p T)
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

@float Figure, fig:ex2
@center @image{select-rect-pix, 5.5in}
@center @image{select-line-pix, 5.5in}
@caption{Selection of a rectangle and a line with
@code{graphics-selection}}
@anchor{selection-fig}
@end float

@sp 1

The loader file for @code{graphics-selection} is "graphics-loader".

The @code{graphics-selection} object is used to move and change the size of other
graphical objects. (The @code{multi-graphics-selection} can select and
move multiple objects -- see section @ref{multi-gs}.)  When the user
clicks on a graphical object (from a 
set of objects chosen by the designer), the object becomes selected
and small selection squares appear around the perimeter of the object.
The user can then drag the white squares to move the object or drag
the black boxes to change the size of the object. Pressing in the
background (i.e., on no object) causes the currently selected object
to become unselected. Clicking on an object also causes the
previously selected object to become unselected since only one object
may be selected at a time. While moving and growing, if the mouse
goes outside of @code{:running-where} or if the @code{^g} key is pressed,
the operation aborts.

The @code{graphics-selection} gadget should be added as a component to
some aggregate or aggregadget of the larger interface, just like any
other gadget. The objects in the interface that will be affected by the
@code{graphics-selection} gadget are determined by the slots
@code{:start-where} and @code{:running-where}.

The @code{graphics-selection} gadget sets the @code{:box} slot of the object
being moved or grown. This is consistent with the behavior of the
@code{move-grow-interactor}, discussed in the Interactors chapter. Therefore,
you should create your objects with @code{:left}, @code{:top}, @code{:width}, and
@code{:height} formulas that reference the @code{:box} slot.

The @code{:start-where} slot must be given a value to pass to an
interactor to determine which items may be selected. The value must
be one of the valid @code{...-or-none} forms for the interactors
@code{:start-where} slot (see the Interactors chapter for a list of
allowable values).

The @code{:start-event} slot specifies the event that will cause an object
to be selected. The default is @code{:leftdown}, so if the left mouse button
is clicked over an object in the @code{:start-where}, that object will
become selected.

The @code{:running-where} slot is the area in which the objects can move
and grow (see the Interactors chapter for allowable values).

If the @code{:check-line} slot is non-NIL, then the
@code{graphics-selection} gadget will check the @code{:line-p} slot in the
selected object, and if it is non-NIL then the interactor will select
and change the object as a line. Instances of @code{opal:line} and
@code{gg:arrow-line} already have their @code{:line-p} slots set to T.
For other objects that should be selected as lines, the designer must set the
@code{:line-p} slots explicitly (e.g., a composite object like an
@code{arrow-line} is not really a line, though it should be treated like one).

If @code{:movegrow-lines-p} is @code{nil}, then the @code{graphics-selection}
object will not allow a user to drag the selection squares of a line,
and a beep will be issued if the user clicks on a selection square of
a line.

If @code{:movegrow-boxes-p} is @code{nil}, then the @code{graphics-selection
object} will not allow a user to drag the selection squares of a
non-line, and a beep will be issued if the user clicks on a selection
square of a non-line.

The @code{graphics-selection} gadget will be active when the value of its
@code{:active-p} slot is T. To turn off the gadget, set this slot to @code{nil}.

The @code{:selection-function} slot specifies a function to be executed
upon the selection of any object by the user. This function must take
the parameters:
@example
(lambda (gadget-object new-selection))
@end example
The @code{new-selection} parameter may be @code{nil} if no
objects are selected (i.e., the user clicks in the background).

The designer can supply a @code{:modify-function} that will be called
after an object is modified. It takes these parameters:
@example
(lambda (gadget-object selected-object new-points))
@end example
The @code{new-points} will be a list of 4 numbers,
either @code{left,top,width,height} or @code{x1,y1,x2,y2}.


@section Multi-Graphics-Selection
@node Multi-Graphics-Selection
@anchor{multi-gs}
@cindex{multi-graphics-selection}

@example
(create-instance 'gg:Multi-Graphics-Selection opal:aggregadget
  @emph{;; programmer-settable slots}
   (:active-p T)      @emph{;; whether objects can be selected with the gadget}
   (:start-where NIL) @emph{;; supply a valid start-where here}
   (:running-where T) @emph{;; if supplied, then this is the area in which the}
	              @emph{;; objects can move and grow}
   (:selection-function NIL) @emph{;; this is called when the selection changes}
   (:modify-function NIL) @emph{;; called when an object is changed size or position}
   (:check-line T)        @emph{;; whether to check for :line-p in objects}
   (:check-polygon T)     @emph{;; whether to check for :polygon-p in objects}
   (:check-group T)       @emph{;; whether to check for :group-p in objects}
   (:check-grow-p NIL)    @emph{;; whether to check for :grow-p in objects}
   (:check-move-p NIL)    @emph{;; whether to check for :move-p in objects}
   (:move-multiple-p T)   @emph{;; whether to move multiple objects as a group}
   (:grow-multiple-p T)   @emph{;; whether to grow multiple objects as a group}
   (:input-filter NIL)    @emph{;; used by the move-grow-interactor for gridding, etc.}
   (:want-undo NIL)       @emph{;; whether to save information to allow undo}
   (:multiple-select-p T) @emph{;; if T, then multiple objects can be selected.}

   (:other-multi-graphics-selection NIL]  @emph{;; Used when several multi-selection gadgets in}
                                          @emph{;; different windows are working in conjunction.}

   (:allow-component-select NIL)      @emph{;; if T, then pressing with @code{control} will select}
                                      @emph{;; the component under the selected object.}
   (:down-to-component-function gg::Point-To-Comp)  @emph{;; a function that gets the}
                                                    @emph{;; appropriate component out}
                                                    @emph{;; of the object under the mouse.}

  @emph{;; slots the programmer can access}
   (:current-selected-object NIL) @emph{;; set with new selection or object to be moved}
				  @emph{;; or grown before other slots are set.}
   (:value NIL))  @emph{;; current object or objects selected **DO NOT SET**}
@end example

@center @image{multi-selection-pix1, 5.5in}
@center @image{multi-selection-pix2, 5.5in}
@center @image{multi-selection-pix2, 5.5in}

@cindex{multi-selection-loader}
The loader file for @code{multi-graphics-selection} is "multi-selection-loader".

The @code{multi-selection} gadget is somewhat like the @code{graphics-selection}.
The major difference is that multiple objects can be selected and
manipulated by the user, and that the programmer must use a function to set
the @code{:value} slot. Another difference is the way that the gadget
checks whether move and grow is allowed.

This gadget exhibits the following features:

@itemize
   Given a list of graphical objects, the @code{multi-graphics-selection}
   aggregadget will cause selection squares to appear on the
   bounding box of selected objects.

   One or more objects may be selected at a time, even when the
   objects are in different windows.

   A built-in interactor displays the selection squares around an
   object at the time of a specified event (such as clicking a mouse
   button on the object).

   Each selection square allows the user to move or grow the object
   by dragging the selection square.

   The user can move and grow several objects simultaneously.

   All of the objects inside a region (drawn by dragging the mouse) can
   be selected.
@end itemize


@subsection Programming Interface
@node Programming Interface

Create an instance of the @code{gg:multi-graphics-selection} gadget
and supply the @code{:start-where} slot with a valid list that can be passed to
an interactor. This @code{:start-where} must return the items to be selected.
It should be an @code{...-or-none} form, such as @code{:element-of-or-none}. An
example of the parameter to @code{:start-where} is:
@code{(list :element-of-or-none MYAGG)}

The @code{:value} slot of the @code{multi-graphics-selection} object supplies
the object(s) the user selects. If @code{:multiple-select-p} is @code{nil}
(the default), then it is a single object or @code{nil}. If @code{:multiple-select-p}
is T, then will always be a list or @code{nil} (even if only one object is
selected). Also, a @code{:selection-function} can be
supplied and will be called each time the selection changes. It takes
the parameters

@code{(lambda (gadget new-selection)}
where @var{new-selection} is the new value of @code{:value}.

When your interface contains selectable objects in several windows,
you can put a multi-selection gadget in each window and coordinate
them all. Each gadget's @code{:other-multi-graphics-selection} slot
should contain a list of ALL the multi-selection gadgets. Then, each
gadget's @code{:value} will reflect selections in all windows. A known
bug is that the selection order is NOT preserved across multiple
windows (you can't tell which object was selected first or last).
Also, you cannot drag objects from one window to another.

The user can change the size and/or position of the objects by
pressing on the selection handles (see below). If the
@code{:check-line} slot is non-NIL, then the @code{:line-p} slot in the object
returned by @code{:start-where} will be gvd, and if it is non-NIL then the
interactor will change the object as a line. Note that instances of
@code{opal:line} and @code{gg:arrow-line} have their @code{:line-p} slot set
to T by default. For other objects, the programmer must
set the @code{:line-p} slots explicitly. There is analogous interaction
between the @code{:check-group} and @code{:check-polygon} slots of the
gadget and the @code{:group-p} and @code{:polygon-p} slots of the selected objects.

The programmer can supply a @code{:modify-function} that will
be called after an object is modified. It takes these
parameters: @code{(gadget selected-object new-points)}
The @emph{new-points} will be a list of 4 numbers, either
@code{left,top,width,height} or @code{x1,y1,x2,y2}.



@b{Programmer-settable slots:}

In summary, public slots of the @code{multi-graphics-selection} gadget are:

@vtable @code
   @code{:active-p} - If T, then the gadget will operate. If NIL, then
                    none of the interactors will work. Setting to NIL does
                    @b{not} clear the selection, however.

   @code{:start-where} - Supply a valid start-where here.

   @code{:running-where} - If supplied, then this is the area in which the
 			 objects can move and grow.

   @code{:selection-function} - This is called when the selection changes.

   @code{:modify-function} - This is called when an object is changed size or
                           position.

   @code{:check-line} - If T, the objects are checked for their @code{:line-p} slot
                      and if that is non-NIL, then move or grown as a line.

   @code{:check-polygon} - If T, the objects are checked for their
                         @code{:polygon-p} slot and if that is non-NIL, then
                         they are moved or grown as a polygon (by changing
                         their @code{:point-list} slot).

   @code{:check-group} - If T, the objects are checked for their @code{:group-p}
                       slot and if that is non-NIL, then the individual
                       components of the group are modified.

   @code{:check-grow-p} - If T, then checks in each object to see if @code{:grow-p}
                        is T, and if so, then will grow, else won't.
                        If @code{nil}, then everything can grow. Default @code{nil}.

   @code{:check-move-p} - If T, then checks in each object to see if @code{:move-p}
                        is T, and if so, then will move, else won't. If @code{nil},
                        then everything can move. Default @code{nil}.

   @code{:move-multiple-p} - If T, then if multiple items are selected and you
 			press on a move box, then moves all of the objects.
 			If @code{nil}, then just moves the object you point to.
 			Default=T.

   @code{:grow-multiple-p} - If T, then when multiple items are selected, grow
                           boxes appear at the corners of the whole selection,
                           and pressing there will grow all the objects.
                           If @code{nil}, then those handles don't appear.

   @code{:input-filter} - This is used by the move-grow-interactor for gridding.
                        Consult the Interactors chapter for a list of allowed
                        values.

   @code{:want-undo} - If T, then saves information (conses) so that you can call
                     @code{undo-last-move-grow}.

   @code{:allow-component-select} - Whether to allow selection of components
                                  (see below). Default=NIL.

   @code{:down-to-component-function} - A function that determines which
                        component of an object has just been selected
                        (see below). Default=NIL.

   @code{:multiple-select-p} - If T, then multiple objects can be selected.
                             Default=NIL.

@end vtable

 
@b{Slots that can be accessed:}

@vtable @code
   @code{:value} - set with list of the current selections, in reverse order
                 the user selected the objects (first selected object is
                 last in the list). @b{Do not set this slot.}  Instead,
                 use the function @code{Set-Selection} (see below).

   @code{:current-selected-object} - set with new selection before other
                                   slots are set.
@end vtable



@b{Selecting components of the currently selected object:}

You can enable the selecting of the components of the selected
objects by setting @code{:allow-component-select} to T.
For example, if the @code{:start-where} lists a set of
objects, this feature can allow the selection of the @emph{parts} of
those objects. When component selection is enabled, then by pressing
the @code{control-left} mouse button over a selected object,
that object will be deselected, and its component will be selected
instead. Similarly, if the @code{control-middle} mouse button or the
@code{control-shift-left} mouse button is hit
over a selected object, then that object is de-selected, and the
object underneath is added to the selection set. The slot
@code{:down-to-component-function} should contain a function to get the
appropriate component out of the object under the mouse. This
function might call a method in the selected object. Parameters are
@code{(lambda obj x y)}. It should return the object to be selected, or
NIL. The default function calls @code{opal:point-to-component} directly.


@b{Slots of the objects that can be selected are:}

@vtable @code
   @code{:line-p} - this should be T if the object should be moved as a line,
                  and @code{nil} if as a rectangle

   @code{:group-p} - this should be T if the object is some instance of
                   opal:aggregate and all its components should be moved as
                   a group 

   @code{:polygon-p} - this should be T if the object is a polyline and it should
                     be moved by changing its @code{:point-list} slot

   @code{:points} - if @code{:line-p} is T, then the @code{:points} slot of the
                  object is changed as the object is moved or grown.

   @code{:box} - if @code{:line-p} is @code{nil}, then the @code{:box} slot of the object is
               changed as the object is moved or grown.

   @code{:grow-p} - if this object can be changed size

   @code{:move-p} - if this object can be moved
@end vtable

@b{Useful Functions:}

@defun gg:set-selection gadget new-selection

@var{Gadget} should be a @code{multi-graphics-selection} gadget, and
@var{new-selection} is a list of objects that should be selected, or a single
object to be selected, or @code{nil} to turn off all selections. The list passed
in is not damaged.
@end defun


@defun gg:undo-last-move-grow multi-graphics-selection-gadget

When @code{:want-undo} is non-NIL (default is @code{nil}), then calling this function
will undo the last move or grow and the selection will return to whatever it
was when the objects were moved or grown. If you call @code{undo-last-move-grow}
again, it undoes the undo (one-level undo). It is
your responsibility to make sure that no objects were deleted or
whatever between the grow and the call to undo.

@cindex{undo}
@emph{Garnet does not yet have a general mechanism for Undo, so you
should use this feature with care. It is currently your
responsibility to keep track of what the last operation was and undo it.}
@end defun


@subsection End User Operation
@node End User Operation

The user can press on any object with the left button, and it will
become selected. Pressing on the background, causes no object to be
selected (the current object becomes de-selected). Selecting an object
with the left button causes the previous object to be de-selected.
If the application allows multiple selection, then clicking with
shift-left or middle on an object toggles it in the selection set.

Once an object is selected, it can be grown by pressing with the left
button on one of the black boxes or moved by pressing on a white box.
While moving and growing, if the mouse goes outside of :running-where
or if @code{^g} is pressed, the operation aborts.

The gadget also allows the user to change the size of several objects
at once. When multiple objects are selected, outline handles
appear around each object, and the whole set can be moved by
pressing on any of these handles. Additionally, when @code{:grow-multiple-p}
is non-NIL, black handles appear at the four corners of the collection of objects, and these can be used to scale the entire group. 

@cindex{selecting objects in a region}
The gadget also allows objects to be selected in a region.
If you press down and drag before releasing, then
only the objects fully inside the dragged rectangle will become
selected. If you do this with the left button, then they will be
selected. If you do this with shift-left or the middle button, then
all objects inside the rectangle will be toggled in the selection set
(added if not there, removed if there).


@section Scrolling-Windows
@node Scrolling-Windows
@anchor{scrolling-windows}

There are two scrolling-window gadgets which have the standard Garnet
look and feel, and two other scrolling-window gadgets that have the
Motif look and feel (see section @ref{motif-scrolling-window}). 
These windows are based on the design from Roderick J. Williams at
the University of Leeds for the Garnet contest. The
@code{scrolling-window} gadget allows you to do your own scrolling. The
@code{scrolling-window-with-bars} gadget comes with a horizontal and
vertical scroll bar, which you can have on either side (and can turn
off explicitly). Each scroll bar will go blank if the entire area to
be scrolled in is visible in the window.

@center @image{scrolling-window-gadget, 5.5in}

@example
(create-instance 'gg:Scrolling-Window opal:aggregadget
   (:maybe-constant '(:title :parent-window))
   (:left 0)  ; @emph{left, top, width and height of window}
   (:top 0)
   (:position-by-hand NIL) ; @emph{if T, then left,top ignored and user asked for window position}
   (:width 150) ; @i{width and height of inside of outer window}
   (:height 150)
   (:border-width 2) ; @emph{of window}
   (:parent-window NIL) ; @emph{window this scrolling-window is inside of, or NIL if top level}
   (:double-buffered-p NIL)
   (:omit-title-bar-p NIL)
   (:title "Scrolling-Window")
   (:icon-title (o-formula (gvl :title))) ; @emph{Default is the same as the title}
   (:total-width 200)   ; @emph{total size of the scrollable area inside}
   (:total-height 200)   
   (:X-Offset 0)  ; @emph{offset in of the scrollable area}
   (:Y-Offset 0)
   (:visible T)  ; @emph{whether the entire window is visible (mapped)}

   ;; @emph{ Read-Only slots}
   (:Inner-Window NIL)  ; @emph{these are created by the update method}
   (:inner-aggregate NIL) ; @emph{add your objects to this aggregate (but have to update first)}
   (:outer-window NIL) ; @emph{call Opal:Update on this window (or on gadget itself)}
@end example

@example
@cindex{scrolling-window-with-bars}
(create-instance 'gg:Scrolling-Window-With-Bars opal:aggregadget
   (:maybe-constant '(:left :top :width :height :border-width :title
                      :total-width :total-height :h-scroll-bar-p :v-scroll-bar-p
		      :h-scroll-on-top-p :v-scroll-on-left-p :min-scroll-bar-width
                      :scr-trill-p :page-trill-p :indicator-text-p :h-scr-incr 
                      :h-page-incr :v-scr-incr :v-page-incr :int-feedback-p
                      :indicator-font :parent-window :icon-title :visible))
   ;; @emph{Window slots}
   (:left 0)  ; @emph{left, top, width and height of outermost window}
   (:top 0)
   (:position-by-hand NIL) ; @emph{if T, then left,top ignored and user asked for window position}
   (:width 150) ; @i{width and height of inside of outer window}
   (:height 150)
   (:border-width 2) ; @emph{of outer window}
   (:parent-window NIL) ; @emph{window this scrolling-window is inside of, or NIL if top level}
   (:double-buffered-p NIL)
   (:omit-title-bar-p NIL)
   (:title "Scrolling-Window")
   (:icon-title (o-formula (gvl :title))) ; @emph{Default is the same as the title}
   (:total-width 200)   ; @emph{total size of the scrollable area inside}
   (:total-height 200)   
   (:X-Offset 0)  ; @emph{x offset in of the scrollable area. CANNOT BE A FORMULA}
   (:Y-Offset 0)  ; @emph{CANNOT BE A FORMULA}
   (:visible T)  ; @emph{whether the window and bars are visible (mapped)}

   (:h-scroll-bar-p T)  ; @emph{Is there a horizontal scroll bar?}
   (:v-scroll-bar-p T)  ; @emph{Is there a vertical scroll bar?}

   ;; @emph{Scroll Bar slots}
   (:h-scroll-on-top-p NIL)  ; @emph{whether horiz scroll bar is on top or bottom}
   (:v-scroll-on-left-p T)   ; @emph{whether vert scroll bar is on left or right}
   (:min-scroll-bar-width 20) ; @emph{these control both scroll bars}
   (:scr-trill-p T)  ; @emph{single-line increment arrow buttons visible?}
   (:page-trill-p T) ; @emph{page jump arrow buttons visible?}
   (:h-scr-incr 10)  ; @emph{in pixels}
   (:h-page-incr (o-formula (- (gvl :width) 10))) ; @emph{default jumps one page minus 10 pixels}
   (:v-scr-incr 10)  ; @emph{in pixels}
   (:v-page-incr (o-formula (- (gvl :height) 10))) ; @emph{default jumps one page minus 10 pixels}
   (:int-feedback-p T) ; @emph{use NIL to have contents move continuously}
   (:indicator-text-p NIL) ; @emph{Whether the pixel position is shown in the bars}
   (:indicator-font (create-instance NIL opal:font (:size :small)))

   ;; @emph{Read-Only slots}
   (:Inner-Window NIL)  ; @emph{these are created by the update method}
   (:inner-aggregate NIL) ; @emph{add your objects to this aggregate (but have to update first)}
   (:outer-window NIL) ; @emph{call Opal:Update on this window (or on gadget itself)}
   (:clip-window NIL)

@end example


The loader file for both scrolling-window gadgets is
"scrolling-window-loader".
@cindex{scrolling-window-loader}

@b{Caveats:}
@itemize
If the scrolling-window has a @code{:parent-window}, update the parent
window before instantiating the scrolling-window.

Update the scrolling-window gadget before referring to its inner/outer
windows and aggregates.

The instance of the scrolling-window should @b{not} be added to an aggregate.
@end itemize

These gadgets supply a scrollable region using the X window manager's
ability to have subwindows bigger than the parent window. Garnet
moves the subwindow around inside the parent window and X handles the
clipping. All the objects in the window are instantiated (and
therefore take up memory), but they will not be drawn if outside. You
must specify the total area to be scrolled in using the
@code{:total-width} and @code{:total-height} fields. (Therefore, the
scrolling window gadgets do not support semi-infinite planes--you must
pick a size for the user to scroll around in.)  Often, you can compute
the size based on the contents to be displayed in the window. There
can be a formula in the @code{:total-*} fields, but it should have an
initial value. @emph{Note: It is illegal to have windows with a zero or
negative width and height, so the
@code{:total-width} and @code{:total-height} should always be greater than
zero.}

The width and height specified for the window is the inside of the
outer window, not counting the scroll bars. For
@code{scrolling-windows}, this will usually be the same as the size of
the visible region. For @code{Scrolling-Window-With-Bars}, the visible
portion is smaller by the size of the scroll bars, which is usually
the value of the @code{:min-scroll-bar-width} slot (unless you turn on
indicator text).

Each of these gadgets is special in that they add themselves to the
windows that they create. Since windows are not like other Gadgets,
you need to follow special rules with scrolling windows.

First, @i{do not add scrolling-window or scrolling-window-with-bars
gadgets to any aggregates or include them in aggregadgets}. If you
want a scrolling window to be inside another window, you must use the
@code{:parent-window} slot instead.

Second, @i{you must call @code{opal:update} on a scrolling window gadget
immediately after creating it, and before adding anything to the
windows.} The update method causes the windows to be created. If you
want to create a prototype of a scrolling window (and specify special
values for some of the fields), you can skip the update call, but then
you cannot add any contents to the window.

The aggregate to add the contents to is provided in the slot
@code{:inner-aggregate} of the gadget after the update call. To make
the scrolling-window a subwindow of another window, specify the
@code{:parent-window} of the scrolling-window. If you want to put a
sub-window inside a scrolling-window, use the window in the
@code{:inner-window} slot of the scrolling window as the @code{:parent} of
the newly created window.

As an example:
@example
(create-instance 'MYSCROLL garnet-gadgets:scrolling-window-with-bars
   (:left 650)(:top 10)(:width 300)(:height 400)
   @emph{;;note that the next two formulas must have initial values}
   (:total-width (o-formula (gvl :inner-aggregate :width) 200))
   (:total-height (o-formula (gvl :inner-aggregate :height) 200)))
(opal:update MYSCROLL) ; @emph{Must update scrolling windows before using them.}
(opal:add-components (gv MYSCROLL :inner-aggregate)
	    @emph{all the objects to be added to the scrolling window}
	    )
;;; @emph{create a scrolling window inside the other scrolling window, just for fun}
(create-instance 'SUB-SCROLLING-WINDOW garnet-gadgets:scrolling-window-with-bars
   (:left 15)(:top 15)(:width 150)(:height 150)
   (:parent-window (gv MYSCROLL :inner-window)))
@end example
 
With @code{Scrolling-Windows}, but @emph{not} @code{Scrolling-windows-with-Bars},
you can explicitly set the @code{:X-offset} and
@code{:Y-Offset} fields using @code{s-value} to adjust the position of the
contents. For @code{Scrolling-windows-with-Bars}, you must use the following
procedures to have your application program scroll the window. This
is necessary to get the scroll bars to be updated correctly to show the
window position. These procedures also work with @code{Scrolling-Windows}.

@b{Useful functions:}

@defun gg:scroll-win-inc scroll-win-gadget xinc yinc

This function scrolls a window by adding the specified values, which can be
negative. Note that @emph{xinc} and @emph{yinc} are usually zero or negative
numbers, since they are the offset top-left corner of the inner window
from the top-left of the clipping window, so to see down in the
document, the inner window must be moved up.
@end defun


@defun gg:scroll-win-to scroll-win-gadget x y


This function scrolls a window by putting the specified coordinate at the
upper left corner of the clip window.
@end defun

@defun gg:show-box scroll-win left top right bottom

This function causes the scrolling-window @emph{scroll-win} to scroll so that
the region specified by @emph{left}, @emph{top}, @emph{right} and @emph{bottom} is
visible. If the box is already visible, it will not cause the window to
scroll. This can be used to cause the cursor in a text window, for
example, or a "current item" to be visible. It is also used by the
@code{focus-multifont} interactor.

If the box is larger than the visible region of the scrolling-window, the
bottom and/or the rightmost parts of the box may remain hidden.
@end defun



@section Arrow-line and Double-Arrow-Line
@node Arrow-line and Double-Arrow-Line
@cindex{arrow-line}
@cindex{double-arrow-line}
@center @image{arrow-pix, 5.5in}

The @code{arrow-line} and @code{double-arrow-line} objects are comprised
of a line and one or more arrowheads, effectively forming a single- or
double-headed arrow. These objects are provided since the standard
@code{opal:arrowhead} does not have an attached line.

@subsection Arrow-Line
@node Arrow-Line
@anchor{arrow-line}
@example
(create-instance 'gg:Arrow-Line opal:aggregadget
   (:maybe-constant '(:x1 :y1 :x2 :y2 :line-style :open-p :filling-style :visible))
   (:X1 0) (:Y1 0)
   (:X2 20) (:Y2 20)
   (:line-style opal:default-line-style)
   (:filling-style NIL)
   (:open-p T))
@end example

The loader file for the @code{arrow-line} is "arrow-line-loader".

The origin (or tail) of the @code{arrow-line} is the point
@code{(:x1,y1)}, and the tip is at @code{(:x2,y2)}. The values for these
slots may be formulas that depend on the value of slots in other
Garnet objects. For example, if @code{:x2} and @code{:y2} depended on the
@code{:left} and @code{:top} coordinates of some rectangle, then the arrow
would point to the top, left corner of the rectangle regardless of the
movement of the rectangle.@footnote{See the KR chapter for a detailed
discussion of constraints and formulas.}

The appearance of the arrowheads themselves may also be customized.
The @code{:line-style} slot contains a value indicating the thickness of
all lines in the @code{arrow-line} object. Opal exports a set of
pre-defined line styles, which must be preceded by the Opal package
name, as in @code{opal:line-0}. Available line style classes are:
@code{no-line, thin-line, line-0, line-1, line-2, line-4, line-8,
dotted-line} and @code{dashed-line}. Other line style classes may also
be defined (see the Opal Chapter).

The slot @code{:filling-style} determines the shade of gray that will
appear inside the arrowheads. Pre-defined filling styles are exported
from Opal, and must again be preceded by the Opal package name.
Available filling styles are @code{no-fill, black-fill, white-fill,
gray-fill, light-gray-fill, dark-gray-fill,} and @code{diamond-fill}.
The Opal function @code{halftone} may also be used to generate a filling
style, as in @code{(:filling-style (opal:halftone 50))}, which is
half-way between black and white fill.

The slot @code{:open-p} determines whether a line is drawn across the
base of the arrowhead.

@sp 1
Additional features of the arrowhead may be customized
by accessing the slot @code{:arrowhead} of the @code{arrow-line}. For
example, the following instruction would set the @code{:diameter} of an
@code{arrow-line} arrowhead to 20:
@example
(s-value (gv MY-ARROW-LINE :arrowhead) :diameter 20)
@end example

The same customization may also be implemented when the instance is created:
@example
(create-instance 'MY-ARROW-LINE garnet-gadgets:arrow-line
   (:parts `(:line (:arrowhead :modify
                               (:diameter 20)))))
@end example


@subsection Double-Arrow-Line
@node Double-Arrow-Line
@anchor{double-arrow-line}
@example
(create-instance 'gg:Double-Arrow-Line opal:aggregadget
   (:maybe-constant '(:x1 :y1 :x2 :y2 :line-style :open-p :filling-style
		      :arrowhead-p :visible))
   (:X1 0) (:Y1 0)
   (:X2 40) (:Y2 40)
   (:line-style opal:default-line-style)
   (:filling-style NIL)
   (:open-p T)
   (:arrowhead-p :both))
@end example

The loader file for the @code{double-arrow-line} is "arrow-line-loader".

The endpoints of the @code{double-arrow-line} are at points
@code{(:x1,:y1)} and @code{(:x2,:y2)}. The slots @code{:line-style},
@code{:filling-style}, and @code{:open-p} are used exactly as in the
@code{arrow-line}, with both arrowheads taking identical properties.

@sp 1
The additional slot @code{:arrowhead-p} designates which
end(s) of the line will have arrowheads. Allowed values are:

@vtable @code
@code{0} or @code{NIL} - No arrowheads

@code{1} - Arrowhead at coordinate @code{(:x1,:y1)}

@code{2} - Arrowhead at coordinate @code{(:x2,:y2)}

@code{3} or @code{:both} - Arrowheads at both ends
@end vtable

The arrowheads may be further customized as in the @code{arrow-line}
object. The arrowheads are available in the slots @code{:arrowhead1}
and @code{:arrowhead2}.

@section Browser Gadget
@node Browser Gadget
@anchor{browser-gadget}
@cindex{browser gadget}

@example
(create-instance 'gg:Browser-Gadget opal:aggregadget
   (:maybe-constant '(:left :top :num-menus :num-rows :menu-items-generating-function
                      :menu-function :item-to-string-function :additional-selection-p
		      :item-font :title-font :visible))

   @emph{;; Browser parameters}
   (:left 0)
   (:top 0)
   (:num-menus 3)
   (:num-rows 5)
   (:menu-items-generating-function NIL)
   (:item-to-string-function #'(lambda (item) item))  @emph{;; assume item is a string}

   @emph{;; Additional-selection parameters}
   (:additional-selection-p T)
   (:additional-selection (o-formula ... ))
   (:additional-selection-function NIL)
   (:additional-selection-coordinate NIL)

   @emph{;; Scrolling-Menu parameters}
   (:item-font opal:default-font)
   (:title-font (create-instance NIL opal:font (:face :italic)))
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

@center @image{browser-gadget-pix, 5.5in}

The loader file for the @code{browser-gadget} is "browser-gadget-loader".
@cindex{browser-gadget-loader}

The @code{browser-gadget} is a sophisticated interface device which may
be used to examine hierarchical structures, such as Garnet object
networks and directory trees. The gadget is composed of a set of
scrolling menus, where the selections in each scrolling menu
correspond to the children of the item appearing in the title.
Clicking on one of the menu selections causes that selection to appear
as the title of the next scrolling menu, with all of its children
appearing as choices in the new menu. Additionally, clicking the
middle mouse button over a menu selection causes a gray feedback box
to appear, indicating a secondary selection.

@cindex{demo-schema-browser}
@cindex{demo-file-browser} Two demos, named "demo-schema-browser" and
"demo-file-browser", are included in the Garnet @code{demos}
sub-directory as examples of how the @code{browser-gadget} is used in an
interface. With the schema browser, the user may examine the
inheritance and aggregate hierarchies of Garnet, while the file
browser can be used to examine the file hierarchy of Unix directories.

@subsection User Interface
@node User InterfaceAn instance of the @code{browser-gadget} may
initially appear in a window with an item already displayed in the
first menu. (Alternatively, the designer may provide a mechanism such
as a @code{labeled-box} gadget through which the user initializes a
fresh browser with the first item.)  The selections in the first menu
are derived from the item in the title through a specified function.
When the user clicks the left mouse button on one of the menu choices,
that selection will appear in the title of the next menu, with all of
that item's "children" appearing as choices. If the item that the
user selects does not generate any children, then a new menu is not
generated.

The user may also click on a menu selection with the middle mouse
button, causing the selection to be bordered by a gray rectangle.
This selection is called the "additional selection", and there is only
one for all of the menus in the @code{browser-gadget}.

The choices that are visible in each menu are controlled by the scroll
bars appearing on the sides of the menus. If there are more menu
selections derived from the title item than can be shown in a menu,
then the background of the scroll bar will be gray and a white
indicator box will appear. Clicking the left mouse button on the
trill boxes at the top and bottom of the scroll bars will "scroll"
more selections into the menu. Clicking on the single arrow trill
boxes causes the visible selections to scroll one at a time, and
clicking on the double arrow trill boxes will cause an entire "page"
of new selections to appear (one page is equal to the number of items
visible in the menu). The user may also drag the indicator of a
scrolling menu scroll bar to adjust the visible selections.

Analogously, the horizontal scroll bar appearing below the menus may
be adjusted to change which menus are displayed. When there are more
menus to show than are allowed at one time, then the trill boxes can
be clicked to scroll either one menu at a time or a whole "screen" of
menus. Dragging the indicator in this scroll bar will cause a black
rectangle to follow the mouse, rather than the indicator box itself.
When the user releases the black rectangle, the indicator will jump to
the position where it was released.

@subsection Programming Interface
@node Programming Interface

@subsection Overview
@node Overview
It is important to note that the programming
interface to the @code{browser-gadget} is different than in other Garnet
gadgets. Due to the complexity of the gadget, this section is
provided as a guide to the essential elements of the
@code{browser-gadget} so that the designer can create and use an
instance immediately. Subsequent sections describe in greater detail
the slots and functions mentioned in this section.

When creating an instance of the @code{browser-gadget}, there is one
slot that @b{must} be set. The slot
@code{:menu-items-generating-function} must be provided with a function
that generates children from the items that are to be shown in the
titles of the menus. This function takes an item and returns a list
of items that correspond to menu selections. These items can be of
any type, but if they are not strings, then the slot
@code{:item-to-string-function} must @b{also} be set with a function to
derive strings from the items (its default value is the identity
function). These functions are discussed further in section
@ref{gen-fns}.

The @code{:items} slot adheres to the convention that if an element of this
list is a list, then the second element is an item-function.
The @code{:item-to-string-function} (described below) is applied to the first
element of the item list to get a label for a menu selection. If data is to
be stored in the elements of the @code{:items} list, it should be included as
the third or greater elements in the item lists (see section @ref{items-slot}).

To install an item in a @code{browser-gadget} instance, the function
@b{@code{set-first-item}} should be called with the parameters of the
name of the browser instance and the new item. A subsequent update of
the window containing the instance will show the item appearing in the
first menu with all of its children. Other functions used to
manipulate the @code{browser-gadget} are discussed in section
@ref{manipulating}.

@subsection An example
@node An example
@anchor{browser1-example} Suppose that we want to define an instance of
the @code{browser-gadget} to look at the inheritance hierarchy of Garnet
schemas. First, create an instance called BROWSER-1 with the
appropriate generating functions (these particular lambda-expressions
are analyzed in @ref{gen-fns}).
@example
(create-instance 'BROWSER-1 garnet-gadgets:browser-gadget
   (:menu-items-generating-function #'(lambda (item)
					(gv item :is-a-inv)))
   (:item-to-string-function #'(lambda (item)
				 (if item
				     (string-capitalize (kr:name-for-schema item))
				     ""))))
@end example
The BROWSER-1 schema can be added to a Garnet window in the usual way:
@example
(create-instance 'WIN inter:interactor-window
   (:width 600) (:height 200)
   (:aggregate (create-instance 'AGG opal:aggregate)))
(opal:add-component AGG BROWSER-1)
(opal:update win)
@end example

Now, we can initialize the BROWSER-1 object with a Garnet schema, such
as the @code{opal:rectangle} schema:
@cindex{set-first-item}
@example
(garnet-gadgets:set-first-item BROWSER-1 opal:rectangle)
(opal:update win)
@end example
All instances of @code{opal:rectangle} that currently exist
will be shown in the first menu. Clicking on one of the selections in
this menu will cause that selection to appear in the title of the
second menu, with all of its instances as selections.

Since @code{opal:rectangle} is an instance of the @code{opal:graphical-object}
schema, we can use the
@b{@code{push-first-item}} (described in section @ref{manipulating}) to
show all of the objects that are instances of @code{opal:graphical-object}.
If we call
@example
(garnet-gadgets:push-first-item BROWSER-1 opal:graphical-object)
@end example
then the "Rectangle" title will be moved into the
second menu along with all of its selections, and the
"Graphical-Object" item will be displayed in the first menu with all
of its instances. The "Rectangle" selection under the
"Graphical-Object" title will be highlighted, since it was matched
with the title of the second menu.


@subsection Generating Functions for Items and Strings
@node Generating Functions for Items and Strings
@anchor{gen-fns}

@cindex{menu-items-generating-function} The slot
@code{:menu-items-generating-function} contains a function which
generates menu selections from each item in the scrolling menu titles.
The function takes an @emph{item} as a parameter, and returns a list of
menu items which correspond to the selections in the scrolling menus.
For example, if a @code{browser-gadget} instance is to be initialized
with a Garnet schema, and the menus should display all of the
instances of each item, then the @code{:menu-items-generating-function}
appearing in the example of section @ref{browser1-example} is
appropriate. It should be noted that this function does not need to
return a list of strings, but that eventually strings will be
generated from the items that it returns (via the function in
@code{:item-to-string-function}).

@cindex{item-to-string-function} The function in the slot
@code{:item-to-string-function} is used to generate strings from
arbitrary items obtained from the
@code{:menu-items-generating-function}. If the generated items are
strings themselves, then the @code{:item-to-string-function} may retain
its default value. The strings returned by the
@code{:item-to-string-function} will be displayed as the titles and
selections of the scrolling menus. In the example of section
@ref{browser1-example}, the @code{:menu-items-generating-function}
returns a list of Garnet schemas. So the supplied
@code{:item-to-string-function} takes a schema as a parameter and
returns the string name of the schema. Notice that when there are
fewer items than there are menus, this function will generate empty
strings for the titles of the blank menus.



@subsection Other Browser-Gadget Slots
@node Other Browser-Gadget Slots
The number of menus to be
displayed horizontally in the @code{browser-gadget} is determined by the
slot @code{:num-menus}. Since the set of menus in the gadget is
implemented with an aggrelist, the menu objects will be adjusted automatically
to correspond with the new value during the next call to @code{opal:update}.
Analogously, the slot @code{:num-rows} determines the number of vertical
selections to appear at one time in each scrolling menu.

The slots @code{:title-font} and @code{:item-font} control the fonts for
the titles of the menus and the menu selections, respectively.

The function specified in @code{:selection-function} is executed when
the user selects an item from one of the scrolling menus. The
parameters of this function are
@example
(lambda (browser-instance item))
@end example
where the @emph{item} is an object generated by the
function specified in @code{:menu-items-generating-function}. This
function is executed after some internal bookkeeping is performed to
update the @code{browser-gadget}.


@subsection The Additional Selection
@node The Additional Selection
@anchor{additional}
@cindex{gray feedback object}
@cindex{additional-selection} When the user presses the middle mouse
button over one of the scrolling menu selections, the outline of a
gray rectangle will appear over the selection. The item chosen in
this manner is called an "additional selection".

Whether this feature is active is determined by the value of the slot
@code{:additional-selection-p}.

The item identified by the additional selection may be accessed
through the slot @code{:additional-selection}. The value in this slot
will correspond to some item returned by the function specified in
@code{:menu-items-generating-function}. @b{Note:} this slot cannot be
set directly to move the gray feedback box. Instead, the
@code{:additional-selection-coordinate} slot must be set.

Since items may frequently be scrolled off to the side of the browser,
it may not be possible to name explicitly the item which the gray
feedback object should appear over. However, the "coordinate" of the
additional selection can always be named in the slot
@code{:additional-selection-coordinate}. This slot is set when the user
selects the additional selection, and it may be set directly by the
programmer. The @code{:additional-selection-coordinate} slot contains a
list of two values -- the first is the rank of the menu which the
selection appears in, and the second is the rank of the selection
within the menu. Both ranks are zero-based, and are relative to the
full lengths of the two item lists, not just the items currently
visible.

The function specified in the slot @code{:additional-selection-function}
will be executed when the user chooses the additional selection. The
parameters are
@example
(lambda (browser-instance item))
@end example
where @emph{item} was just selected by the user. If
the user presses over the previous additional selection, it will
become deselected, and the
@code{:additional-selection-function} will be called with @code{nil} as the
@emph{item} parameter.

@subsection Manipulating the browser-gadget
@node Manipulating the browser-gadget
@anchor{manipulating}

@cindex{set-first-item} Once an instance of the @code{browser-gadget} has
been created, an item can be installed in the instance as starting
object by calling @b{@code{set-first-item}} with the parameters

@defun gg:Set-First-Item browser-instance new-item

The effect of calling this function is to install
the @emph{new-item} in the @code{:items} slot of the instance, and to
initialize the bookkeeping slots of the instance.

@cindex{push-first-item} The function @b{@code{push-first-item}} is used
to add an item to the front of a @code{browser-gadget} instance. It
takes the parameters

@end defun

@defun gg:push-first-item browser-instance new-item

and adds the @emph{new-item} to the front of the
@emph{browser-instance}'s @code{:items} list and adjusts the bookkeeping
slots of the instance appropriately. A selection in the first menu is
highlighted only if a match is found with the title of the second menu
(which causes the browser to appear as though the second menu was
actually generated from clicking on the selection in the first menu).

@cindex{promote-item} The function @b{@code{promote-item}} is used to
install a new first item in an instance when the desired item already
appears as a selection in one of the scrolling menus. The function is
given the parameters
@end defun

@defun gg:promote-item browser-instance coordinate

where @emph{coordinate} is a list of two numbers
corresponding to the location of the desired item in the
@emph{browser-instance}. The syntax of the coordinate list is defined in
section @ref{additional}. If the item whose coordinate is passed is
highlighted, then all of the menus to the right of the selection are
retained; otherwise, the item becomes the only item in the instance.
@end defun

@section Polyline-Creator
@node Polyline-Creator
@anchor{polyline-creator}
@cindex{Polyline-Creator}
@cindex{polyline editing}

@center @image{polyline-creator, 5.5in}

@example
(create-instance 'gg:Polyline-Creator opal:aggregadget

    (:selection-function NIL) @i{; called when have full poly-line}
    (:start-event :leftdown)  @emph{; the event to start the whole process on}
    (:start-where NIL)        @i{; where the mouse should be when the start-event happens}
    (:running-where T)
    (:close-enough-value 3)   @i{; how close a point should be to the first point to stop the interaction}
    (:input-filter NIL)

    @emph{; Editing parameters}
    (:mover-start-event :leftdown)      @emph{; event to start moving a point}
    (:mover-stop-event :leftup)         @emph{; event to stop moving a point}
    (:adder-start-event :leftdown)      @emph{; event to add a point}
    (:deleter-start-event :middledown)  @emph{; event to delete a point}
    (:threshold 3)                      @emph{; how close to line to add a point}
    (:polyline-being-edited NIL)        @emph{; read-only slot}

    @emph{; Return value}
    (:value NIL) ; @emph{set with final point list}
@end example

The loader file for the @code{polyline-creator} gadget is
"polyline-creator-loader".
Examples of creating and editing polylines are in the GarnetDraw demo and the
small @code{(gg:polyline-creator-demo-go)} which is loaded by default with
the @code{polyline-creator}.

@cindex{polyline-creator-loader}

This gadget allows the user to enter new polylines (lists of points), while
providing feedback. It also supports polyline editing, meaning that
you can add, remove, and move points of a polyline with the mouse.

@subsection Creating New Polylines
@node Creating New Polylines

The user interface for creating polylines is as follows:  The user presses a
button (specified in
the @code{:start-event} slot) to start the interaction. Each subsequent button
press causes a new segment to be added to the line. Feedback is provided
to the user. The Polyline stops when:
@itemize
the new point is close enough (within @code{:close-enough-value} pixels) to
the first point of the polyline (in which case the polyline is closed).

a button pressed is different from the start event (in which case the
polyline is open).

the application calls the function @code{Stop-Polyline-Creator} (see below).
@end itemize

The gadget can also be aborted if the user types @code{^g} or the
application calls @code{abort-polyline-creator}.

The function in the @code{:selection-function} is called to create the new
polyline. This function should not destructively modify the point-list,
but should instead @emph{copy} the point-list if it will be changed. This
functions is called with the parameters
@example
(lambda (gadget new-point-list)
@end example
where @emph{new-point-list} is of the form: @code{(x1 y1 x2 y2 x3 y3 ...)}.

The @code{:input-filter} slot is used just as in the @code{move-grow-interactor}
and the @code{two-point-interactor}, described in the Interactors chapter.

The @code{:value} slot is also set by the gadget with the final point-list.
Applications are not allowed to set this directly (there can be no default
value for this gadget).


@subsection Editing Existing Polylines
@node Editing Existing Polylines


@cindex{toggle-polyline-handles}
@code{gg:Toggle-Polyline-Handles @emph{polyline-creator-gadget  polyline} @ref{function}}

This function is used to display square "selection handles" on each point in
the polyline to enable editing. The @emph{polyline-creator-gadget} is passed
as an argument to this function, since the selection handles to be displayed
are components of the gadget.

To move a point,
click the left mouse button over the point, move it to a new position,
and release the left mouse button. Hitting @code{control-g} while moving a
point will abort the move. Clicking the left mouse button in the middle of
a line will add a point, after which the point can be dragged to a different
location. Clicking on the background while editing a polyline
will turn off the handles for the polyline.

There are several ways to delete points:  either hit the middle mouse button
over the point, double-click on the point, or hit the DELETE key while
moving the point.

When the @code{toggle-polyline-handles} function is called, it first checks
to see if the polyline is already being edited. If it is, it turns
off the handles for the polyline. Otherwise, it turns on the handles
for the polyline. Note that only one polyline can be edited at a
time. If you call this function while a polyline is already being
edited, it will turn off the handles for that polyline before turning
on the handles for the polyline to be edited.

There are five slots in the polyline gadget which specify what actions
cause editing. The slots and their default values are:

@vtable @code
@code{:mover-start-event} - Default = @code{:leftdown}. The event to start moving
a point.

@code{:mover-stop-event} - Default = @code{:leftup}. The event to stop moving a
point.

@code{:adder-start-event} - Default = @code{:leftdown}. The event to add a point.

@code{:deleter-start-event} - Default = @code{:middledown}. The event to delete a
point.

@code{:threshold} - Default = 3. How close you have to click next to a line
to add a point.
@end vtable

There is a slot in the gadget called @code{:polyline-being-edited}. This
slot will contain the polyline that is currently being edited, or @code{nil}
if no polyline is being edited.


@subsection Some Useful Functions
@node Some Useful Functions


@defun gg:stop-polyline-creator gadget

This causes the gadget to create the current object. It ignores the
current mouse position. This is useful if some other gadget (such as a
palette changing the drawing mode) wants to stop the gadget. You can call
this even if the gadget is not operating.
@end defun



@defun gg:abort-polyline-creator gadget

This aborts the gadget without creating the polyline.
@end defun



@section Error-Gadget
@node Error-Gadget
@anchor{error-gadget}
@cindex{error-gadget}
@center @image{error-gadget-pix, 5.5in}

@example
(create-instance 'gg:Error-Gadget opal:aggregadget
   (:parent-window NIL)
   (:font opal:default-font)
   (:justification :center)
   (:modal-p T)
   (:beep-p T)
   (:button-name "OK")
   (:window NIL)               @emph{; Automatically initialized}
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   ...)
@end example

The loader file for the @code{error-gadget} is "error-gadget-loader".

The @code{error-gadget} is a dialog box used to tell the user that an
error has occurred. When activated, the user sees a window appear
with a multi-line text message and an "OK" button centered in the
window. If specified by the designer, all activities in the rest of
the interface will be suspended until the user clicks on the "OK"
button to cause the error window to disappear.

There is also a @code{motif-error-gadget}, which is described in section
@ref{motif-error-gadget}.

Some utility functions in section @ref{top-careful-eval} allow you to easily
raise an @code{error-gadget} in the context of checking user input for errors.

@b{Caveats:}
@itemize
Update the parent window before instantiating the error-gadget.

The instance of the error-gadget should @b{not} be added to an aggregate.
@end itemize


@subsection Programming Interface
@node Programming Interface

In order to associate an error window with an application, an instance
of the @code{error-gadget} should be created with the
@code{:parent-window} slot set to the window of the application. The
error window is activated by calling one of the functions
@cindex{display-error}
@cindex{display-error-and-wait}

@defun gg:display-error error-gadget &optional message
@defunx gg:display-error-and-wait error-gadget &optional message

where the parameter @emph{error-gadget} is the
instance created by the user and @emph{message} is a string to be
displayed in the window. If @emph{message} is not supplied, then the value
in the @code{:string} slot of the gadget is used. The message may have multiple
lines, indicated by carriage returns within the text string. While the
@code{display-error} routine returns immediately when the dialog box
appears, @code{display-error-and-wait} does not return until the user
hits the OK button. The return value of both functions is always T.

When the error-gadget is associated with a parent window, the
error window will appear centered inside of this window. If
@code{:parent-window} is @code{nil}, then the error window will appear at
coordinates (200,200), relative to the upper left corner of the
screen.

The font of the message is specified in the @code{:font} slot. The
@code{:justification} slot is used to specify whether to align the text
against the left or right margin of the window or whether each line
should be centered in the window (allowed values are @code{:left},
@code{:right}, and @code{:center}).

If the value of the @code{:modal-p} slot is T, then all interactors in
the rest of the interface will be suspended, and the user will not be
able to continue working until the "OK" button has been pressed. If
@code{:modal-p} is @code{nil}, then the interface will continue to function
with the error window visible.

If the @code{:beep-p} slot is T, then Garnet will sound a beep when the
gadget becomes visible. To turn off the beep, set @code{:beep-p} to @code{nil}.

The @code{:button-name} slot determines the label of the button. Since the
@code{display-error} routines do @emph{not} take this as a parameter, it must
be set in the gadget itself.

After the instance of the @code{error-gadget} has been created, the
window which will contain the text and the button may be accessed
through the @code{:window} slot of the instance. Note: When the
@code{error-gadget} instance has a parent-window, the @code{:left} and @code{:top}
coordinates of this window will be relative to the parent-window.
Otherwise, they are relative to the full screen.
@end defun


@subsection Error-Checking and Careful Evaluation
@node Error-Checking and Careful Evaluation
@anchor{top-careful-eval}
@cindex{error-checking}

There are several functions that can be used to evaluate lisp expressions
that may contain errors, while avoiding a crash into the debugger. These
functions may be used to evaluate user input to make sure it is free of
errors before passing it on to the rest of an application. If the user
input contains an error (i.e., does not successfully evaluate), the
functions return a special value and can display an @code{error-gadget}
informing the user of the error.

These functions are more portable and more useful than implementation-dependent
functions like @code{ignore-errors}. These functions are used in many Garnet
applications and demos where information is supplied by the user. Examples
can be found in the @code{Inspector}, @code{demo-graph}, @code{garnet-calculator},
and the line and filling-style dialog boxes in Gilt.

All of the @code{careful-eval} functions are defined in @code{error-gadget-utils},
and are loaded automatically along with the error and query gadgets when you do
@code{(garnet-load "gadgets:error-gadget-loader")} or
@code{(garnet-load "gadgets:motif-error-gadget-loader")}.

These functions were inspired by the @code{protected-eval} module in the
Garnet @code{contrib} directory, created by Russell G. Almond.


@subsection Careful-Eval
@node Careful-Eval
@cindex{careful-eval}


@defmac gg:careful-eval form &optional error-gadget error-message


@code{Careful-Eval} will evaluate the @emph{form}. If an error is encountered
during the eval, then the @emph{error-gadget} will be displayed with the actual
lisp error message that was generated, followed by the specified
@emph{error-message} (separated by carriage returns).


When the evaluation is successful, @code{gg:Careful-Eval} returns the evaluated
value (which may be multiple values). If there was an error, then
@code{Careful-Eval} returns two values: @code{nil} and the error condition structure.
(For a discussion of error conditions, see Chapter 29 of the Second Edition
of Guy Steele's @emph{Common Lisp, the Language}.)

Examples:

@example
@b{lisp>} (gg:careful-eval '(+ 4 5))    @emph{;; evaluates successfully}
9
@b{lisp>} (gg:careful-eval '(+ 4 y))    @emph{;; signals an error}
NIL
#<EXCL::SIMPLE-ERROR.0>
@b{lisp>} (multiple-value-bind (val errorp)
         (gg:careful-eval '(+ 4 y))
()       (if errorp   @emph{; perhaps} (typep errorp 'condition) @emph{is safer}
           (format t "An error was encountered~%")
           (format t "Value is ~S~%" val)))
An error was encountered

NIL
@b{lisp>}
@end example
@end defmac


@subsection Careful-Read-From-String
@node Careful-Read-From-String
@cindex{careful-read-from-string}

@example
gg:Careful-Read-From-String @emph{string} &optional @emph{error-gadget  error-message} @ref{function}
@end example

@code{Careful-Read-From-String} will try to read a symbol or expression from the
@emph{string} and return it if successful. If an error is encountered, then the
@emph{error-gadget} will be raised and two values will be returned: @code{nil} and the
error condition. The message displayed in the error gadget will be a
concatenation of the actual lisp error message followed by the
@emph{error-message}.


@subsection Careful-String-Eval
@node Careful-String-Eval
@cindex{careful-string-eval}

@example
gg:Careful-String-Eval @emph{string} &optional @emph{error-gadget  error-message} @ref{function}
@end example

@code{Careful-String-Eval} will try to read a symbol or expression from the
string and then eval it. If the read and eval are successful, then the
evaluated value is returned. If there was an error during either the read
or eval, then the @emph{error-gadget} is raised and two values are returned:
NIL and the error condition. The message displayed in the error gadget will
be a concatenation of the actual lisp error message and the @emph{error-message}.


@subsection Careful-Eval-Formula-Lambda
@node Careful-Eval-Formula-Lambda
@cindex{careful-eval-formula-lambda}

@example
gg:Careful-Eval-Formula-Lambda @emph{expr  error-gadget  error-message} @ref{function}
                               @emph{the-obj  the-slot  the-formula  warn-p}
@end example

@code{Careful-Eval-Formula-Lambda} evaluates the expression AS IF it were
installed in @emph{the-slot} of @emph{the-obj} as a formula. This is useful when
the @emph{expr} contains @code{gvl} calls, which normally require that the @emph{expr}
is already installed in an @code{o-formula} when it is evaluated.
If the evaluation is successful, then the evaluated
value is returned. If there was an error during the eval, then the
@emph{error-gadget} is raised and two values are returned: @code{nil} and the error
condition. The message displayed in the error gadget will be a
concatenation of the actual lisp error message followed by the
@emph{error-message}.

If a formula object has already been created for the expression, then it
should be passed as the value of @emph{the-formula}. This will cause dependencies
to be established as the @code{gv}'s and @code{gvl}'s are evaluated in the
expression. @emph{The-formula} may also have the value @code{:ignore}, which will
prevent the establishment of dependencies.

@sp 1
Example:

@example
@b{lisp>} (create-instance 'R opal:rectangle
        (:my-left 67))
Object R
#k<R>
@b{lisp>} (gg:careful-eval-formula-lambda '(gvl :my-left) NIL NIL
                                        R :left :ignore NIL)
67
@b{lisp>} 
@end example





@section Query-Gadget
@node Query-Gadget
@anchor{query-gadget}
@cindex{query-gadget}
@example
(create-instance 'gg:Query-Gadget gg:error-gadget
   (:button-names '("OK" "CANCEL"))
   (:string "Is that OK?")
   (:parent-window NIL)
   (:font opal:default-font)
   (:justification :center)
   (:modal-p T)
   (:beep-p T)
   (:window NIL)               @emph{; Automatically initialized}
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   ...)
@end example

The loader file for the @code{query-gadget} is "error-gadget-loader"
(the @code{query-gadget} is in the same file as the @code{error-gadget}).

The @code{query-gadget} is similar to the @code{error-gadget}, but it allows
more buttons in the window, so it is useful for a general purpose dialog
box. The button names are supplied in the @code{:button-names} slot of the
@code{query-gadget} or as a parameter to the display functions.
The use of the @code{query-gadget} is the same as the @code{error-gadget}
(and the same caveats apply). There is also a @code{motif-query-gadget},
which is described in section @ref{motif-query-gadget}.

To display a query-gadget, you first create an instance of
@code{query-gadget}, and then call one of:
@cindex{display-query}
@cindex{display-query-and-wait}
@example
display-query @emph{query-gadget} &optional @emph{message label-list}

display-query-and-wait @emph{query-gadget} &optional @emph{message label-list}
@end example
The @emph{message} is the string to display, and the optional @emph{label-list}
allows you to change the buttons. It should be a list of strings, atoms or
keywords. If @emph{message} is not supplied, then the value of the @code{:string}
slot of the gadget is used. This function displays the query-gadget on the
screen and then returns immediately. The @code{selection-function} of the query
gadget (if any) is called with the item from the label-list the user
selected. While the @code{display-query} routine returns immediately
when the dialog box appears, @code{display-query-and-wait} does not
return until the user hits one of the buttons. The return value
@code{display-query-and-wait} is the label of the selected button.


@section[Save Gadget]
@anchor{save-gadget}
@cindex{save-gadget}
@cindex{saving Garnet objects}

@example
(create-instance 'gg:Save-Gadget opal:aggregadget  
  (:maybe-constant '(:parent-window :window-title :window-left :window-top
		     :message-string :num-visible :initial-directory :button-panel-items
                     :button-panel-h-spacing :min-gadget-width :modal-p
                     :check-filenames-p :query-message :query-buttons
                     :dir-input-field-font :dir-input-label-font :message-font
                     :file-menu-font :file-input-field-font :file-input-label-font
                     :button-panel-font))
  (:parent-window NIL)
  (:window-title "save window")
  (:min-gadget-width 240)
  (:initial-directory "./")
  (:message-string "fetching directory...")
  (:query-message "save over existing file")
  (:button-panel-items '("save" "cancel"))
  (:button-panel-h-spacing 25)
  (:num-visible 6)
  (:check-filenames-p t)
  (:modal-p NIL)
  (:selection-function NIL)   @emph{; (lambda (gadget value))}

  (:dir-input-field-font (opal:get-standard-font NIL NIL :small))
  (:dir-input-label-font (opal:get-standard-font NIL :bold NIL))
  (:file-input-field-font (opal:get-standard-font NIL NIL :small))
  (:file-input-label-font (opal:get-standard-font NIL :bold NIL))
  (:message-font (opal:get-standard-font :fixed :italic :small))
  (:button-panel-font opal:default-font)
  (:file-menu-font (opal:get-standard-font NIL :bold NIL))
  ...)
@end example

@float Figure, fig:ex2
@center @image{save-gadget, 5.5in}
@caption{A save-gadget showing the contents of directory @code{/usr0/rajan/}}
@anchor{save-gadget-tag}
@end float

The loader file for the @code{save-gadget} is "save-gadget-loader" (which also
loads the @code{load-gadget}).
Figure @ref{save-gadget-tag} shows a picture of the save gadget.

The @code{save-gadget} is a dialog box used to save a file, while displaying
the contents of the destination directory in a scrolling menu. The gadget
has an accompanying query-gadget dialog box (not shown) that can ask the user
if the file really should be saved before the @code{save-gadget} appears. This
is an extra level of convenience for the application designer.

There is also a @code{motif-save-gadget}, as well as a @code{load-gadget} and
@code{motif-load-gadget}.

@sp 1
@b{Caveats:}
@itemize
Update the parent window before instantiating the save-gadget.

The instance of the save-gadget should @b{not} be added to an aggregate.
@end itemize


@subsection Programming Interface
@node Programming Interface

When a save gadget is created, it does not appear automatically.
Like the query and error gadgets, it has its own display function.
The save window is activated by calling one of these functions:

@cindex{display-save-gadget}
@cindex{display-save-gadget-and-wait}
@example
gg:Display-Save-Gadget @emph{save-gadget} &optional @emph{initial-filename}@value{function}

gg:Display-Save-Gadget-And-Wait @emph{save-gadget} &optional @emph{initial-filename}@value{function}
@end example

While the @code{display-save-gadget} routine returns immediately when the
dialog box appears, @code{display-save-gadget-and-wait} does not return
until the user hits either the "Save" or "Cancel" button.
If an @emph{initial-filename} is provided, it will appear in the "Filename:"
box when the gadget is displayed.

NOTE: To change the directory, set the @code{:initial-directory} slot of
the gadget to be the new directory. Then, when you call one of the
display methods, the directory will be updated.

To hide a save window, use
@cindex{hide-save-gadget}

@defun gg:hide-save-gadget save-gadget


The following function is described in section @ref{save-file-if-wanted-fn}.
@end defun

@defun gg:save-file-if-wanted save-gadget &optional filename (query-string "save file first")

When a save-gadget is first displayed, the "Directory" box will
contain the present directory (unless otherwise specified, as
explained in the next section); the scrolling-menu will have the
contents of that directory; and the "Filename" box will be blank.

@cindex{directories in save-gadget}
Whenever the directory name is changed by the user, the scrolling menu
will also change to list the contents of the new directory. If an invalid
directory name is specified, there will be a beep and the invalid name
will be replaced by the previous name. Whenever a directory is being
fetched, a brief message (by default, "Fetching directory...") will
appear, and will go away when the scrolling menu has been updated. When a
file name is typed into the "Directory" box, the file name will be moved
down to the "Filename" box, and the menu will be updated.

If a file in the scrolling menu is selected, then the "Filename"
box will contain the name of that file. If a directory is selected,
the "Directory" box will be set to the selected directory, and the
scrolling menu will once again update itself. 

If an invalid file name is typed into the "Filename" box, there will
be a beep and the "Filename" box will be reset. An invalid file name
is one that has a directory name in it ("/usr/garnet/foo", for
example). 

The following slots may be changed to customize the @code{save-gadget}:

@vtable @code
@code{:window-title} - contains the title of the save window, which is by
default "Save Window". Window managers usually do not display titles for
subwindows (i.e., if a window is specified in @code{:parent-window}).

@code{:parent-window} - if this slot contains a window, then the @code{save-gadget}
will appear as a subwindow of that window. By default, the
gadget will automatically be centered inside the parent window. If
this is not desired, the @code{:window-left} and @code{:window-top} slots can be
changed to position the gadget.

@code{:window-left} and @code{:window-top} - specify the coordinates of the dialog
box. Default values are 0 for both slots unless there is a parent
window.

@code{:initial-directory} - the directory to display when the @code{save-gadget}
appears. The default is "./", which is the current directory as determined
by the lisp process.

@code{:message-string} - the message to display to the user while the save
gadget fetches the contents of a new directory. Default is 
"Fetching directory...".

@code{:num-visible} - how many files to display in the scrolling menu.
Default is 6.

@code{:button-panel-items} - a list of names for the buttons. The default is
'("Save" "Cancel").
NOTE: It is important that, when you rename the buttons and use the
@code{default-save-function}, you rename them in the "Save" "Cancel" order.
That is, the label that should cause the gadget to save must appear first in
the @code{:items} list, and the label that cancels the gadget's action must
appear second. For example, if you rename the @code{:button-panel-items} slot
as '("Go" "Return"), it will produce the correct results. However, if you use
'("Return" "Go") instead, the wrong functions will get called.

@code{:button-panel-h-spacing} - the distance between the buttons (default 25).

@code{:min-gadget-width} specifies the width of the "Directory" and
"Filename" boxes. The scrolling menu is centered between them.

@code{:modal-p} - when T, then interaction in other Garnet windows will be
suspended untill either the "Save" or the "Cancel" button is hit.

@code{:check-filenames-p} - whether to check to see whether the file
already exists before saving. If the file exists, then a query gadget
will pop up and ask for confirmation.

@code{:query-message} - the string that will be used in the query
gadget that pops up when you try to overwrite a file. If
@code{:check-filenames-p} slot is @code{nil}, this slot is ignored.

@code{:selection-function} - as usual, the function called when the "Save"
button is hit.

@code{:dir-input-field-font} and @code{:dir-input-label-font} - the fonts
for the field and label of the "Directory" box.

@code{:file-input-field-font} and @code{:file-input-label-font} - the fonts
for the field and label of the "Filename" box.

@code{:message-font} - the font to use for the message that appears
when the directory is being fetched.

@code{:file-menu-font} - the font of the items inside the scrolling menu

@code{:button-panel-font} - the font for the buttons

@end vtable
@end defun

@subsection Adding more gadgets to the save gadget
@node Adding more gadgets to the save gadget

It is possible to add more gadgets, such as extra buttons, etc. to the
save gadget. To do this, you simply add more components to the @code{:parts}
list of the save gadget (which is an aggregadget). However, you MUST
include the following 5 components in the parts list: @code{:dir-input},
@code{:file-menu}, @code{:file-input}, @code{:message}, and
@code{:OK-cancel-buttons}.

An example of adding more gadgets to a save gadget follows:
@example
(create-instance 'SG gg:save-gadget
  (:parts 
   `(:dir-input :file-menu :file-input :message :OK-cancel-buttons
     (:extra-button ,gg:text-button
      (:left 10) (:top 220)
      (:text-offset 2) (:shadow-offset 5) (:gray-width 3)
      (:string "Test")))))
@end example

This will, in addition to creating the standard save gadget parts, create
an additional button. This button can be accessed by using @code{(gv
SG :extra-button)}. Naturally, you can have selection functions, etc. to
whatever gadgets you add. However, it is extremely important to include
the @code{:dir-input}, @code{:file-menu}, @code{:file-input}, @code{:message} and
@code{:OK-cancel-buttons} in the @code{:parts} list.

NOTE: The save/cancel buttons automatically position themselves 25
pixels below the last gadget in the @code{:parts} list, since most people
desire the buttons at the bottom of the gadget. If this is not
desired, you can modify the @code{:top} slot of the @code{:OK-cancel-buttons}.


@subsection Hacking the Save Gadget
@node Hacking the Save Gadget

The slots described above should be enough to customize most
applications. However, when that is not the case, it is possible to
hack the save gadget.

For example, the save/cancel buttons are centered with respect to the
"Filename" box. If this is not desirable, the @code{:OK-cancel-buttons}
slot can be modified to the desired left and top coordinates.

Suppose the left of the save/cancel buttons should be at 10. The save
gadget then would look like:
@example
(create-instance 'sg gg:save-gadget	
  (:parts
    `(:dir-input 
      :message 
      :file-menu 
      :file-input
      (:OK-cancel-buttons :modify (:left 10)))))
@end example



@subsection The Save-File-If-Wanted function
@node The Save-File-If-Wanted function
@anchor{save-file-if-wanted-fn}

If you are using a menubar with a "File" menu, you might want to use the
@code{save-file-if-wanted} function. You would call this function before such
operations as quit, close, and read if the contents of the window had not
yet been saved. The format for this function is:

@defun gg:save-file-if-wanted save-gadget &optional filename (query-string "save file first)

This function will pop up a query gadget that asks "Save file first?", or
whatever you specify as the @emph{query-string}.
If "Yes" is selected, then it will call the standard
@code{display-save-gadget-and-wait} function on the given filename, and the
return value of this function will be the same as the return value for the
@emph{save-gadget}'s @code{:selection-function}.
If "Cancel" is selected, it will return @code{:CANCEL}. If "No" is
selected, it will return @code{:NO}.

For an example of when and where this function can be used, look at
the source code for Garnetdraw, under the section labeled "MENU
FUNCTIONS AND MENUBAR". The Open, New and Quit functions all call
this function.

Often, it is necessary to know if the "Cancel" button was hit or not.
For this purpose, the functions @code{save-file-if-wanted} and the
@code{display-save-gadget-and-wait} return @code{:cancel} if the "Cancel"
button was hit. For example, the quit function in Garnetdraw looks like
this:
@example
(defun quit-fun (gadget menu-item submenu-item)
  (unless (eq :cancel (gg:Save-File-If-Wanted *save-db* *document-name*))
    (do-stop)))
@end example

If the user clicks on "Cancel" either in the "Save file first?" query
box, or in the save-gadget itself, @code{save-file-if-wanted} will return
@code{:cancel}.
@end defun

@section[Load Gadget]
@cindex{load-gadget}
@anchor{load-gadget}

@example
(create-instance 'gg:Load-Gadget opal:aggregadget  
  (:maybe-constant '(:parent-window :window-title :window-left :window-top
                     :message-string :num-visible :initial-directory :button-panel-items
                     :button-panel-h-spacing :min-gadget-width :modal-p
                     :check-filenames-p :dir-input-field-font :dir-input-label-font
                     :message-font :file-menu-font :file-input-field-font
                     :file-input-label-font :button-panel-font))
  (:parent-window NIL)
  (:window-title "load window")
  (:min-gadget-width 240)
  (:initial-directory "./")
  (:message-string "fetching directory...")
  (:button-panel-items '("load" "cancel"))
  (:button-panel-h-spacing 25)
  (:num-visible 6)
  (:check-filenames-p t)
  (:modal-p nil)
  (:selection-function NIL)   @emph{; (lambda (gadget value))}

  (:dir-input-field-font (opal:get-standard-font nil nil :small))
  (:dir-input-label-font (opal:get-standard-font nil :bold nil))
  (:file-input-field-font (opal:get-standard-font nil nil :small))
  (:file-input-label-font (opal:get-standard-font nil :bold nil))
  (:message-font (opal:get-standard-font :fixed :italic :small))
  (:button-panel-font opal:default-font)
  (:file-menu-font (opal:get-standard-font nil :bold nil))
  ...)
@end example

The @code{load-gadget} is loaded along with the @code{save-gadget} by the file
"save-gadget-loader".

The @code{load-gadget} is very similar to the @code{save-gadget}. Both look alike,
except for their window titles. The same caveats apply to both the save and
load gadgets (see section @ref{save-gadget}).

The @code{load-gadget} has its own functions for displaying and hiding the
gadget, which are analogous to those used by the @code{save-gadget}:

@defun gg:display-load-gadget load-gadget &optional initial-filename
@defunx gg:display-load-gadget-and-wait load-gadget &optional initial-filename
@defunx gg:hide-load-gadget load-gadget


When a load gadget is created and @code{display-load-gadget} is called,
the window that pops up contains the same initial contents as in the
save gadget. The "Directory" box, the scrolling-menu, and the
message, all work identically in both the gadgets.

The "Filename" box resembles the save gadget in that it beeps when an
invalid file name is typed in (unless the @code{:check-filenames-p} slot is
NIL), and is reset to the empty string, "". However, an invalid file
name is defined as a file name that does not exist, or a directory. 

As in the save gadget, when you rename the buttons and use the default
load function, it is important to put the name corresponding to the
"Load" button as the first element of the @code{:button-panel-items} list.
@end defun


@section Property Sheets
@node Property Sheets
@anchor{propertysheets}
@cindex{Property sheets}

The @code{prop-sheet} gadget takes a list of values to display, and
@code{prop-sheet-for-obj} takes a KR object to display. The
@code{prop-sheet-with-OK} and @code{prop-sheet-for-obj-with-OK} gadgets
combine a property sheet with OK, Apply and Cancel buttons and
functions to display these in windows (using the Garnet look and
feel). Similarly, the @code{motif-prop-sheet-with-OK} and
@code{motif-prop-sheet-for-obj-with-OK} combine a property sheet with
buttons, but use the Motif look and feel (see section @ref{motif-prop-sheets}).

@subsection User Interface
@node User Interface

Press on the value of a slot with the left button to begin typing. Press with
the left button again (anywhere) or hit @code{return} or @code{^j}
to stop editing
(if multi-line
strings are allowed, then @code{return} goes to the next line, so you need to use
@code{^j} or left button to stop editing). Pressing with any other button
inside the string moves the cursor. Regular editing operations are
supported (see the text-interactor in the Interactors chapter). If you
hit @code{tab}, the cursor will move to the next field.
If label selection is enabled, then labels can be selected by pressing
with any mouse button. If value selection is enabled, then values must be
selected with the @emph{right} button while they are not being edited. Selected
labels or values are displayed in bold.

@subsection Prop-Sheet
@node Prop-Sheet
@anchor{propsheetsec}

@cindex{prop-sheet}
@example
(create-instance 'gg:Prop-Sheet opal:aggregadget
    (:maybe-constant '(:left :top :items :default-filter :v-spacing
		       :multi-line-p :select-label-p :visible
		       :label-selected-func :label-select-event
		       :select-value-p :value-selected-func :single-select-p))
   @emph{; Customizable slots}
    (:left 0) (:top 0)
    (:items NIL) @emph{; put the values to be displayed here}
    (:default-filter 'default-filter)
    (:v-spacing 1)
    (:pixel-margin NIL)
    (:rank-margin NIL)
    (:multi-line-p NIL) @emph{; T if multi-line strings are allowed}
    (:select-label-p NIL) @emph{; T if want to be able to select the labels}
    (:label-selected-func NIL)
    (:label-select-event :any-mousedown)
    (:select-value-p NIL) @emph{; if want to be able to select the values}
    (:value-selected-func NIL)
    (:single-select-p NIL) @emph{; to select more than one value or label}

   @emph{; Read-only slots}
    (:label-selected NIL) @emph{; set with the selected label objects (or a list)}
    (:value-selected NIL) @emph{; set with the selected value objects (or a list)}
    (:value ...)  @emph{; list of pairs of all the slots and their (filtered) values}
    (:changed-values NIL)) @emph{; only the values that have changed}
@end example

@float Figure, fig:ex2
@center @image{propplain, 5.5in}
@caption{Example of a property sheet with an embedded gadget.}
@anchor{plainproppix}
@end float

The loader for the @code{gg:prop-sheet} gadget is "prop-sheet-loader".

@sp 1

@b{Customizable slots:}

@vtable @code
@code{:left}, @code{:top} - Position of the gadget. Default: 0,0

@code{:items} - The control list of the items to be displayed in the gadget.
The format for the list is a list of lists, as follows:
@code{( (label1 stringval1 [filter1 [realval1 [comment]]]) (label2 ...) )}

@itemize
The @code{labels} can be atoms or strings, and are shown at the left.

The @code{stringval} is the initial (default) value displayed. For an example
of the use of the various forms of @code{stringval}, see section
@ref{propexample}. It can be:
@itemize
a string,

a formula object which computes a string. Note
that all references in the formula must be absolute
(since otherwise they would be relative to the property sheet).

an instance of a gadget (e.g., a @code{radio-button-panel}), in which case
that instance is used instead of an editable text field.
Note that the instance itself is used, so it will be destroyed if the
@code{prop-sheet} is destroyed.
The gadget instance should supply its value in a slot called @code{:value}
(as the standard garnet gadgets do). NOTE: If a gadget, no
filter functions are called (use the @code{:selection-function}
of the gadget), the @code{realval} is ignored, and the @code{:changed-values} slot
is not valid. Useful gadgets are described
in section @ref{propusefulgadgets}.
@end itemize

If the @code{filter} is non-NIL, it is a function called after the 
user types the value (see below).

The @code{realval}, if supplied, is the actual value the @code{stringval}
represents (e.g. if the real values are not strings). If
@code{stringval} is a list of strings, then @code{realval} should be a list 
of the same length.

If supplied, the @code{comment} is displayed after the label.
It can be any string, and will be displayed
after the slot label. Typical uses would be to
give legal values (e.g.: "(1..20)"). 
@end itemize

@code{:default-filter} - If there is no filter on an individual item, then the
global default-filter function is called when the user finishes 
editing. See below. The default filter does nothing.

@code{:v-spacing} - Vertical space between the items. Default = 1

@code{:pixel-margin} - Multiple-valued items are represented as an aggrelist,
so this determines the maximum pixel value of an item, before
wrapping to the next line. Note that this does @emph{not} affect single
valued items. Default: @code{nil}
 
@code{:rank-margin} - Same as @code{:pixel-margin}, but is a count of the number of
values. Default: @code{nil}

@code{:multi-line-p} - Whether the user can enter multi-line strings, 
which means that @code{return} does not exit a field, but makes a new line.
Default: @code{nil}.

@code{:select-label-p} - Whether pressing on the label (with any mouse
button) causes the item to be selected. Default: @code{nil}.

@code{:label-select-event} - If you want to make the labels selectable,
you can specify which mouse event to use in the slot @code{:label-select-event}.

@code{:label-selected-func} - Called with @emph{(gadget label-obj label)}
when a label is selected.

@code{:select-value-p} - Whether pressing on the value (with the right button)
causes the value to be selected. NOTE: Values which are specified as
gadgets cannot be selected. Default: @code{nil}.

@code{:value-selected-func} - Called when a value is selected with
@emph{(gadget value-obj value label)} where label is the label of that
field.

@code{:single-select-p} - Whether a single label or value can be
selected (T) or multiple fields can be selected (NIL). This is only
relevant if one or both of @code{:select-label-p} or
@code{:select-value-p} is non-NIL. Default: @code{nil}.

@end vtable
 
@b{Read-only (output) slots:}

@vtable @code
@code{:label-selected} - Will be set with a list of the selected label objects.
Call @code{Get-Val-For-PropSheet-Value} to get label name from the label object.

@code{:value-selected} - Will be set with a list of the selected value objects.
Call @code{Get-Val-For-PropSheet-value} on an obj to get the value and
label from the value object.

@code{:value} - List of all the slots and their (filtered) values. For example:
@code{( (label1 value1) (label2 value2) ...)}.

@code{:changed-values} - List of the slots that have changed, as:
@code{( (label1 value1) (label2 value2) )}
This slot is not kept valid if a gadget is used as an item.
@end vtable

@b{Filter functions:}

The filter functions allow the program to convert the string values
to the appropriate form. The displayed string and the "real"
value are stored separately, so they can be different. Filter functions are
defined as:
@code{(lambda (prop-sheet-gadget label value-obj new-str old-str))}

The @emph{index} is used for multi-valued slots, and otherwise is zero.
The @emph{value-obj} is the actual object used to display the string, and will
be needed only by hackers.
The filter function can return the value to use (modified @emph{new-str}, not
necessarily a string) or it can return three values:
@code{(new-val in-valid-p new-str)}
where @emph{new-val} is a value (not necessarily a string) to use, @emph{in-valid-p}
is T if the new-str value is invalid (bad), in which case the @emph{new-str} is
still used, but it is shown in italic. If @emph{new-str} is returned, then it is 
displayed instead of what the user typed (for example if the filter function
expands or corrects the typed value).

An example of a custom filter function is shown in section @ref{propexample}.

@subsection Prop-Sheet-For-Obj
@node Prop-Sheet-For-Obj
@anchor{propsheetforobj}
@cindex{Prop-Sheet-For-Obj}

When you want to display a property sheet for a Garnet object, you can
use @code{prop-sheet-for-obj}. The prop-sheet can directly access the
@code{:parameters} list of a Garnet object, which is a list of the slots
normally customizable for the object. You can also display and modify
slots of @emph{multiple} objects simultaneously. Gilt makes heavy use of
many features in this prop-sheet.

@example
(create-instance 'gg:Prop-Sheet-For-Obj gg:prop-sheet
    (:maybe-constant '(:left :top :obj :slots :eval-p :set-immediately-p
		       :v-spacing :multi-line-p :select-label-p
		       :label-selected-func :label-select-event :visible
		       :select-value-p :value-selected-func :single-select-p
		       :type-gadgets :union? :error-gadget))
    (:left 5)
    (:top 5)
    (:obj NIL)   ; @emph{ a single obj or a list of objects}
    (:slots NIL) ; @emph{ list of slots to show. If NIL, get from :parameters}
    (:union? T)  ; @emph{if slots is NIL and multiple objects, use union or intersection of :parameters?}

    (:eval-p T)  @emph{; if T, then evaluates what the user types. Use T for}
		 @emph{; graphical objects. If NIL, then all the values will be strings.}
    (:set-immediately-p T) @emph{; if T then sets slots when user hits @code{return}, else doesn't}
			   @emph{; ever set the slot.}
    (:type-gadgets NIL) ; @emph{ descriptor of special handling for types}
    (:error-gadget NIL) ; @emph{ an error gadget to use to report errors.}

    ;; @emph{plus the rest of the slots also provided by prop-sheet}

    (:v-spacing 1)
    (:pixel-margin NIL)
    (:rank-margin NIL)
    (:multi-line-p NIL)    @emph{; T if multi-line strings are allowed}
    (:select-label-p NIL)  @emph{; T if want to be able to select the labels}
    (:label-select-event :any-mousedown)
    (:label-selected-func NIL)
    (:select-value-p NIL)  @emph{; if want to be able to select the values}
    (:value-selected-func NIL)
    (:single-select-p NIL) @emph{; to select more than one value or label}

   @emph{; Read-only slots}
    (:label-selected NIL)  @emph{; set with the selected label objects (or a list)}
    (:value-selected NIL)  @emph{; set with the selected value objects (or a list)}
    (:value ...)  @emph{; list of pairs of all the slots and their (filtered) values}
    (:changed-values NIL)) @emph{; only the values that have changed}
@end example
 

@float Figure, fig:ex2
@center @image{propforobj, 5.5in}
@caption{Example of a property sheet for an object (the object is
shown at the upper left).}
@end float

The loader for @code{prop-sheet-for-obj} is "prop-sheet-loader".

@b{Customizable slots:}

@vtable @code
@code{:left}, @code{:top} - Position of the gadget. Default: 0,0

@code{:obj} - The KR object or list of objects to be displayed. If this slot
contains a list of objects, then if multiple objects share a slot which is
displayed, then the value from the first object is shown. If the values from
multiple objects differ, then the slot value is shown in italics. If
the user edits the value, then it is set into each object which has that slot
in its @code{:parameters} list.

@code{:error-gadget} - An error-gadget may be placed in this slot.
Type checking is performed before setting a slot, and any errors are reported
in this error gadget. If there is no error gadget, then the error
message is simply not displayed, but a beep is sounded and the slot
value is shown in italics.

@code{:slots} - The list of slots of the object to view. Default value is @code{nil},
which means the prop-sheet should get the list of slots from the
@code{:parameters} slot of the object being edited (see @code{:union?}).
When relying on @code{:parameters}, the property sheet will use
the @code{Horiz-Choice-List} gadget for slots of type @code{KR-boolean}
and @code{(Member ...)} where the number of options is 5 or less
(see also @code{:type-gadgets}). If the type of a slot has a documentation
string, gotten using
@code{kr:get-type-documentation}, then this is displayed as the slot
comment field.

Alternatively, any element in the list can be a slot name or a sublist:
(@emph{slot} "@emph{comment}" @emph{display}):
@itemize
If the @var{comment} is non-nil, it is displayed after the label.

If the @var{display} parameter is supplied, it can either be:
@itemize
A list of legal values for the slot, e.g. 
@code{'(:direction (:horizontal :vertical))}

A function of the form @code{(lambda (new-val))} which returns T if the
value is bad. This function might pop up an error dialog box after
testing but before returning. The slot keeps its illegal value, but
it is shown in italics.

A gadget, in which case the @code{:value} slot of the gadget is set with
the old value, and the @code{:value} slot is queried to get the final value.
If gadgets are used, then @code{:set-immediately-p} for the property
sheet should be @code{nil}. A useful gadget is
@code{Pop-Up-From-Icon}.
@end itemize
@end itemize

@code{:union?} - This affects which slots are shown for objects when their
@code{:parameters} lists are being used. If there are multiple objects, then
a value of T for this slot will display the slots that are in @emph{any} of
the objects. If the value of this slot is @code{nil}, then only those slots that
appear in @emph{all} of the @code{:parameters} lists (the intersection of the lists)
will be displayed. The default is T, to show the union of all @code{:parameters}
lists.

@code{:eval-p} - If @code{nil}, then the values set into the slots will be all strings.
If T, then evaluates what the user types (using
@code{Read-From-String}) and sets the result into the slot. Usually,
you use T when displaying the graphical fields of graphical 
objects. Default=T. NOTE: Evaluating a slot may cause the
interface to crash if the values are not valid.

@code{:set-immediately-p} - If T, then as soon as the user types CR, the object's
slot is set. If @code{nil}, some external action must set the object's
slots (e.g., when using @code{prop-sheet-for-obj-with-OK}, the object's
slots are not set until the OK button is hit). Default=T.

@code{:type-gadgets} - This slot is used to
modify the default displays for slots from the @code{:parameters} list.
@code{:Type-gadgets} contains a list which can contain the following entries:
@itemize
a slot name - this means never display this slot (omit the slot even
though it is in the @code{:parameters} list).

a list of @code{(typ gadget)} - this means whenever a slot of type
@code{typ} is displayed in the prop-sheet, use the specified gadget.
For example, Gilt uses this mechanism to display a
@code{Pop-Up-From-Icon} for all slots which contain a font:
@example
(list (g-type opal:text :font)
      (create-instance NIL gg:Pop-Up-From-Icon
	(:constant :icon-image :pop-up-function)
	(:creator-function 'Show-Font-Dialog)
	(:pop-up-function 'Pop-Up-Prop-Dialog)))
@end example

a list of @code{(typ othertyp)} - this means whenever a slot of type
@code{typ} is found, pretend instead that it has type @code{othertyp}.
This is useful, for example, to map types that are complicated to ones that
will generate a @code{member} gadget.
@end itemize
@end vtable

 
The slots @code{:v-spacing}, @code{:pixel-margin}, @code{:rank-margin},
@code{:multi-line-p},
@code{:select-label-p}, @code{:label-select-event},
@code{:label-selected-func}, @code{:select-value-p}, 
@code{:value-selected-func}, and @code{:single-select-p} are the same as for
the @code{prop-sheet} gadget.

@b{Read-only (output) slots (same as @code{Prop-Sheet})}

@vtable @code
@code{:label-selected}

@code{:value-selected}

@code{:value}

@code{:changed-values}
@end vtable





@subsection Useful Functions
@node Useful Functions

@cindex{ReUsePropSheet}

@defun gg:reusepropsheet prop-sheet-gadget new-items

@code{ReUsePropSheet} allows you to re-use an old @code{prop-sheet} or a
@code{prop-sheet-with-OK} gadget with a new set of values, which is much
more efficient than destroying and creating a new @code{prop-sheet}.
NOTE: it is NOT sufficient to simply @code{s-value} the @code{:items} slot.
If you plan to reuse property sheets, do not declare the @code{:items}
slot constant.
@end defun

@defun gg:reusepropsheetobj prop-sheet-for-obj &optional obj slots

@code{ReUsePropSheetObj} allows a @code{prop-sheet-for-obj} or
@code{prop-sheet-for-obj-with-OK} gadget to be re-used. If the
new @emph{obj} and @emph{slots} are @emph{not} supplied, then they should be
set into the object before this function is called. NOTE: it is NOT
sufficient to simply @code{s-value} the @code{:obj} and @code{:slots} slot.
@end defun


@defun gg:Get-Val-For-Propsheet-Value (label-or-value-obj)
The @code{Get-Val-For-PropSheet-Value} function returns the label when
a label is passed in, or for a value-obj, returns multiple values:
@code{value label}, where @emph{label} is the label (name, not object) of that
field.

@cindex{Set-val-for-propsheet-value}
If you want to change the value of a property sheet item without
regenerating a new property sheet, you can use the new function
@code{Set-Val-For-PropSheet-Value}. This takes the form:
@end defun

@defun gg:set-val-for-propsheet-value label-or-value-obj new-value

The @emph{label-or-value-obj} parameter is the object used by the
property-sheet to represent the field.
@end defun


@subsection Prop-Sheet-With-OK
@node Prop-Sheet-With-OK
@anchor{propsheetwithok}
@cindex{Prop-Sheet-With-OK}

The next set of gadgets combine property sheets with OK, Apply and
Cancel buttons. There are two pairs: one for Garnet look-and-feel
gadgets, and one for Motif look-and-feel gadgets (see section
@ref{motif-prop-sheets} for the Motif version).

@example
(create-instance 'gg:Prop-Sheet-With-OK opal:aggregadget
    (:maybe-constant '(:left :top :items :default-filter :ok-function
		       :apply-function :Cancel-Function :v-spacing
		       :multi-line-p :select-label-p  :visible
		       :label-selected-func :label-select-event
		       :select-value-p :value-selected-func :single-select-p))
   @emph{; Customizable slots}
    (:left 0) (:top 0)
    (:items NIL)
    (:default-filter 'default-filter)
    (:OK-Function NIL)
    (:Apply-Function NIL)
    (:Cancel-Function NIL)
    (:v-spacing 1)
    (:pixel-margin NIL)
    (:rank-margin NIL)
    (:multi-line-p NIL) @emph{; T if multi-line strings are allowed}
    (:select-label-p NIL) @emph{; T if want to be able to select the entries}
    (:label-select-event :any-mousedown)
    (:label-selected-func NIL)
    (:select-value-p NIL)
    (:value-selected-func NIL)
    (:single-select-p NIL)

   @emph{; Read-only slots}
    (:label-selected ...)
    (:value-selected ...)
    (:value ...)
    (:changed-values ...))
@end example

The @code{prop-sheet-with-OK} gadget is just the @code{prop-sheet} gadget
with Garnet text buttons for OK, Apply, and Cancel.

The loader for @code{prop-sheet-with-OK} is "prop-sheet-win-loader".

@b{Customizable slots}

@vtable @code

@code{:OK-Function} - Function called when the OK button is hit. Defined as:

@code{(lambda (Prop-Sheet-With-OK-gadget))}
Typically, this would do something with the values gotten from
@code{(gv Prop-Sheet-With-OK-gadget :values)  or}
@code{(gv Prop-Sheet-With-OK-gadget :changed-values).}
If you use the @code{Pop-Up-Win-For-Prop} functions, then the window
will be removed before the @code{OK-function} is called, so you do not
have to worry about the window.

@code{:Apply-Function} - Function called when the Apply button is hit.
Defined as:

@code{(lambda (Prop-Sheet-With-OK-gadget)}
Typically, this would do something with the values gotten from
@code{(gv Prop-Sheet-With-OK-gadget :values)  or}
@code{(gv Prop-Sheet-With-OK-gadget :changed-values).}

@code{:Cancel-Function} - Function called when Cancel button is hit. Defined as:
@code{(lambda (Prop-Sheet-With-OK-gadget))}
Programmers typically would not use this.
If you use the @code{Pop-Up-Win-For-Prop} functions, then the window
will be removed before the @code{Cancel-function} is called, so you do not
have to worry about the window.
@end vtable
 
The rest of the slots are the same as for @code{prop-sheet}.

@subsection Prop-Sheet-For-Obj-With-OK
@node Prop-Sheet-For-Obj-With-OK
@anchor{propsheetforobjwithok}
@cindex{Prop-Sheet-for-obj-With-OK}

@example
(create-instance 'gg:Prop-Sheet-For-Obj-With-OK prop-sheet-with-OK
    (:maybe-constant '(:left :top :obj :slots :eval-p :ok-function
		       :apply-function :Cancel-Function :v-spacing
		       :multi-line-p :select-label-p :visible
		       :label-selected-func :label-select-event
		       :select-value-p :value-selected-func :single-select-p))
   @emph{; Customizable slots}
    (:OK-Function NIL)
    (:Apply-Function NIL)
    (:Cancel-Function NIL)
    (:left 0) (:top 0)
    (:obj NIL)   @emph{; a single obj or a list of objects}
    (:slots NIL) @emph{; list of slots to show. If NIL, get from :parameters}
    (:eval-p T)  @emph{; if T, then evaluates what the user types. Use T for}
		 @emph{; graphical objects. If NIL, then all the values will be strings.}
    (:set-immediately-p T) @emph{; if T then sets slots when user hits @code{return}, else doesn't}
			   @emph{; ever set the slot.}
    (:type-gadgets NIL) @emph{; descriptor of special handling for types}
    (:error-gadget NIL) @emph{; an error gadget to use to report errors.}

    ;; @emph{plus the rest of the slots also provided by prop-sheet}

    (:v-spacing 1)
    (:pixel-margin NIL)
    (:rank-margin NIL)
    (:multi-line-p NIL)   @emph{; T if multi-line strings are allowed}
    (:select-label-p NIL) @emph{; T if want to be able to select the labels}
    (:label-select-event :any-mousedown)
    (:label-selected-func NIL)
    (:select-value-p NIL) @emph{; if want to be able to select the values}
    (:value-selected-func NIL)
    (:single-select-p NIL) @emph{; to select more than one value or label}

   @emph{; Read-only slots}
    (:label-selected NIL) @emph{; set with the selected label objects (or a list)}
    (:value-selected NIL) @emph{; set with the selected value objects (or a list)}
    (:value ...)  @emph{; list of pairs of all the slots and their (filtered) values}
    (:changed-values NIL)) @emph{; only the values that have changed}

@end example

The @code{prop-sheet-for-obj-with-OK} gadget is just the
@code{prop-sheet-for-obj} gadget with Garnet text buttons for OK, Apply,
and Cancel.

The loader for @code{prop-sheet-for-obj-with-OK} is "prop-sheet-win-loader".

Given a list of slots for a KR object, displays the values and
allows them to be edited. The labels and values can optionally be selectable.
Sets the object's slot only when OK or Apply is hit. (So
@code{:set-immediately-p} is always @code{nil}).

@b{Customizable slots}

@vtable @code

@code{:OK-Function} - Function called when the OK button is hit. Defined as:
@code{(lambda (Prop-Sheet-For-Obj-With-OK-gadget))}
Since this gadget will set the slots of the object automatically when
OK is hit (before this function is called) and the window
visibility is handled automatically, programmers
rarely need to supply a function here.

@code{:Apply-Function} - Function called when the Apply button is hit.
Defined as:
@code{(lambda (Prop-Sheet-For-Obj-With-OK-gadget))}
Since this gadget will set the slots of the object automatically when
Apply is hit (before this function is called), programmers
rarely need to supply a function here.

@code{:Cancel-Function} - Function called when Cancel button is hit. Defined as:
@code{(lambda (prop-sheet-for-obj-with-ok-gadget))}  Since
the window visibility is handled automatically, programmers
rarely need to supply a function here.

@end vtable



@subsection Useful Functions
@node Useful Functions


@defun gg:pop-up-win-for-prop prop-gadget-with-ok left top title &optional modal-p

Given an existing gadget of any of the "OK" types, this function pops
up a window which will show the
property sheet, and will go away when the user hits either "OK" or
"Cancel". The window is allocated by this function to be the correct
size. When the @emph{modal-p} parameter is T, then interaction in all other
Garnet windows will be suspended until the user clicks either the "OK" or
"Cancel" button in this window. This function can be called many times on the
@b{same} gadget, which is much more efficient than allocating a new gadget and
window each time. To change the items or object before redisplaying, use one
of the functions below.
@end defun


@defun gg:pop-up-win-change-items prop-gadget-with-ok new-items left top title &optional modal-p

Given an existing gadget, @code{Pop-Up-Win-Change-Items} sets the items
field of the gadget
to the specified value, and then pops up a window displaying that
property sheet. (This function calls @code{ReUsePropSheetObj}
automatically). (Note: if you want to pop up a
@code{Prop-Sheet-With-OK} or @code{Motif-Prop-Sheet-With-OK} gadget
without changing the @emph{items} field, you can simply pass it to
@code{Pop-Up-Win-For-Prop}.
@end defun

@defun gg:pop-up-win-change-obj prop-obj-gadget-with-ok obj slots left top title &optional modal-p

Given an existing gadget, @code{Pop-Up-Win-Change-Obj} sets the @emph{obj}
and @emph{slot} fields of the gadget
to the specified values, and then pops up a window displaying that
property sheet. (This function calls @code{ReUsePropSheetObj}
automatically). (Note: if you want to pop up a
@code{Prop-Sheet-For-Obj-With-OK} or
@code{Motif-Prop-Sheet-For-Obj-With-OK} gadget without
changing the @emph{obj} and
@emph{slot} fields, you can simply pass it to @code{Pop-Up-Win-For-Prop}.
@end defun

@subsection Useful Gadgets
@node Useful Gadgets
@anchor{propusefulgadgets}

This section describes two gadgets that are useful in property sheet
fields as the values. Both of these gadgets are shown in Figure
@ref{motifpropfix}.

@subsection Horiz-Choice-List
@node Horiz-Choice-List
@cindex{horiz-choice-list}
The @code{horiz-choice-list} displays the choices and allows the user to
pick one with the left mouse button. The choices can be strings or
atoms.

@example
(create-instance 'gg:Horiz-Choice-List opal:aggregadget
   (:maybe-constant '(:left :top :items))
   @emph{; Customizable slots}
   (:left 0) @emph{; left and top are set automatically when used in a prop-sheet}
   (:top 0)
   (:items '("one" "two" "three")) @emph{; the items to choose from}
   @emph{; Input and output slot}
   (:value NIL) @emph{; what the user selected}
   )
@end example

The loader for @code{Horiz-Choice-List} is "prop-values-loader",
although it is automatically loaded when you load a property sheet.

The @code{Horiz-Choice-List} is automatically used when you list a set
of legal values for the display parameter for a
@code{prop-sheet-for-obj}.

@subsection Pop-Up-From-Icon
@node Pop-Up-From-Icon
@cindex{Pop-Up-From-Icon}
The @code{Pop-Up-From-Icon} displays a small icon, and if the user hits
on it, then a function is called which can pop-up a dialog box or
menu to make the choice.

@example
(create-instance 'gg:Pop-Up-From-Icon opal:aggregadget
  (:maybe-constant '(:left :top :icon-image :pop-up-function))
  @emph{; Customizable slots}
  (:left 0) @emph{; left and top are set automatically when used in a prop-sheet}
  (:top 0)
  (:icon-image pop-up-icon) @emph{; you can replace with your own picture}
  (:pop-up-function NIL))   @emph{;put a function here to pop-up the menu or whatever}
@end example

The loader for @code{Pop-Up-From-Icon} is "prop-values-loader",
although it is automatically loaded when you load a property sheet.

The @code{pop-up-function} is called when the user presses with the left
button and then releases over the icon. It is called as follows:
@code{(lambda(pop-up-from-icon-gadget))}
It should stuff its results into the @code{:value} field of that gadget.
See the chapter on Gilt for some functions that are useful for popping
up dialog boxes and menus.

@subsection Property Sheet Examples
@node Property Sheet Examples
@anchor{propexample}

First, an example filter function, which checks if value is a number,
and if it is between 1 and 20.
@example
(defun string-to-num-filter (prop-gadget label index value-obj new-str old-str)
  (declare (ignore prop-gadget label index value-obj))
  (let* ((sym (read-from-string new-str))
	 (number (when (integerp sym) sym)))
    (if (and number (>= number 1) (<= number 20))
	@emph{; then OK, return the converted number}
	(values number NIL new-str) 
	@emph{; else bad, return original string and T to say invalid}
	(progn
	  (inter:beep) @emph{; first, beep}
	  (values new-str T new-str)))))
@end example

Now, we will use that filter function in a property sheet. This code creates
the property sheet shown in Figure @ref{plainproppix} in section
@ref{propsheetsec}. It contains three regular lines, a slot using a
gadget, and then a slot with a filter function and a comment.

@example
(create-instance 'PROP1 garnet-gadgets:prop-sheet 
   (:items `((:color "Red")
             (:height "34")
	     (:status "Nervous")
	     (:direction ,(create-instance NIL garnet-gadgets:horiz-choice-list
			    (:items '("up" "down" "diagonal"))))
	     (:range "1" ,#'string-to-num-filter 1 "(1..20)"))))
@end example

Finally, a Motif look and feel property sheet for an object with OK, Apply and
Cancel buttons in it. The @code{my-rectangle1} object is only changed when OK
or Apply is hit. The resulting window is shown in Figure
@ref{motifpropfix}.

@example
(create-instance 'MY-OBJ-PROP gg:motif-prop-sheet-for-obj-with-OK
  (:left 0)
  (:top 0)
  (:obj MY-RECTANGLE1)
  (:slots `(:left @emph{; first four slots are normal}
	    :top
	    :width
	    :height 
	    (:quality (:good :medium :bad)) @emph{;list of options}
	    @emph{; next two slots use pop-up icon gadgets}
	    (:line-style ,(create-instance NIL gg:pop-up-from-icon
			    (:pop-up-function #'Line-Style-Pop-Up)))
	    (:filling-style ,(create-instance NIL gg:pop-up-from-icon
			       (:pop-up-function #'Fill-style-pop-up))))))
@end example



@section Mouseline
@node Mouseline
@cindex{MouseLine}
@cindex{Balloon Help}
@cindex{Documentation Line}
@cindex{Help Line}
@cindex{mode line}
@cindex{who line}
@cindex{Mouse Documentation Line}
There are two new gadgets that will show a help string attached to any
object. The string can be shown in a fixed location in a
window using the @code{MouseLine} gadget, and therefore is like the
@b{mouse documentation line} on Symbolics Lisp
machines (sometime called the 
``mode line'' or ``who line'').
Alternatively, the help string can pop up in a window using 
the @code{MouseLinePopup} gadget, and therefore be
like @b{Balloon Help} in the Macintosh System 7. You can also control
whether the string appears immediately or only after the mouse is over
an object for a particular period of time.

An example of the use of the two mouseline gadgets is
@code{gg:mouseline-go} which is at the end of the @code{mouseline.lisp}
file. The standard @code{demos-controller} which you get when you load
@code{garnet-demos-loader} also uses the @code{MouseLinePopup} gadget to
show what the different demos do.

Note: the mouseline gadget is implemented in a rather inefficient
manner. It has the potential to significantly slow down applications,
especially when the delay feature is used (@code{:wait-amount} non-zero).
If this proves to be a big problem in practice, please let us know.

Note 2: the delay feature is implemented with multiple processes, which
are only supported in Allegro and Lucid lisp.

@subsection MouseLine gadget
@node MouseLine gadget

@example
(create-instance 'gg:MouseLine opal:aggregadget
  (:left 5)
  (:top (o-formula (- (gvl :window :height)  ; @emph{default is bottom of window}
		      (gvl :label :height)
		      5))) 
  (:windows (o-formula (gvl :window)))  ; @emph{default is the window containing the mouseline gadget}
  (:wait-amount 0)   ; @emph{how long to wait before displaying the string}
@end example

The loader file for the @code{MouseLine} is @code{mouseline-loader}.

You create an instance of the @code{mouseline} gadget and add it to a
window. By default it is positioned at the bottom left, but you can
override the @code{:top} and @code{:left} to position it where-ever you
want. Once created, the string will display the value of the
@code{:help-string} field for any object the mouse is over in the window
or windows specified in the @code{:windows} slot. By default
@code{:windows} is only the window that the @code{mouseline} gadget is in,
but it can be any list of windows, or T for all interactor windows.

@cindex{Help-string slot}
The gadget first looks at the leaf object under the mouse, and if that
does not have a help-string, then its parent (aggregate) is looked at,
and so on. The lowest-level help string found is displayed in the
string. The string can contain newlines but not font information (the
display is a @code{opal:multi-text} not a @code{opal:multifont-text}).
Of course, the @code{:help-string} slot can contain a formula, which
might, for example, generate a different string when a gadget is
disabled explaining why.

If the mouseline gadgets catch on, we might provide a way
to specify the help-strings as part of the standard @code{:items}
protocol for gadgets, but for now you need to @code{s-value} the
@code{:help-string} slots directly. See the @code{demos-controller} for how
this might be done.

If the @code{:wait-amount} slot is non-zero, then it is the number of
seconds the mouse must remain over an object before the mouseline
string is displayed. This feature relies on the @code{animation-interactor}
which uses the multi-process mechanism in Lisp, @b{so the @code{:wait-amount} is
only currently available in Lucid, Allegro, and LispWorks.}

@subsection MouseLinePopup gadget
@node MouseLinePopup gadget
@cindex{MouseLinePopup}

@example
(create-instance 'gg:MouseLinePopup opal:aggregadget
  (:start-event :SHIFT-CONTROL-META-LEFTDOWN)
  (:windows (o-formula (gvl :window))) ; @emph{default is the window containing the mouseline gadget}
  (:wait-amount 3) ; @emph{how long to wait before displaying string}
@end example

The loader file for the @code{MouseLinePopup} is @code{mouseline-loader}.

This displays the same help-string as the @code{mouseline} gadget above,
but the string is displayed in a window which pops up at the mouse.
Therefore it is like ``Balloon Help'' in the Macintosh System 7.
The window is just big enough for the string, and it goes away when
you move off of the object. The @code{:wait-amount} determines how long
in seconds you must keep the mouse over the object before the window
appears.





@section Standard Edit
@node Standard Edit
@anchor{standardeditsec}
@cindex{Standard Edit}

There are a number of editing functions that are
shared by most graphical editors. The file @code{standard-edit.lisp}
supplies many of these functions in a manner that can probably be used by
your graphical editors without change. They support such operations
such as cut, copy, paste, delete, duplicate, group, ungroup, refresh,
to-top, to-bottom, etc. These functions are designed to work with the
@code{Multi-Graphics-Selection} gadget, and can be invoked from buttons,
menus, or a menubar. 
The @code{standard-edit} functions
are currently used by GarnetDraw, Gilt and Marquise. 
You don't have to use all the functions in an application. For
example, Gilt does not support grouping and ungrouping.
(If you find that changing a @code{standard-edit} routine will allow
it to be useful to your application, let us know.)

The @code{standard-edit} routines can be loaded using
@code{(garnet-load "gg:standard-edit-loader")}.

@subsection General Operation
@node General Operation

The @code{standard-edit} routines assume that the graphical objects that
are to be edited are all in a single aggregate in a single window
(extensions to handle multiple windows are planned, but not in place
yet). The routines are tightly tied to the design of the
@code{Multi-Graphics-Selection} gadget. For example, most routines
determine which objects to operate on by looking at the current
selection, and many change the selection.

@code{Standard-edit} determines how to edit objects by
looking at various slots. The slots listed below are set in the @b{selected}
objects, not in the selection gadget itself. Most Garnet prototypes already
contain the correct default values:

@vtable @code
@code{:line-p} - if non-NIL, then the object is controlled by a
@code{:points} list of 4 values. True by default for @code{opal:line} and
@code{gg:arrow-line}s.

@code{:polygon-p} -  if non-NIL, then the object is controlled by a
@code{:point-list} list of multiple values. True by default for
@code{opal:polyline}s. 

@code{:group-p} - if non-NIL, then the object is a group of objects that the
user might be able to get the parts of. True by default for
@code{opal:aggregadget}s. If you allow high-level objects to be added
in your editor (e.g., gadgets like buttons), and you supply the
@code{Standard-Ungroup} command, you should set the @code{:group-p} slot
of any objects you don't want the user to ungroup to be @code{nil}. 

@code{:grow-p} - whether the object can change size or not.
@end vtable

If the object has @code{:line-p} and @code{:polygon-p} both @code{nil}, then it
is assumed to be controlled by a @code{:box} slot.

The various routines find information they need by looking in a
special slots of the gadget that invokes them. This means that all
routines must be invoked from the same gadget set, for example, the
same @code{menubar} or @code{motif-button-panel}.


@subsection The Standard-Edit Objects
@node The Standard-Edit Objects

The @code{gg:Clipboard-Object} holds the last object that was cut or
copied. It also contains some parameters used for pasting and
duplicating the objects. Each application can have its own
clipboard, or a set of applications can share a clipboard to allow cut
and paste among applications. For example, GarnetDraw and Gilt both share
the same clipboard, so you can cut and paste objects between the two
applications. By default, all applications share the
one @code{gg:Default-Global-Clipboard}.

Note that this does @emph{not} use the X cut buffer, since there is no
standard way to copy graphics under X. 

@cindex{Clipboard-Object}
@example
(create-instance 'gg:Clipboard-Object NIL
  (:value NIL)
  (:x-inc-amt NIL)  ; @emph{Offset for duplicate. If NIL, then uses 10}
  (:y-inc-amt NIL))

(create-instance 'gg:Default-Global-Clipboard gg:Clipboard-Object)
@end example

The @code{Default-Global-Clipboard} is used by default, and allows
objects to be copied from one Garnet application to another.


@subsection Standard Editing Routines
@node Standard Editing Routines

@cindex{Standard-Initialize-Gadget}
@example
gg:Standard-Initialize-Gadget @emph{gadget  selection-gadget  agg-of-items} @ref{function}
                              &key @emph{clipboard  undo-delete?}
@end example

This routine must be called once before any of the others are invoked.
Typically, you would call this after the editor's windows and objects
are created. It takes the @code{gadget} that is going to invoke the
standard-edit routines (e.g., a menubar), the selection gadget that
is used to select objects in the graphics editor, and the aggregate
that holds the items created in the graphics editor. 
If you do not supply a @code{clipboard} object, then
@code{Default-Global-Clipboard} will be used.

Unfortunately, there is not yet a global undo facility, but you can
support undoing just the delete operations. The @code{undo-delete?}
flag tells standard-edit whether you want this or not. If non-NIL,
then deleted objects are never destroyed, they are just saved in a
list.

@cindex{Standard-NIY}
@example
gg:Standard-NIY @emph{gadget} &rest @emph{args} @ref{function}
@end example

Useful for all those functions that are @b{N}ot @b{I}mplemented
@b{Y}et. It prints "Sorry, Not Implemented Yet" in the Lisp listener
window and beeps.


@cindex{Standard-Delete}
@example
gg:Standard-Delete @emph{gadget} &rest @emph{args} @ref{function}
@end example
Deletes all the selected objects. Makes there be no objects selected.

@cindex{Standard-Delete-All}
@example
gg:Standard-Delete-All @emph{gadget} &rest @emph{args} @ref{function}
@end example
Deletes all the objects. Makes there be no objects selected.

@cindex{Standard-Undo-Last-Delete}
@example
gg:Standard-Undo-Last-Delete @emph{gadget} &rest @emph{args} @ref{function}
@end example
If you have initialized standard-edit with @code{Undo-delete?} as
non-NIL, then this function will undo the last delete operation. The
objects brought back are selected.

@cindex{Standard-To-Top}
@example
gg:Standard-To-Top @emph{gadget} &rest @emph{args} @ref{function}
@end example
Moves the selected objects to the top (so not covered). They stay selected.

@cindex{Standard-To-Bottom}
@example
gg:Standard-To-Bottom @emph{gadget} &rest @emph{args} @ref{function}
@end example
Moves the selected objects to the bottom (so covered by all other
objects). They stay selected.

@cindex{Standard-Refresh}
@example
gg:Standard-Refresh @emph{gadget} &rest @emph{args} @ref{function}
@end example
Simply redraws the window containing the objects using
@code{(opal:update win T)}.

@cindex{Standard-Select-All}
@example
gg:Standard-Select-All @emph{gadget} &rest @emph{args} @ref{function}
@end example
Causes all of the objects to be selected.

@cindex{Standard-Cut}
@example
gg:Standard-Cut @emph{gadget} &rest @emph{args} @ref{function}
@end example
Copies the selected objects into the clipboard's cut buffer, and then
removes them from the window. Afterwards, there will be no selection.

@cindex{Standard-Copy}
@example
gg:Standard-Copy @emph{gadget} &rest @emph{args} @ref{function}
@end example
Copies the selected objects into the clipboard's cut buffer, but
leaves them in the window. The selection remains the same.

@cindex{Standard-Paste-Same-Place}
@example
gg:Standard-Paste-Same-Place @emph{gadget} &rest @emph{args} @ref{function}
@end example
Pastes the objects in the clipboard into the window at the same place
from which they were cut. Pasting the same objects multiple times
will give multiple copies, all in the same place. An application will
typically provide either @code{Standard-Paste-Same-Place} or
@code{Standard-Paste-Inc-Place} as the ``paste'' operation. The new
objects will be selected.

@cindex{Standard-Paste-Inc-Place}
@example
gg:Standard-Paste-Inc-Place @emph{gadget} &rest @emph{args} @ref{function}
@end example
Pastes the objects in the clipboard into the window offset from where 
they were cut. Pasting the same objects multiple times
will give multiple copies, each offset from the previous. The offset
amount is determined by the @code{:x-inc-amt} and @code{:y-inc-amt} slots
of the clipboard object, or, if @code{nil}, then 10 is used. The new
objects will be selected.

@cindex{Standard-Duplicate}
@example
gg:Standard-Duplicate @emph{gadget} &rest @emph{args} @ref{function}
@end example
Makes a copy of the selected objects, and places them back into the
window, offset from the previous objects by @code{:x-inc-amt} and
@code{:y-inc-amt} (or 10 if these are @code{nil}). The new
objects will be selected.

@cindex{Standard-Group}
@example
gg:Standard-Group @emph{gadget} &rest @emph{args} @ref{function}
@end example
Creates an @code{aggregadget} and puts the selected objects into it.
The @code{Multi-Graphics-Selection} gadget will then operate on the
group as a whole, and will not let parts of it be manipulated (like
MacDraw, but unlike Lapidary). The group (aggregadget) object will be
selected.

@cindex{Standard-UnGroup}
@example
gg:Standard-UnGroup @emph{gadget} &rest @emph{args} @ref{function}
@end example
Goes through all the selected objects, and for any that have the
@code{:group-p} slot non-NIL, removes all the components from that
aggregate and adds the objects directly to the parent of the group.
@code{:Group-p} is true by default for @code{opal:aggregadget}s. If you allow
high-level objects to be added 
in your editor (e.g., gadgets like buttons), and you supply the
@code{Standard-Ungroup} command, you should set the @code{:group-p} slot to be @code{nil}
for any objects you don't want the user to ungroup.

@subsection Utility Procedures
@node Utility Procedures

@cindex{sort-objs-display-order}
@example
gg:Sort-Objs-Display-Order @emph{objs draw-agg} @ref{function}
@end example
For many operations, it is important to operate on the objects in
display order, rather than in the order in which the objects were
selected. @code{Sort-Objs-Display-Order} takes a list of objects
(@emph{objs}) and an aggregate that contains them (@emph{draw-agg}) and
sorts the objects so they are in the same order as in @emph{draw-agg}.
The procedure returns a @b{copy} of the list passed in, so it is safe
to supply the @code{:value} of the @code{Multi-Graphics-Selection} gadget,
for example.

@cindex{Is-A-Motif-Background}
@example
gg:Is-A-Motif-Background @emph{obj} @ref{function}
@end example
Tests whether the specified object is a @code{Motif-Background} object.
This procedure is safe even if the Motif gadgets have not been loaded.

@cindex{Is-A-Motif-Rect}
@example
gg:Is-A-Motif-Rect @emph{obj} @ref{function}
@end example
Tests whether the specified object is a @code{Motif-Rect} object.
This procedure is safe even if the Motif gadgets have not been loaded.




@section The Motif Gadget Objects
@node The Motif Gadget Objects

@anchor{Motif-Gadgets}

The Motif gadgets in the Gadget Set were designed to simulate the
appearance and behavior of the OSF/Motif widgets. They are analogous
to the standard gadgets of Chapter @ref{Standard-Gadgets}, and many of
the customizable slots are the same for both sets of gadgets.

As in the previous chapter, the descriptions of the Motif gadgets
begin with a list of customizable slots and their default values (any
of which may be ignored). The @code{motif-gadget-prototype} object which
occurs in the definition of each Motif gadget is just an instance of
an @code{opal:aggregadget} with several color, filling-style, and line-style
slot definitions used by all Motif gadgets.
@cindex{Motif-gadget-prototype}

The Motif gadgets have been implemented to appear on either color or
black-and-white screens without changes to the instances.
The @code{:foreground-color} slot is used to compute filling-styles internally
on a color screen, and it is ignored on a black-and-white screen. Figure
@ref{color-and-bw-motif} shows how a few of the Motif gadgets look on each
type of screen.

@float Figure, fig:ex2
@center @image{color-motif-pix, 5.5in}
@center @image{bw-motif-pix, 5.5in}
@caption{Motif style gadgets on color and black-and-white screens}
@anchor{color-and-bw-motif}
@end float


@section Useful Motif Objects
@node Useful Motif Objects

In order to facilitate the construction of interfaces containing Motif
gadgets, Garnet exports some miscellaneous objects that are commonly
found in Motif. The objects described in this section are defined in
the "motif-parts" file (automatically loaded with all Garnet Motif-style
"-loader" files).


@subsection Motif Colors and Filling Styles
@node Motif Colors and Filling Styles

@cindex{Motif colors}
@cindex{Motif filling styles}
In each Motif gadget, there is a slot for the color of the gadget.
The @code{:foreground-color} is the color that should be shown in the foreground
of the gadget (i.e., the part of the gadget that does not appear recessed).
The background, shadow, and highlight colors for the gadget are computed
internally based on the @code{:foreground-color} given.

@sp 1
The default @code{:foreground-color} for the gadgets is @code{opal:motif-gray},
but the user may provide any instance of @code{opal:color} in the slot.
Additionally, Opal provides the following colors for use
with the Motif gadgets. The associated filling styles may be of use in other
objects designed by the programmer.

@table @code
opal:motif-gray

opal:motif-blue

opal:motif-green

opal:motif-orange

opal:motif-light-gray

opal:motif-light-blue

opal:motif-light-green

opal:motif-light-orange

opal:motif-gray-fill

opal:motif-blue-fill

opal:motif-green-fill

opal:motif-orange-fill

opal:motif-light-gray-fill

opal:motif-light-blue-fill

opal:motif-light-green-fill

opal:motif-light-orange-fill
@end table

When the Motif gadgets are used on a black-and-white monitor, the gadgets
ignore the @code{:foreground-color} slot and internally compute reasonable
filling-styles that are black, white, or Opal halftones.


@subsection Motif-Background
@node Motif-Background

@example
(create-instance 'gg:Motif-Background opal:rectangle
   (:foreground-color opal:motif-gray))
@end example

In order to simulate the Motif three-dimensional effect in an interface,
there should be a gray background in a window containing Motif-style
gadgets. Garnet provides two ways to achieve this effect. You could
add an instance of the @code{motif-background} object to the window,
which is a rectangle whose dimensions conform to the size of the
window in which it appears.

Alternately, you could supply the @code{:background-color} of your window
with an appropriate Opal @code{color} object (like
@code{opal:motif-gray}). This is generally more efficient, since it is
faster to redraw a window with its background color than to redraw a
rectangle that occupies the entire window.

@b{NOTE:} If you choose to use the @code{motif-background} object, it is
essential that the instance be added to the top-level aggregate before
any other Garnet object. This will ensure that the background is
drawn @b{behind} all other objects in the window.

Of course, the @code{:foreground-color} of the @code{motif-background}
instance or the @code{:background-color} of the window
should be the same as the colors of all the Motif gadgets in the window.

@subsection Motif-Tab-Inter
@node Motif-Tab-Inter
@cindex{Motif-tab-inter}

@example
(create-instance 'gg:Motif-Tab-Inter inter:button-interactor
   (:window NIL)
   (:objects NIL)
   (:rank 0)
   (:continuous NIL)
   (:start-where T)
   (:start-event '(#\tab :control-tab))
   (:waiting-priority gg:motif-tab-priority-level)
   (:running-priority gg:motif-tab-priority-level)
   (:stop-action #'(lambda (interactor obj-over) ...))
   (:final-function NIL))
@end example

Each Motif gadget has the ability to be operated by the keyboard as
well as the mouse. In traditional Motif interfaces, the keyboard
selection box is moved within each gadget with the arrow keys, and it
is moved among gadgets with the tab key (i.e., one gadget's keyboard
selection is activated while the previous gadget's keyboard selection
is deactivated). The keyboard interface can be chapterly
activated by setting a Motif gadget's @code{:keyboard-selection-p} to T, but the
bookkeeping becomes formidable when there are a large number of Motif
gadgets on the screen and their keyboard status is changing.
Thus, Garnet provides the @code{motif-tab-inter} which handles the bookkeeping
among multiple Motif gadgets. 

To use the @code{motif-tab-inter}, create an instance with
a list of the Motif gadgets on which to operate in the
@code{:object} slot and the window of the objects in the @code{:window}
slot. Usually, these are the only two slots that will need to be set.

Repeatedly hitting the tab key (or simultaneously hitting @code{control} and
@code{tab} will cause the keyboard selection to cycle through the list of
objects. Specifically, hitting the tab key causes the
@code{:rank} of the @code{motif-tab-inter} to be incremented, and the interactor
checks the @code{:active-p} slot of the next object in the @code{:object} list.
If the result is T, then that object's @code{:keyboard-selection-p} slot is
set to T. Otherwise, the @code{:rank} is incremented again and the next object
is checked.

The @code{:active-p} slots of the "continuous" Motif gadgets -- the scroll bars,
slider, and gauge -- all default to T, while the @code{:active-p} slots of the
Motif buttons and menu depend on the items in the @code{:inactive-items} list.

The @code{:running-priority} and @code{:waiting-priority} of the
@code{motif-tab-inter} are both set to be @code{motif-tab-priority-level},
which is a higher priority than the default interactor priority levels
(but lower than the @code{error-gadget}'s @code{error-priority-level}). This
allows the @code{motif-tab-inter} to be used at the same time as the
@code{inter:text-interactor} (as in the @code{motif-scrolling-labeled-box}).

The function in the @code{:final-function} slot is executed whenever the
current selection changes. It takes the parameters
@code{(lambda (inter new-object))}

Examples of the @code{motif-tab-inter} in use may be found in demo-motif
and in all three Motif button demos.


@section Motif Scroll Bars
@node Motif Scroll Bars
@anchor{motif-scroll-bars}
@cindex{Motif-v-scroll-bar}
@cindex{Motif-h-scroll-bar}

@example
(create-instance 'gg:Motif-V-Scroll-Bar gg:motif-gadget-prototype
   (:maybe-constant '(:left :top :width :height :val-1 :val-2 :scr-incr
		      :page-incr :scr-trill-p :percent-visible :scroll-p
		      :foreground-color :visible))
   (:left 0)
   (:top 0)
   (:width 20)
   (:height 200) 
   (:val-1 0)
   (:val-2 100)
   (:scr-incr 1)
   (:page-incr 5) 
   (:scr-trill-p T) 
   (:percent-visible .5)
   (:scroll-p T)
   (:keyboard-selection-p NIL)
   (:foreground-color opal:motif-gray)
   (:value (o-formula ...))
   (:active-p T)
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example
@sp 1

@example
(create-instance 'gg:Motif-H-Scroll-Bar gg:motif-gadget-prototype
   (:maybe-constant '(:left :top :width :height :val-1 :val-2 :scr-incr
		      :page-incr :scr-trill-p :percent-visible :scroll-p
		      :foreground-color :visible))
   (:left 0)
   (:top 0)
   (:width 200)
   (:height 20)
   (:val-1 0)
   (:val-2 100)
   (:scr-incr 1)
   (:page-incr 5) 
   (:scr-trill-p T)
   (:percent-visible .5)
   (:scroll-p T)
   (:keyboard-selection-p NIL)
   (:foreground-color opal:motif-gray)
   (:value (o-formula ...))
   (:active-p T)
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

@center @image{motif-scroll-pix, 5.5in}

The loader file for the
@code{motif-v-scroll-bar} is "motif-v-scroll-loader". The loader file
for the @code{motif-h-scroll-bar} is "motif-h-scroll-loader".

The Motif scroll bars allow the specification of the minimum and maximum
values of a range, while the @code{:value} slot is a report of the
currently chosen value in the range. The interval is determined by
the values in @code{:val-1} and @code{:val-2}, and either slot may be the
minimum or maximum of the range. The value in @code{:val-1} will
correspond to the top of the vertical scroll bar and to the left of the
horizontal scroll bar. The @code{:value} slot may be accessed directly
by some function in the larger interface, and other formulas in the
interface may depend on it. If the @code{:value} slot is set directly,
then the appearance of the scroll bar will be updated accordingly.

The trill boxes at each end of the scroll bar allow the user to
increment and decrement @code{:value} by the amount specified in
@code{:scr-incr}. The designer may choose to leave the trill boxes out
by setting @code{:scr-trill-p} to @code{nil}.

The indicator may also be moved directly by mouse movements. Dragging
the indicator while the left mouse button is pressed will change the
@code{:value} accordingly. A click of the left mouse button in the
background trough of the scroll bar will cause the @code{:value} to increase or
decrease by @code{:page-incr}, depending on the location of the
indicator relative to the mouse click.

When @code{:keyboard-selection-p} is T, then a black-selection box is
drawn around the scroll bar and the indicator can be moved with the
arrow keys (uparrow and downarrow for the @code{motif-v-scroll-bar},
leftarrow and rightarrow for the @code{motif-h-scroll-bar}).

The @code{:percent-visible} slot contains a value between 0 and 1, and is used to
specify the length of the indicator relative to the length of the trough.
If @code{:percent-visible} is .5, then the length of the
indicator will be half the distance between the two trill boxes. This
feature might be useful in a scrolling menu where the length of the
indicator should correspond to one "page" of items in the menu (e.g., for
three pages of items, set @code{:percent-visible} to .33).

The slots @code{:scroll-p} and @code{:active-p} are used to enable and disable the
scrolling feature of the scroll bar. When either is set to @code{nil}, the
trill boxes of the scroll bar become inactive and the indicator cannot
be moved. The difference is that when @code{:active-p} is set to @code{nil}, then
the keyboard selection cannot be enabled.

@section Motif Slider
@node Motif Slider
@anchor{Motif-Slider}

@example
(create-instance 'gg:Motif-Slider gg:motif-v-scroll-bar
   (:maybe-constant '(:left :top :height :trough-width :val-1 :val-2
		      :scr-incr :page-incr :scr-trill-p :text-offset
		      :scroll-p :indicator-text-p :indicator-font
		      :foreground-color :visible))
   (:left 0) 
   (:top 0) 
   (:height 200)
   (:trough-width 16)
   (:val-1 0)
   (:val-2 100)
   (:scr-incr 1)
   (:page-incr 5)
   (:scr-trill-p NIL)
   (:text-offset 5)
   (:scroll-p T)
   (:indicator-text-p T)
   (:keyboard-selection-p NIL)
   (:indicator-font opal:default-font)
   (:foreground-color opal:motif-gray)
   (:value (o-formula ...))
   (:active-p T)
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   (:parts (...)))
@end example

@center @image{motif-slider-pix, 5.5in}

@cindex{motif-slider} The loader file for the @code{motif-slider} is
"motif-slider-loader".

The @code{motif-slider} is similar to the @code{motif-v-scroll-bar},
except that it has a fixed-size indicator with accompanying text
feedback. The mouse can be used to drag the indicator, and the arrow
keys can be used when keyboard-selection is activated.

The slots @code{:value}, @code{:val-1}, @code{:val-2}, @code{:scr-incr},
@code{:page-incr}, @code{:scr-trill-p}, @code{:scroll-p}, @code{:active-p} and
@code{:keyboard-selection-p} all have the same functionality as in the
@code{motif-v-scroll-bar}.

The @code{:trough-width} slot determines the width of the scroll-bar
part of the slider. The actual @code{:width} of the gadget is not
user-settable because of the changing value feedback width.

The current @code{:value} of the slider is displayed beside the trough
if @code{:indicator-text-p} is T. The font of the indicator text is in
@code{:indicator-font}. The distance from the indicator text to the
trough is in @code{:text-offset}.


@section Motif-Trill-Device
@node Motif-Trill-Device
@anchor{motif-trill-device}
@cindex{motif-trill-device}

@center @image{motif-trill-pix, 5.5in}
		
@example
(create-instance 'gg:Motif-Trill-Device gg::motif-gadget-prototype
  (:left 0) (:top 0) 
  (:width 150) (:height 40)
  (:val-1 0) (:val-2 100)
  (:value 20)
  (:foreground-color opal:motif-gray)
  (:format-string "~a")
  (:value-feedback-font opal:default-font)
  (:value-feedback-p T)
  (:scroll-incr 1)
  (:selection-function NIL)   @emph{; (lambda (gadget value))}
  )
@end example

The loader file for the @code{motif-trill-device} is "motif-trill-device-loader".
The demo @code{(gg:motif-trill-go)} is loaded by default, and shows an example of
the @code{motif-trill-device}.

The @code{motif-trill-device} is a simple incrementing/decrementing gadget with
trill boxes and a numerical display.
The behavior is identical to the standard @code{trill-device} -- click on the
left or right arrows to change the value, and click the left mouse button on
the text to edit it.

The slots @code{:val-1} and @code{:val-2} contain the upper and lower bounds for
the value of the gadget. Either slot may be the minimum or maximum, and either
slot may be @code{nil} (indicating no boundary). If a value less than the minimum
allowed value is entered,
the value of the gadget will be set to the minimum, and analogously for the
maximum. Clicking on the left trill box always moves the value closer to
@code{:val-1}, whether that is the max or min, and clicking on the right trill
box always moves the value closer to @code{:val-2}.

The current value of the gadget is stored in the @code{:value} slot, and may
be set directly using @code{s-value}. The @code{:scroll-incr} slot specifies
the increment for changing the value with the trill boxes.
All other slots work the same as in the standard @code{trill-device}. See
section @ref{trill-device} for more information.

The @code{:foreground-color} slot specifies the color of the object.


@section Motif Gauge
@node Motif Gauge
@anchor{motif-gauge}
@cindex{Motif-gauge}

@example
(create-instance 'gg:Motif-Gauge gg:motif-gadget-prototype
   (:maybe-constant '(:left :top :width :title :foreground-color :title-font
		      :value-font :enum-font :num-marks :tic-marks-p
		      :enumerate-p :value-feedback-p :text-offset :val-1 :val-2
		      :scr-incr :format-string :enum-format-string :visible))
   (:left 0)
   (:top 0)
   (:width 230)
   (:title "Motif Gauge")
   (:foreground-color opal:motif-gray)
   (:title-font opal:default-font)
   (:value-font opal:default-font)
   (:enum-font (create-instance NIL opal:font (:size :small)))
   (:num-marks 10)             @emph{; Includes endpoints}
   (:tic-marks-p T)
   (:enumerate-p T)
   (:value-feedback-p T)
   (:text-offset 5)
   (:val-1 0)
   (:val-2 180)
   (:scr-incr 5)
   (:format-string "~a")       @emph{; How to print the feedback value}          
   (:enum-format-string "~a")  @emph{; How to print the tic-mark values}
   (:keyboard-selection-p NIL)
   (:value (o-formula ...))
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

@center @image{motif-gauge-pix, 5.5in}

The @code{motif-gauge} is a semi-circular meter with tic-marks around the
perimeter. As with scroll bars and sliders, this object allows the user to
specify a value between minimum and maximum values. An arrow-shaped polygon
points to the currently chosen value, and may be rotated either by dragging
it with the mouse or by the arrow keys when keyboard selection is activated.
Text below the gauge reports the current value to which the needle is pointing.

The slots @code{:num-marks}, @code{:tic-marks-p}, @code{:enumerate-p}, @code{:val-1},
@code{:val-2}, and @code{:enum-font} are implemented as in the standard Garnet
sliders (see section @ref{sliders}). The value in @code{:val-1} corresponds to
the right side of the gauge.

The title of the gauge is specified in @code{:title}. No title will
appear if @code{:title} is @code{nil}. The fonts for the title of the gauge
and the current chosen value are specified in @code{:title-font} and
@code{:value-font}, respectively.

If @code{:value-feedback-p} is T, then numerical text will appear below the
gauge indicating the currently chosen value. The value in @code{:text-offset}
determines the distance between the gauge and the title string, and between
the title string and the value feedback.

The @code{:format-string} and @code{:enum-format-string} slots allow you to
control the formatting of the text strings, in case the standard formatting
is not appropriate. This is mainly useful for floating point numbers.
The slots should each contain a string that can be passed to the lisp function
@code{format}. The default string is @code{"~a"}.

Setting @code{:keyboard-selection-p} to T activates the keyboard interface to
the @code{motif-gauge}. The left and right arrow keys can then be used to
change the value of the gauge. The increment by which the value of the gauge
changes during each press of an arrow key is in @code{:scr-incr}.




@section Motif Buttons
@node Motif Buttons
@anchor{motif-buttons}

@float Figure, fig:ex2
@center @image{motif-buttons-pix, 5.5in}
@caption{Motif Text Buttons, Check Buttons, and Radio Buttons}
@end float

As with the standard Garnet buttons, the Motif buttons can be either a single,
stand-alone button or a panel of buttons. Use of the Motif gadgets is
identical to the use of standard Garnet buttons in the following respects
(see Section @ref{buttons}).

@enumerate
All slots that can be customized in an aggrelist can be customized in the
Motif button panels.

The @code{:value} slot contains the string or atom of the currently selected
item (in the @code{motif-check-button-panel} this value is a list of selected
items). In button panels, the currently selected component of the panel's
aggrelist is named in the @code{:value-obj} slot.

The @code{:width} and @code{:height} of button panels are determined internally,
and may not be set directly. Instead, refer to the slots
@code{:fixed-width-size} and @code{:fixed-height-size}. The @code{:width} and
@code{:height} slots may be accessed after the object is instantiated.

The @code{:items} slot can be either a list of strings, a list of atoms, or a
list of string/function or atom/function pairs (see section @ref{items-slot}).

The font in which the button labels appear may be specified in the @code{:font}
slot.

Most of the buttons and button panels have a @code{:toggle-p} slot that
controls whether buttons can become deselected. If the value of this
slot is T, then clicking on a selected button deselects it. Otherwise,
the button always stays selected, though the @code{:selection-function}
and the item functions will continue to be executed each time the
button is pressed.
@end enumerate

The following slots provide additional functionality for the Motif buttons:

@enumerate

In single Motif buttons, if the @code{:active-p} slot is @code{nil}, then the string of
the button appears in "grayed-out" text and the button is not user selectable.

Analogously, the @code{:inactive-items} slot of the Motif button panels contains
a list of strings or atoms corresponding to the members of the @code{:items}
list. The text of each item listed in @code{:inactive-items} will appear
"grayed-out" and those buttons will not be user selectable. If @code{:active-p}
is set to @code{nil}, then all items will appear "grayed-out".

@cindex{keyboard-selection}
When the slot @code{:keyboard-selection-p} is T, the keyboard interface to the
button gadgets is activated. The arrow keys will move the selection box among
the buttons in a button panel, and the space-bar will select the boxed
button. The component of the button panel aggrelist currently surrounded by
the selection box is named in
@code{:keyboard-selection-obj}, and its string is in @code{:keyboard-selection}.
Thus, the slot @code{:keyboard-selection} may be set with a string (or an atom,
depending on the @code{:items} list) to put the selection box around a button.
Since this slot contains a formula, the programmer may not supply an initial
value at create-instance time. Instead, as with the @code{:value} slot, the user
must first gv the @code{:keyboard-selection} slot and then s-value it to
the desired initial value.

@b{NOTE:} When keyboard selection is activated, the space-bar is used to
select buttons, while the return key is used to select items in the
@code{motif-menu}.
@end enumerate

@subsection Motif Text Buttons
@node Motif Text Buttons
@anchor{motif-text-buttons}
@cindex{Motif-text-buttons}

@example
(create-instance 'gg:Motif-Text-Button gg:motif-gadget-prototype
   (:maybe-constant '(:left :top :text-offset :active-p :string :toggle-p :font
                      :final-feedback-p :foreground-color :visible))
   (:left 0)
   (:top 0)
   (:text-offset 5)
   (:active-p T)
   (:string "Motif Text Button")
   (:font opal:default-font)
   (:final-feedback-p NIL)
   (:toggle-p T)
   (:keyboard-selection-p NIL)
   (:foreground-color opal:motif-gray)
   (:value (o-formula (if (gvl :selected) (gvl :string))))
   (:selected (o-formula (gvl :value)))  @emph{;Set by interactor}
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example
@sp 1

@example
(create-instance 'gg:Motif-Text-Button-Panel motif-gadget-prototype
   (:maybe-constant '(:left :top :text-offset :final-feedback-p :toggle-p :items :font
                      :foreground-color :direction :v-spacing :h-spacing :v-align
                      :h-align :indent :fixed-width-p :fixed-width-size :fixed-height-p
                      :fixed-height-size :rank-margin :pixel-margin :visible))
   (:left 0)
   (:top 0)
   (:text-offset 5)
   (:final-feedback-p NIL)
   (:items '("Text 1" "Text 2" "Text 3" "Text 4"))
   (:inactive-items NIL)
   (:toggle-p NIL)
   (:keyboard-selection-p NIL)
   (:keyboard-selection (o-formula ...))
   (:keyboard-selection-obj (o-formula ...))
   (:font opal:default-font)
   (:foreground-color opal:motif-gray)
   (:value-obj NIL)
   (:value (o-formula ...))
   (:active-p (o-formula ...))
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   <All customizable slots of an aggrelist>)
@end example

The loader file for the @code{motif-text-button} and @code{motif-text-button-panel}
is "motif-text-buttons-loader".

The @code{motif-text-button-panel} is a set of rectangular buttons, with the
string or atom associated with each button aligned inside.
The button will stay depressed after the mouse
is released only if @code{:final-feedback-p} is T.

The distance from the beginning of the longest label to the inside edge of the
button frame is specified in @code{:text-offset}.

@subsection Motif Check Buttons
@node Motif Check Buttons
@anchor{motif-check-buttons}
@cindex{Motif-check-buttons}

@example
(create-instance 'gg:Motif-Check-Button gg:motif-gadget-prototype
   (:maybe-constant '(:left :top :button-width :text-offset :text-on-left-p
		      :active-p :toggle-p :string :font :foreground-color :visible))
   (:left 0)
   (:top 0)
   (:button-width 12)
   (:text-offset 5)
   (:text-on-left-p NIL)
   (:active-p T)
   (:string "Motif Check Button")
   (:font opal:default-font)
   (:toggle-p T)
   (:keyboard-selection-p NIL)
   (:foreground-color opal:motif-gray)
   (:value (o-formula (if (gvl :selected) (gvl :string))))
   (:selected (o-formula (gvl :value))) @emph{;Set by interactor}
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example
@sp 1

@example
(create-instance 'gg:Motif-Check-Button-Panel motif-gadget-prototype
   (:maybe-constant '(:left :top :button-width :text-offset :text-on-left-p :items
                      :font :foreground-color :direction :v-spacing :h-spacing 
                      :v-align :h-align :indent :fixed-width-p :fixed-width-size
                      :fixed-height-p :fixed-height-size :rank-margin :pixel-margin
                      :visible))
   (:left 0)
   (:top 0)
   (:button-width 12)
   (:text-offset 5)
   (:text-on-left-p NIL)
   (:items '("Check 1" "Check 2" "Check 3"))
   (:inactive-items NIL)
   (:keyboard-selection-p NIL)
   (:keyboard-selection (o-formula ...))
   (:keyboard-selection-obj (o-formula ...))
   (:font opal:default-font)
   (:foreground-color opal:motif-gray)
   (:value-obj NIL)
   (:value (o-formula ...))
   (:active-p (o-formula ..))
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   <All customizable slots of an aggrelist>)
@end example

The loader file for the @code{motif-check-button} and the
@code{motif-check-button-panel} is "motif-check-buttons-loader".

The @code{motif-check-button-panel} is analogous to the @code{x-button-panel} from
the standard Garnet Gadget Set. Any number of buttons may be selected at one
time, and clicking on a selected button de-selects it.

Since the @code{motif-check-button-panel} allows selection of several items at
once, the @code{:value} slot is a list of strings (or atoms), rather than a
single string. Similarly, @code{:value-obj} contains a list of button objects.

The slot @code{:text-on-left-p} specifies whether the text will appear on the
right or left of the buttons. A @code{nil} value indicates that the text should
appear on the right. When text appears on the right, the designer will
probably want to set @code{:h-align} to @code{:left} in order to left-justify the
text against the buttons.

The distance from the labels to the buttons is specified in @code{:text-offset}.

The slot @code{:button-width} specifies the height and width of each button
square.

@subsection Motif Radio Buttons
@node Motif Radio Buttons
@anchor{motif-radio-buttons}
@cindex{Motif-radio-buttons}

@example
(create-instance 'gg:Motif-Radio-Button gg:motif-gadget-prototype
   (:maybe-constant '(:left :top :button-width :text-offset :text-on-left-p
		      :toggle-p :active-p :string :font :foreground-color :visible))
   (:left 0)
   (:top 0)
   (:button-width 12)
   (:text-offset 5)
   (:text-on-left-p NIL)
   (:active-p T)
   (:string "Motif Radio Button")
   (:font opal:default-font)
   (:toggle-p T)
   (:keyboard-selection-p NIL)
   (:foreground-color opal:motif-gray)
   (:value (o-formula (if (gvl :selected) (gvl :string))))
   (:selected (o-formula (gvl :value)))  @emph{; Set by interactor}
   (:selection-function NIL)             @emph{; (lambda (gadget value))}
   )
@end example
@sp 1

@example
(create-instance 'gg:Motif-Radio-Button-Panel motif-gadget-prototype
   (:maybe-constant '(:left :top :button-width :text-offset :text-on-left-p :toggle-p
                      :items :font :foreground-color :direction :v-spacing :h-spacing
                      :v-align :h-align :indent :fixed-width-p :fixed-width-size
		      :fixed-height-p :fixed-height-size :rank-margin :pixel-margin
                      :visible))
   (:left 0)
   (:top 0)
   (:button-width 12)
   (:text-offset 5)
   (:text-on-left-p NIL)
   (:items '("Radio 1" "Radio 2" "Radio 3"))
   (:inactive-items NIL)
   (:toggle-p NIL)
   (:keyboard-selection-p NIL)
   (:keyboard-selection (o-formula ...))
   (:keyboard-selection-obj (o-formula ...))
   (:font opal:default-font)
   (:foreground-color opal:motif-gray)
   (:value-obj NIL)
   (:value (o-formula ...))
   (:active-p (o-formula ...))
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   <All customizable slots of an aggrelist>)
@end example

The loader file for the @code{motif-radio-button} and
@code{motif-radio-button-panel} is "motif-radio-buttons-loader".

The @code{motif-radio-button-panel} is a set of diamond buttons with items
appearing to either the left or the right of the buttons (implementation
of @code{:button-width}, @code{:text-on-left-p} and @code{:text-offset} is identical
to the motif check buttons). Only one button may be selected at a time.



@section[Motif Option Button]
@anchor{motif-option-button}
@cindex{motif-option-button}

@example
(create-instance 'gg:Motif-Option-Button opal:aggregadget
  (:maybe-constant '(:left :top :text-offset :label :button-offset :items :initial-item
                     :button-font :label-font :button-fixed-width-p :v-spacing
                     :keep-menu-in-screen-p :menu-h-align :foreground-color))
  (:left 40) (:top 40)
  (:text-offset 6)
  (:label "Option button:")
  (:button-offset 2)
  (:items '("Item 1" "Item 2" "Item 3" "Item 4"))
  (:initial-item (o-formula (first (gvl :items))))
  (:button-font opal:default-font)
  (:label-font (opal:get-standard-font NIL :bold NIL))
  (:foreground-color opal:motif-gray)
  (:value (o-formula (gvl :option-text-button :string)))
  (:button-fixed-width-p T)
  (:v-spacing 8)
  (:keep-menu-in-screen-p T)
  (:menu-h-align :left)
  (:selection-function NIL)   @emph{; (lambda (gadget value))}
  ...)
@end example

@float Figure, fig:ex2
@center @image{motif-option-button-normal, 5.5in}

@center @image{motif-option-button-pressed, 5.5in}

@caption{A Motif option button in its normal state (left), and showing the
available options after the button is pressed (right).}
@anchor{motif-option-button-tag}
@end float


This is a Motif version of the @code{option-button} gadget.
When the left mouse button is clicked
on the option button, a menu will pop up, from which items can be
selected by moving the mouse over the desired item and releasing the
button. The selected item will appear as the new label of the button.
Figure @ref{motif-option-button-tag} shows a Motif option button in its normal
state and after the button has been pressed.

This button works exactly like the standard @code{option-button} described
in section @ref{option-button}.
The customizations are also alike, except that the @code{motif-option-button}
does not have a @code{:button-shadow-offset} slot and adds a
@code{:background-color} slot. The loader file for the motif option button
is named "motif-option-button-loader".



@section Motif Menu
@node Motif Menu
@anchor{motif-menu}
@cindex{Motif-menu}

@example
(create-instance 'gg:Motif-Menu gg:motif-gadget-prototype
   (:maybe-constant '(:left :top :min-frame-width :text-offset :v-spacing :h-align
                      :items :accelerators :bar-above-these-items :item-font
                      :accel-font :item-to-string-function :final-feedback-p
                      :foreground-color :visible))
   (:left 0)
   (:top 0)
   (:min-frame-width 0)
   (:text-offset 6)
   (:v-spacing 8)
   (:h-align :left)
   (:items '("Menu 1" "Menu 2" "Menu 3" "Menu 4" "Menu 5"))
   (:inactive-items NIL)
   (:accelerators NIL)
   (:bar-above-these-items NIL)
   (:item-to-string-function
    #'(lambda (item)
	(if item
	    (if (stringp item)
		item
		(string-capitalize (string-trim ":" item)))
	    "")))
   (:final-feedback-p T)
   (:keyboard-selection-p NIL)
   (:keyboard-selection (o-formula ...))
   (:keyboard-selection-obj (o-formula ...))
   (:item-font opal:default-font)
   (:accel-font opal:default-font)
   (:foreground-color opal:motif-gray)
   (:value-obj NIL)
   (:value (o-formula ...))
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

@center @image{motif-menu-pix, 5.5in}

The loader file for the @code{motif-menu} is "motif-menu-loader".


@subsection Programming Interface
@node Programming Interface

The @code{motif-menu} is analogous to the @code{menu} from the standard Gadget
Set, with the addition of an @code{:accelerators} slot which facilitates the
selection of a menu item by the user. Only one item may be selected at a
time.

The @code{:accelerators} slot is a list of triples which correspond to the items
in the @code{:items} list. Consider the following slot definitions in
an instance of the @code{motif-menu}:
@example
(:items '("Remove-window" "Move-window" ...))
(:accelerators '((#\R "Alt+F2" :META-F2) (#\M "Alt+F3" :META-F3) ...))
@end example
Since the #\M character appears in the second accelerator pair, the "M" in the
"Move-window" item will be underlined in the menu. The string "Alt+F3" will
appear to the right of the "Move-window" item in the menu. Interactors
are defined in the @code{motif-menu} that allow the user to press the "M" key
whenever keyboard selection is activated to select "Move-window". And, after
properly initializing an instance of the @code{motif-menu-accelerator-inter}
(described below), simultaneously pressing the "Alt" and "F3" keys will also
select "Move window".

Since this menu supports only single selection, the @code{:value} slot contains
the currently selected item (from the @code{:items} list) and the @code{:value-obj}
slot contains the currently selected object in the menu's aggrelist.

The @code{:items} and @code{:item-to-string-function} slots are implemented
as in the @code{:scrolling-menu} from the standard Gadget Set (see Section
@ref{scrolling-menu}). Each item (the actual item, not its string conversion)
specified in the @code{:inactive-items} list will appear "grayed-out" and will
not be selectable.

A separator bar will appear above each item listed in the slot
@code{:bar-above-these-items}.

The minimum width of the menu frame is determined by @code{:min-frame-width}.
The menu will appear wider than this value only if the longest item string
(and its corresponding accelerator, if any) will not fit in a menu of this
width.

The @code{:v-spacing} slot determines the distance between each item in the menu,
and @code{:text-offset} determines the distance from the menu frame to the
items (and the distance between the longest item and its corresponding
accelerator, if any).

The justification of the items in the menu is determined by the slot
@code{:h-align} and may be either @code{:left}, @code{:center}, or @code{:right}.

A feedback box will appear around the currently selected item if
@code{:final-feedback-p} is T.

When the slot @code{:keyboard-selection-p} is T, the keyboard interface to the
@code{motif-menu} is activated. The arrow keys will move the selection box among
the items in the menu, and the return key will select the boxed item.
The component of the menu's aggrelist currently surrounded by the selection
box is named in
@code{:keyboard-selection-obj}, and its string is in @code{:keyboard-selection}.
Thus, the slot @code{:keyboard-selection} may be set with a string (or an atom,
depending on the @code{:items} list) to put the selection box around an item.
Since this slot contains a formula, the programmer may not supply an initial
value at create-instance time. Instead, as with the @code{:value} slot, the user
must first gv the @code{:keyboard-selection} slot and then s-value it to
the desired initial value. @b{NOTE:} The return key is used to select items
in the @code{motif-menu}, while the space-bar is used to select Motif buttons.

The fonts in which to display the items and the accelerator strings are in
@code{:item-font} and @code{:accel-font}, respectively.


@subsection The Motif-Menu Accelerator Interactor
@node The Motif-Menu Accelerator Interactor

@example
(create-instance 'gg:Motif-Menu-Accelerator-Inter inter:button-interactor
   (:window NIL)
   (:menus NIL)
   (:continuous NIL)
   (:start-where T)
   (:start-event (o-formula (multiple-value-call #'append
			      (values-list (gvl :accel-chars)))))
   (:accel-chars (o-formula (mapcar #'(lambda (menu)
					(gv menu :global-accel-chars))
				    (gvl :menus))))
   (:waiting-priority gg:motif-tab-priority-level)
   (:running-priority gg:motif-tab-priority-level)
   (:stop-action #'(lambda (interactor obj-over) ...))
   (:final-function NIL))
@end example

@cindex{motif-menu-accelerator-inter}
The @code{motif-menu-accelerator-inter} interactor is used with a set of
@code{motif-menu}
instances to implement the global character selection feature (:META-F2, etc.
above). When an instance is supplied with a list of menus in the @code{:menus}
slot and the window of the menus in the @code{:window} slot, then when the
user strikes any of the accelerator keys defined in the menus, the
corresponding menu item will be selected and its functions will be executed.
Only one item may be assigned to each global accelerator character.
An example of the @code{motif-menu-accelerator-inter} may be found in demo-motif
and in the @code{motif-menu} demo.


@subsection Adding Items to the Motif-Menu
@node Adding Items to the Motif-Menu

The @code{add-item} method for the @code{motif-menu} is similar to the standard
method, except that the programmer may supply an accelerator to be added
to the menu which corresponds to the item being added.

@example
opal:add-item @i{motif-menu item} [:accelerator @i{accel}] [[:where] @i{position [locator]} [:key @i{function-name}]]
@end example

The value for @emph{accel} should be an accelerator triplet that can be
inserted into the @code{:accelerators} list of the @emph{motif-menu}, such as
@code{'(#\R "Alt+F2" :META-F2)}.
Note that the accelerator parameter must come @b{before} the "where" keys.

The usual @code{remove-item} method is used for the @code{motif-menu}, with the
additional feature that the accelerator corresponding to the old item is
automatically removed from the @code{:accelerators} list (if there is one).


@section[Motif Scrolling Menu]
@anchor{motif-scrolling-menu}
@cindex{motif-scrolling-menu}

@center @image{motif-scrolling-menu-pix, 5.5in}

@example
(create-instance 'gg:Motif-Scrolling-Menu motif-gadget-prototype
   (:maybe-constant '(:left :top :scroll-on-left-p
		      :scr-incr :page-incr :min-frame-width :v-spacing :h-align
		      :multiple-p :items :item-to-string-function
		      :item-font :num-visible :int-menu-feedback-p
		      :final-feedback-p :text-offset :title :title-font
		      :visible))
   (:left 0) (:top 0)
   (:active-p T)

   ;; Scroll bar slots
   (:scroll-on-left-p T)
   (:scr-incr 1)
   (:page-incr (o-formula (gvl :num-visible)))
   (:scroll-selection-function NIL)

   ;; Menu slots
   (:toggle-p T)
   (:min-frame-width 0)
   (:v-spacing 6)
   (:h-align :left)
   (:multiple-p T)
   (:items '("Item 1" "Item 2" "Item 3" "Item 4" "Item 5" "Item 6" "Item 7"
	     "Item 8" "Item 9" "Item 10" "Item 11" "Item 12" "Item 13"
	     "Item 14" "Item 15" "Item 16" "Item 17" "Item 18" "Item 19"
	     "Item 20"))
   (:item-to-string-function
    #'(lambda (item)
	(if item
	    (if (stringp item)
		item
		(string-capitalize (string-trim ":" item)))
	    "")))
   (:item-font opal:default-font)
   (:num-visible 5)
   (:int-menu-feedback-p T)
   (:final-feedback-p T)
   (:text-offset 6)
   (:title NIL)
   (:title-font (opal:get-standard-font :serif :roman :large))
   (:menu-selection-function NIL)
   (:selected-ranks NIL)
   (:foreground-color opal:motif-gray)
   (:value (o-formula ...)))
@end example


The loader file for the @code{motif-scrolling-menu} is named
"motif-scrolling-menu-loader".

The @code{motif-scrolling-menu} is very much like
the standard @code{scrolling-menu}, but there are a few differences. Since the
scrolling window has a motif-v-scroll-bar as a part of it, the slots
@code{:min-scroll-bar-width}, @code{page-trill-p}, @code{:indicator-text-p}, and
@code{:int-scroll-feedback-p} are not applicable.

Also, the @code{motif-scrolling-menu} has a slot @code{:foreground-color}, which is
absent in the standard @code{scrolling-menu}.


@section Motif-Menubar
@node Motif-Menubar
@anchor{motif-menubar}
@cindex{motif-menubar}

@float Figure, fig:ex2
@center @image{motif-menubar-pix, 5.5in}
@caption{An instance of the @t[motif-menubar] gadget}
@anchor{motif-menubar-pix}
@end float

@example
(create-instance 'gg:Motif-Menubar gg::motif-gadget-prototype
  (:left 0)(:top 0)
  (:items NIL)
  (:title-font opal:default-font)
  (:item-font opal:default-font)
  (:min-menubar-width 0)          
  (:accelerators NIL)
  (:accelerator-windows (o-formula (gvl :window)))
  (:bar-above-these-items NIL))
@end example

To load the @code{motif-menubar}, execute
@code{(garnet-load "gadgets:motif-menubar-loader")}.

The @code{motif-menubar} is used very much like the standard @code{menubar},
described in section @ref{menubar}.
The @code{motif-menubar} has several additional features, including:
slots that allow the menubar to extend across the top of the entire window,
keyboard accelerators, and decorative "bars" in the submenus.

A simple demo which uses the @code{motif-menubar} is loaded along with the
@code{motif-menubar}. To run it, execute @code{(gg:motif-menubar-go)}.
Larger demos also use the @code{motif-menubar}, including @code{GarnetDraw} and
@code{Demo-Multifont}.

The @code{:min-menubar-width} slot specifies how wide the @code{motif-menubar}
should be. If it contains a value greater than the current
width of the @code{motif-menubar}, the bar will extend itself. However, the
items will remain fixed (i.e. they won't spread out equidistantly over
the bar). This feature is useful when you want the menubar to extend across
the top of the entire window, as in Figure @ref{motif-menubar-pix}.


@subsection Selection Functions
@node Selection Functions
@anchor{mmbar-sel-fns}

Like in the standard @code{menubar}, there is no @code{:value} slot for this
gadget. The designer must use the @code{:selection-function} or the
item functions to act on the user's selections.

There are three levels of functions in the @code{motif-menubar} gadget that
may be called when the user makes a selection. Functions can be
attached to individual submenu items, whole submenus, or the top level
menubar.

All the selection functions take three parameters:

@code{(lambda (gadget menu-item submenu-item))}

The following @code{:items} list is taken from the @code{gg:Motif-Menubar-Go} demo,
defined at the end of motif-menubar.lisp.

@example
(:items
 `((:family ,#'family-fn
	    ((:fixed ,#'fixed-fn)(:serif ,#'serif-fn)(:sans-serif ,#'sans-serif-fn)))
   (:face ,#'face-fn
	  ((:roman)(:bold)(:italic)(:bold-italic)))
   (:size ,#'size-fn
	  ((:small)(:medium)(:large)(:very-large)))))
@end example

This @code{:items} list attaches the functions @code{family-fn},
@code{face-fn}, and @code{size-fn} to each of the @emph{submenus}
in the menubar. Whenever the user selects an item from one of those submenus,
the corresponding submenu-function will be executed.

Additionally, the functions @code{fixed-fn}, @code{serif-fn},
and @code{sans-serif-fn} are attached to each @emph{item} in the first
submenu. Whenever the user chooses "Fixed", "Serif", or "Sans-Serif" from
the "Family" menu, the function associated with that item will be executed.

The order of function execution is as follows:  First, the submenu-item
function is called, then the submenu function, and then the top-level
@code{:selection-function}. Notice that this is different from the order in
which the functions for the regular menubar are called.


@subsection Accelerators
@node Accelerators
@anchor{mmbar-accelerators}

Since the @code{motif-menubar} uses actual instances of the @code{motif-menu}
gadget for its submenus, the "accelerators" feature of the @code{motif-menu}
gadget can be used in the menubar. The syntax for specifying accelerators
is a bit more complicated in the menubar, because multiple submenus are used.

An accelerator is a relationship between a keyboard event and an item in
the menubar. When a key is typed that corresponds to a menubar item, the
function that is associated with the item is executed as if the user had
pulled down the submenu and selected the item with the mouse. Each accelerator
is specified by its lisp character (e.g., @code{:F3}), and a string to be shown
to the user describing the accelerator key (e.g., "F3"). These
string/character
pairs are supplied to the menubar in a list, one pair for each item in the
menubar. For example,

@example
(:accelerators '((("!f" :|META-f|) ("!b" :|META-b|))
		 NIL
		 (NIL NIL ("!x" :|META-x|))))
@end example

In this accelerators list, the first item in the first submenu has
accelerator string "!f", and is selected by the keyboard event,
:META-f. The second item in the first submenu has the
accelerator string "!b", and keyboard event :META-b. The second
submenu has no accelerators. The first two items in the third submenu
have no accelerators. The third item in the third submenu has string
"!x" and event META-x.	

In general, the format for the @code{:accelerators} slot is:

@example
(:accelerators '(((s1,1 k1,1) (s1,2 k1,2) ...)
		 ((s2,1 k2,1) (s2,2 k2,2) ...)
		 ...))
@end example

where sM,N is the accelerator string for the N-th item in the M-th
submenu, and kM,N is the keyboard event for the same.

The @code{:accelerator-windows} slot by default contains the @code{motif-menubar}'s
window, but may contain a list of windows. When an accelerator event occurs
in one of these windows, it will be perceived by the menubar and the item
functions will be executed. If the mouse is in a different window, and the
accelerator event occurs, the menubar will not notice the event. For this
reason, you should put a list of all your application's windows in this
slot, if you always want the accelerator to activate the menubar.


@subsection Decorative Bars
@node Decorative Bars

The "bars" feature of the @code{motif-menu} can also be used in the
@code{motif-menubar} gadget. The @code{:bar-above-these-items} slot specifies
over which items a horizontal line should appear. For example:

@example
(:bar-above-these-items '(("Small")
			  NIL
			  ("Faster" "Warp Speed")))
@end example

will cause a bar to appear above the item "Small" in the first
submenu, and above the items @code{"Faster"} and @code{"Warp Speed"} in the third
submenu, with no bars in the second submenu. In the @code{motif-menubar} demo,
pictured in Figure @ref{motif-menubar-pix}, there is a bar above third item
in the last submenu.


@subsection Programming the Motif-Menubar the Traditional Garnet Way
@node Programming the Motif-Menubar the Traditional Garnet Way

There are two approaches to programming a @code{motif-menubar}. The first,
discussed in this section, is the Garnet way, where all the @code{:items}
are provided while creating the menubar. The second approach, discussed
in section @ref{mmbar-components}, requires that all the sub-objects be
created individually and attached to the menubar. 

The format for the @code{:items} slot of the @code{motif-menubar} is the same as in
the regular @code{menubar}. For example,

@example
(:items '(("Speed" NIL (("Slow" Slow-Fn) ("Medium" Med-Fn)
			("Fast" Fast-Fn) ("Whoa" Too-Fast-Fn)))))
@end example

This @code{:items} list creates a menubar with one bar-item, @code{"Speed"},
which has no submenu selection function. In that bar-item's submenu,
are the items @code{"Slow"}, @code{"Medium"}, @code{"Fast"} and @code{"Whoa"},
which will call @code{Slow-Fn}, @code{Med-Fn}, @code{Fast-Fn}
and @code{Too-Fast-Fn} respectively when selected. Note that in contrast to the
example of Section @ref{mmbar-sel-fns}, we did not include #' function
specifiers with the selection function names. This is not necessary, because
the functions are invoked with @code{funcall}, and the symbols will be
dereferenced when necessary (though it would be faster to include the #', and
avoid the dereferencing).

The submenu-items should always be described with lists, even if they
have no functions (e.g., @code{("Slow")} instead of @code{"Slow"}). Also, the
submenu function should either be @code{nil} (as in the above example) or a function.
As in the regular menubar, the item functions are optional and may be
omitted.



@subsection An Example
@node An Example

The following example creates the @code{motif-menubar} pictured in Figure
@ref{motif-menubar-pix}. Note the behavior of the META-f accelerator and the
location of the bar.


@example
(create-instance 'WIN inter:interactor-window
  (:background-color opal:motif-gray)
  (:aggregate (create-instance 'TOP-AGG opal:aggregate)))

(defun Fixed-Fn (submenu bar-item submenu-item)
  (format T "Fixed called with ~s ~s ~s~%" submenu bar-item submenu-item))

(defun Face-Fn (gadget menu-item submenu-item)
  (format T "Face called with ~s ~s ~s~%"
	  gadget menu-item submenu-item))

(create-instance 'MY-MOTIF-MENUBAR gg:motif-menubar
  (:foreground-color opal:motif-gray)
  (:items
   '((:family NIL
	      ((:fixed fixed-fn)(:serif)(:sans-serif)))
     (:face face-fn
	    ((:roman)(:bold)(:italic)(:bold-italic)))
     (:size NIL
	    ((:small)(:medium)(:large)(:very-large)))))
  (:accelerators
   '((("!f" :|META-f|) ("!e" :|META-e|) ("!a" :|META-a|))
     (("!r" :|META-r|) ("!b" :|META-b|) ("!i" :|META-i|) ("!B" :META-B))
     (("!s" :|META-s|) ("!m" :|META-m|) ("!l" :|META-l|) ("!v" :|META-v|))))
  (:bar-above-these-items
   '(NIL
     NIL
     (:large))))

(opal:add-component TOP-AGG MY-MOTIF-MENUBAR)
(opal:update win)
@end example


@subsection Adding Items to the Motif-Menubar
@node Adding Items to the Motif-Menubar

Adding items to the @code{motif-menubar} is very similar to adding items to
the regular @code{menubar}, with the additional ability to add accelerators
to the menubar along with the new items.

The add-item method for the motif-menubar may be used to add submenus:

@cindex{Add-item}
@cindex{Motif-menubar}
@example
opal:Add-Item @i{menubar submenu} [:accelerators @i{accels}] @ref{method}
              @i{                              } [[:where] @i{position} [@i{locator}] [:key @i{index-function}]]
@end example

NOTE: If any accelerators are being added, the @code{:accelerators} keyword and
arguments @emph{must} appear before the @code{:where} arguments.

The following will add a bar item named "Volume", with a few items and
accelerators in it:

@example
(opal:add-item MY-MOTIF-MENUBAR 
	       '("Volume" NIL (("Low") ("Medium") ("High") ("Yowsa")))
	       :accelerators '(NIL NIL
			       ("!h" :|META-h|) ("!y" :|META-y|))
	       :before :size :key #'car)
@end example

To add a submenu item, use the function:

@example
gg:Add-Submenu-Item @i{menubar submenu-title submenu-item} @ref{method}
                    [:accelerator @i{accel}]
                    [[:where] @i{position} [@i{locator}] [:key @i{index-function}]]
@end example

As with the previous function, if any accelerators are being added, they
@emph{must} appear before the @code{:where}. Also, notice that since only one
accelerator is being added for the item, the keyword is @code{:accelerator}, not
@code{:accelerators}.

The following example will add a submenu item named "Quiet" to the
submenu named "Volume", and its accelerator will be META-q:

@example
(gg:add-submenu-item MY-MOTIF-MENUBAR "Volume" '("Quiet")
		     :accelerator '("!q" :|META-q|) :before "Low" :key #'car)
@end example



@subsection Removing Items from the Motif-Menubar
@node Removing Items from the Motif-Menubar

An item is removed from a @code{motif-menubar} in exactly the same way as
from a regular menubar. To remove an entire submenu, use:

@cindex{remove-item}
@cindex{motif-menubar}
@code{opal:Remove-Item @i<menubar submenu> @ref{method}}

For traditional Garnet programming, the @i<submenu> should be a sublist
of the top level @code{:items} list, or it can just be the title of a
submenu.

The following line will remove the "Volume" submenu from the previous
examples.

@code{(opal:remove-item MY-MOTIF-MENUBAR "Volume")}

For removing submenu items, use

@cindex{remove-submenu-item}
@code{gg:Remove-Submenu-Item @i<menubar submenu-title submenu-item> @ref{method}}

The following will remove the @code{:small} item from the submenu, @code{:size}.

@code{(gg:remove-submenu-item MY-MOTIF-MENUBAR :size '(:small))}


@subsection Programming the Motif-Menubar with Components
@node Programming the Motif-Menubar with Components
@anchor{mmbar-components}

The designer may also choose a bottom-up way of programming the
@code{motif-menubar}. The idea is to create the submenus of the menubar
individually using the functions described in this section, and then attach
them to a menubar.

@subsection An Example
@node An Example

This example creates a @code{motif-menubar} and several components, and
attaches them together. 

@example
(create-instance 'WIN inter:interactor-window
  (:background-color opal:motif-blue)
  (:aggregate (create-instance 'TOP-AGG opal:aggregate)))
	
@emph{; Create the menubar and a bar item}
(setf MY-MOTIF-MENUBAR (garnet-gadgets:make-motif-menubar))
(s-value MY-MOTIF-MENUBAR :foreground-color opal:motif-blue)
		
(setf MAC-BAR (garnet-gadgets:make-motif-bar-item :title "Fonts"))
		
@emph{; Create the submenu items}
(setf SUB1 (garnet-gadgets:make-motif-submenu-item :desc '("Gothic")))
(setf SUB2 (garnet-gadgets:make-motif-submenu-item :desc '("Venice")))
(setf SUB3 (garnet-gadgets:make-motif-submenu-item :desc '("Outlaw")))
		
@emph{; Add submenu items to the bar item}
(opal:add-item MAC-BAR SUB1)
(opal:add-item MAC-BAR SUB2)
(opal:add-item MAC-BAR SUB3 :after "Venice" :key #'car)
		
@emph{; Add the bar item to the menubar and update the window}
(opal:add-item MY-MOTIF-MENUBAR MAC-BAR
	       :accelerators '(("!g" :|META-g|) ("!v" :|META-v|) ("!o" :|META-o|)))

@emph{; Add the menubar to the top-level aggregate}
(opal:add-component TOP-AGG MY-MOTIF-MENUBAR)
		
(opal:update win)
@end example

When programming a @code{motif-menubar} by components, you should add
accelerators only when you add a bar-item to the menubar, or when adding
a submenu item to a bar item that has already been added to a menubar.
That is, you cannot add an accelerator to a submenu that has not been attached
to a menubar yet.

@subsection Creating Components of the Motif-Menubar
@node  Creating Components of the Motif-Menubar

A @code{motif-menubar} is essentially the same as a menubar in that there are
three components - the menubar itself, bar items containing submenus,
and submenu items. Each can be created with the following functions:

@cindex{make-motif-menubar}
@code{gg:Make-Motif-Menubar @ref{function}}

Will return an instance of @code{motif-menubar}.

@cindex{make-motif-bar-item}
@code{gg:Make-Motif-Bar-Item &key @i<desc font title> @ref{function}}

Returns a @code{motif-bar-item}. Like the regular @code{menubar}, the @code{:desc}
parameter is a description of the submenu (e.g., @code{'("Speed" NIL
(("Fast") ("Slow") ("Crawl")))}), and the font and title keys specify
the font and the heading of the submenu.

@cindex{make-motif-submenu-item}
@defun gg:make-motif-submenu-item &key desc enabled

Creates and returns an instance of @code{motif-submenu-item}, which is
actually a @code{motif-menu-item}, since each motif-submenu is just a
@code{motif-menu}. The @code{:desc} parameter describes the item, (e.g.,
@code{'("Italic")} or @code{'("Italic" italic-fn)}). The default for enabled is T.
@end defun

@subsection Adding Components to the Motif-Menubar
@node Adding Components to the Motif-Menubar

Two types of components that can be added to the @code{motif-menubar} are
bar-items and submenu-items. The @code{add-item} method can be used to add
new bar-items to the menubar, and can also be used to add new submenu-items
to existing bar-items. The @code{set-...} functions are used to
install a collection of components all at once.

@cindex{set-menubar}
@code{gg:Set-Menubar @i<motif-menubar new-bar-items> @ref{method}}

This removes the current bar-items from @i<motif-menubar> and adds the
new bar items. This is useful for recycling a menubar instead of creating
a new one.

@cindex{set-submenu}
@code{gg:Set-Submenu @i<motif-bar-item new-submenu-items> @ref{method}}

Sets the @i<motif-bar-item> to have the new submenu-items. For more
information on these two functions, see section @ref{menubar}.

@cindex{Add-item}
@cindex{Motif-menubar}
@example
opal:Add-Item @i<motif-menubar motif-bar-item> [:accelerators @i<accels>] @ref{method}
              @i<                                                 > [[:where] @i<position> [@i<locator>] [:key @i<index-function>]]
@end example

Will add @i<motif-bar-item> to @i<motif-menubar>. As usual, if any
accelerators are being added, the @code{:accelerators} key @emph{must} be
specified before the @code{:where} key. The @code{:accelerators} syntax is
described in Section @ref{mmbar-accelerators}.

@cindex{Add-item}
@cindex{Motif-menubar}
@example
opal:Add-Item @i<motif-bar-item motif-menu-item> @ref{method}
              [:accelerator @i<accels>] 
              [[:where] @i<position> [@i<locator>] [:key @i<index-function>]]
@end example

Adds the submenu-item, @i<motif-menu-item> to @i<motif-bar-item>. If the
@i<motif-bar-item> is not attached to a @code{motif-menubar}, then no
accelerators will be added, regardless of whether any are specified.

The following example shows how bar items are added to a @code{motif-menubar}:

@example
(setf bar1 (gg:make-motif-bar-item
            :desc '("Color" NIL (("Red") ("Blue") ("Polka Dots")))))	
(setf bar2 (gg:make-motif-bar-item
            :desc '("Size" NIL (("Small") ("Medium") ("Large")))))
(opal:add-item MY-MOTIF-MENUBAR bar1
               :accelerators '(("!r" :|META-r|) ("!b" :|META-b|) ("!p" :|META-p|)))
(opal:add-item MY-MOTIF-MENUBAR bar2 :before bar1)	
(opal:update win)
@end example

This sequence shows how submenu-items can be attached to bar-items:

@example
(setf color1 (gg:make-motif-submenu-item :desc '("Maroon")))
(setf color2 (gg:make-motif-submenu-item :desc '("Peachpuff")))
(opal:add-item bar1 color1 :accelerator '("!m" :|META-m|))
(opal:add-item bar1 color2 :after "Blue" :key #'car)
@end example


@subsection Removing Components from the Menubar
@node Removing Components from the Menubar

Bar-items and submenu-items can be removed from the menubar with the
@code{remove-item} method.

In the example from the previous section, to remove @code{color1} from @code{bar1},
we say:

@code{(opal:remove-item bar1 color1)}

And to remove the @code{bar1} itself:

@code{(opal:remove-item MY-MOTIF-MENUBAR bar1)}


@subsection Methods Shared with the Regular Menubar
@node Methods Shared with the Regular Menubar

The following methods have the same effect on the @code{motif-menubar} as
they have on the standard @code{menubar}. Please see section @ref{menubar}
for more information.

@example
gg:Menubar-Components @i<motif-menubar> @ref{method}
gg:Submenu-Components @i<motif-bar-item> @ref{method}
gg:Get-Bar-Component @i<motif-menubar> @i<item> @ref{method}
gg:Get-Submenu-Component @i<motif-bar-item> @i<item> @ref{method}
gg:Find-Submenu-Component @i<motif-menubar> @i<submenu-title> @i<submenu-item> @ref{method}
gg:Menubar-Disable-Component @i<motif-menubar-component> @ref{method}
gg:Menubar-Enable-Component @i<motif-menubar-component> @ref{method}
gg:Menubar-Enabled-P @i<motif-menubar-component> @ref{method}
gg:Menubar-Get-Title @i<motif-menubar-component> @ref{method}
gg:Menubar-Set-Title @i<motif-menubar-component> @ref{method}
gg:Menubar-Installed-P @i<motif-menubar-component> @ref{method}
@end example



@section Motif-Scrolling-Labeled-Box
@node Motif-Scrolling-Labeled-Box
@anchor{motif-scrolling-labeled-box}
@cindex{motif-scrolling-labeled-box}

@example
(create-instance 'gg:Motif-Scrolling-Labeled-Box motif-gadget-prototype
   (:maybe-constant '(:left :top :width :field-offset :label-offset :label-string
                      :field-font :label-font :foreground-color :active-p :visible))
   (:left 0)
   (:top 0)
   (:width 135)
   (:field-offset 4)
   (:label-offset 5)
   (:label-string "Label:")
   (:value "Field")
   (:field-font opal:default-font)    @emph{;;**Must be fixed width**}
   (:label-font (create-instance NIL opal:font (:face :bold)))
   (:foreground-color opal:motif-gray)
   (:keyboard-selection-p NIL)
   (:active-p T)
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

@center @image{motif-scrolling-labeled-box-pix, 5.5in}

The loader file for the @code{motif-scrolling-labeled-box} is
"motif-scrolling-labeled-box-loader".

This gadget is a Motif version of the @code{scrolling-labeled-box}.
The @code{:width} of the box is fixed, and the
@code{:value} string will scroll inside the box if it is too long to be
displayed.

When the @code{:active-p} slot is set to @code{nil}, both the label and the field will
appear "grayed-out" and the field will not be editable.



@section Motif-Error-Gadget
@node Motif-Error-Gadget
@anchor{motif-error-gadget}
@cindex{motif-error-gadget}
@center @image{motif-error-gadget-pix, 5.5in}

@example
(create-instance 'gg:Motif-Error-Gadget opal:aggregadget
   (:string "Error")
   (:parent-window NIL)
   (:font (opal:get-standard-font :sans-serif :bold :medium))
   (:justification :center)
   (:modal-p T)
   (:beep-p T)
   (:window NIL)        @emph{;; Automatically initialized}
   (:foreground-color opal:motif-orange)
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

The loader file for the @code{motif-error-gadget} is "motif-error-gadget-loader".

The @code{motif-error-gadget} is a dialog box that works exactly the same way
as the @code{error-gadget} described in section @ref{error-gadget}. The same
caveats apply, and the functions @code{display-error} and
@code{display-error-and-wait} may be used to display the dialog box.

There is an additional slot provided in the @code{motif-error-gadget} which
determines the color of the dialog box. The @code{:foreground-color} slot may
contain any instance of @code{opal:color}.



@section Motif-Query-Gadget
@node Motif-Query-Gadget
@anchor{motif-query-gadget}
@cindex{motif-query-gadget}
@example
(create-instance 'gg:Motif-Query-Gadget gg:motif-error-gadget
   (:string "Is that OK?")
   (:button-names '("OK" "CANCEL"))
   (:parent-window NIL)
   (:font (opal:get-standard-font :sans-serif :bold :medium))
   (:justification :center)
   (:modal-p T)
   (:beep-p T)
   (:window NIL)        @emph{;; Automatically initialized}
   (:foreground-color opal:motif-orange)
   (:selection-function NIL)   @emph{; (lambda (gadget value))}
   )
@end example

The loader file for the @code{motif-query-gadget} is "motif-error-gadget-loader"
(it is defined in the same file as the @code{motif-error-gadget}).

The @code{motif-query-gadget} works exactly the same way
as the @code{query-gadget} described in section @ref{query-gadget}.
It has more buttons than the @code{motif-error-gadget}, so it can be used as
a general-purpose dialog box.
The functions @code{display-query} and @code{display-query-and-wait}
may be used to display the dialog box.

The additional @code{:foreground-color} slot may contain any instance of
@code{opal:color}, and determines the color of the dialog box.


@section[Motif Save Gadget]
@anchor{motif-save-gadget}
@float Figure, fig:ex2
@center @image{motif-save-gadget, 5.5in}
@caption{An instance of the Motif save gadget. "/usr0/rajan" is the
current directory.}
@anchor{motif-save-gadget-tag}
@end float

@example
(create-instance 'motif-save-gadget opal:aggregadget  
  (:maybe-constant '(:left :top :parent-window :window-title :window-left :window-top
		     :message-string :num-visible :initial-directory :button-panel-items 
		     :button-panel-h-spacing :min-gadget-width :check-filenames-p
                     :modal-p :query-message :query-buttons :foreground-color
                     :dir-input-field-font :dir-input-label-font :file-input-field-font
                     :file-input-label-font :file-menu-font :button-panel-font 
                     :message-font))
  (:window-title "save window")
  (:initial-directory "./")
  (:message-string "fetching directory...")
  (:num-visible 6)
  (:button-panel-items '("save" "cancel"))
  (:button-panel-h-spacing 25)
  (:min-gadget-width 240)
  (:modal-p NIL)
  (:check-filenames-p t)
  (:query-message "save over existing file")
  (:foreground-color opal:motif-light-blue)
  (:selection-function NIL)   @emph{; (lambda (gadget value))}
  (:dir-input-field-font (opal:get-standard-font NIL NIL :small))
  (:dir-input-label-font (opal:get-standard-font NIL :bold NIL))
  (:file-input-field-font (opal:get-standard-font NIL NIL :small))
  (:file-input-label-font (opal:get-standard-font NIL :bold NIL))
  (:message-font (opal:get-standard-font :fixed :italic :small))
  (:file-menu-font (opal:get-standard-font NIL :bold NIL))
  (:button-panel-font opal:default-font)
  ...)
@end example

The @code{motif-save-gadget} works exactly like the @code{save-gadget}, described
in section @ref{save-gadget}. The only
difference is that the @code{motif-save-gadget} has a slot called
@code{:foreground-color} which allows the user to set the color of the
gadget. This slot can be set to any @code{opal:color} object.

The loader file for the @code{motif-save-gadget} is named
"motif-save-gadget-loader". Figure @ref{motif-save-gadget-tag} shows an
instance of the Motif save gadget.





@section[Motif Load Gadget]
@anchor{motif-load-gadget}
@cindex{motif-load-gadget}
@example
(create-instance 'gg:Motif-Load-Gadget opal:aggregadget  
  (:maybe-constant '(:left :top :parent-window :window-title :window-left
		     :window-top :dir-input-field-font :dir-input-label-font
		     :message-font :message-string :num-visible :file-menu-font
		     :initial-directory :file-input-field-font
		     :file-input-label-font :button-panel-items :button-panel-font
		     :button-panel-h-spacing :min-gadget-width :modal-p
		     :check-filenames-p :foreground-color)))
  (:parent-window NIL)
  (:window-title "load window")
  (:message-string "fetching directory...")
  (:num-visible 6)
  (:initial-directory "./")
  (:button-panel-items '("load" "cancel"))
  (:button-panel-h-spacing 25)
  (:min-gadget-width 240)
  (:modal-p NIL)
  (:check-filenames-p t)
  (:foreground-color opal:motif-light-blue)
  (:selection-function NIL)   @emph{; (lambda (gadget value))}
  (:dir-input-field-font (opal:get-standard-font NIL NIL :small))
  (:dir-input-label-font (opal:get-standard-font NIL :bold NIL))
  (:file-input-field-font (opal:get-standard-font NIL NIL :small))
  (:file-input-label-font (opal:get-standard-font NIL :bold NIL))
  (:message-font (opal:get-standard-font :fixed :italic :small))
  (:file-menu-font (opal:get-standard-font NIL :bold NIL))
  (:button-panel-font opal:default-font)
  ...)

@end example

The @code{motif-load-gadget} is loaded along with the @code{motif-save-gadget}
by the file "motif-save-gadget-loader".

The @code{motif-load-gadget} works the same way as the standard @code{load-gadget}.
The only difference is that the motif gadget has an additional
@code{:foreground-color} slot, which can be set to any @code{opal:color} object.



@section Motif Property Sheets
@node Motif Property Sheets
@anchor{motif-prop-sheets}

The following property sheets are similar to the standard property sheets,
except that they use the Motif look and feel. For a complete discussion of
the use of property sheets, see section @ref{propertysheets}.


@subsection Motif-Prop-Sheet-With-OK
@node Motif-Prop-Sheet-With-OK
@cindex{Motif-Prop-Sheet-With-OK}

@example
(create-instance 'gg:Motif-Prop-Sheet-With-OK opal:aggregadget
    (:maybe-constant '(:left :top :items :default-filter :ok-function :apply-function
                       :cancel-function :v-spacing :multi-line-p :select-label-p
		       :label-selected-func :label-select-event :select-value-p
                       :value-selected-func :single-select-p :foreground-color :visible))

   @emph{; Customizable slots}
    (:foreground-color opal:motif-gray) @emph{; the color for the background}
    (:left 0) (:top 0)
    (:items NIL)
    (:default-filter 'default-filter)
    (:OK-Function NIL)
    (:Apply-Function NIL)
    (:Cancel-Function NIL)
    (:v-spacing 1)
    (:pixel-margin NIL)
    (:rank-margin NIL)
    (:multi-line-p NIL)
    (:select-label-p NIL)
    (:label-select-event :any-mousedown)
    (:label-selected-func NIL)
    (:select-value-p NIL)
    (:value-selected-func NIL)
    (:single-select-p NIL)

   @emph{; Read-only slots}
    (:label-selected ...
    (:value-selected ...
    (:value ...
    (:changed-values ...
@end example

The loader for @code{motif-prop-sheet-with-OK} is
"motif-prop-sheet-win-loader".

This is the same as @code{Prop-Sheet-With-OK} (described in section
@ref{propsheetwithok} except that it uses the
Motif look-and-feel, and you can set the foreground color.


@subsection Motif-Prop-Sheet-For-Obj-With-OK
@node Motif-Prop-Sheet-For-Obj-With-OK
@anchor{motif-prop-sheet-for-obj-with-ok}
@cindex{Motif-Prop-Sheet-for-obj-With-OK}

@example
(create-instance 'Motif-Prop-Sheet-For-Obj-With-OK Motif-Prop-Sheet-With-OK
    (:maybe-constant '(:left :top :obj :slots :eval-p :ok-function :apply-function
                       :cancel-function :v-spacing :multi-line-p :select-label-p
		       :label-selected-func :label-select-event :select-value-p
                       :value-selected-func :single-select-p :foreground-color :visible))

   @emph{; Customizable slots}
    (:foreground-color opal:motif-gray)
    (:OK-Function NIL)
    (:Apply-Function NIL)
    (:Cancel-Function NIL)
    (:left 0) (:top 0)
    (:obj NIL)   @emph{; a single obj or a list of objects}
    (:slots NIL) @emph{; list of slots to show. If NIL, get from :parameters}
    (:union? T)  @emph{; if slots is NIL and multiple objects, use union or intersection of :parameters?}

    (:eval-p T)  @emph{; if T, then evaluates what the user types. Use T for}
		 @emph{; graphical objects. If NIL, then all the values will be strings.}
    (:set-immediately-p T) @emph{; if T then sets slots when user hits @code{return}, else doesn't}
			   @emph{; ever set the slot.}
    (:type-gadgets NIL)  @emph{; descriptor of special handling for types}
    (:error-gadget NIL)  @emph{; an error gadget to use to report errors.}

    ;; @emph{plus the rest of the slots also provided by prop-sheet}

    (:v-spacing 1)
    (:pixel-margin NIL)
    (:rank-margin NIL)
    (:multi-line-p NIL) @emph{; T if multi-line strings are allowed}
    (:select-label-p NIL) @emph{; T if want to be able to select the labels}
    (:label-select-event :any-mousedown)
    (:label-selected-func NIL)
    (:select-value-p NIL) @emph{; if want to be able to select the values}
    (:value-selected-func NIL)
    (:single-select-p NIL) @emph{; to select more than one value or label}

   @emph{; Read-only slots}
    (:label-selected NIL) @emph{; set with the selected label objects (or a list)}
    (:value-selected NIL) @emph{; set with the selected value objects (or a list)}
    (:value ...)  @emph{; list of pairs of all the slots and their (filtered) values}
    (:changed-values NIL)) @emph{; only the values that have changed}
@end example

@float Figure, fig:ex2
@center @image{motifpropforobj, 5.5in}
@caption{An example of @code{motif-prop-sheet-for-obj-with-OK}
containing some gadgets. The code to create this is shown in section
@ref{propexample}.}
@anchor{motifpropfix}
@end float

The loader for @code{motif-prop-sheet-for-obj-with-OK} is
"motif-prop-sheet-win-loader".

The implementation and operation of @code{motif-prop-sheet-for-obj-with-ok} is
identical to the @code{prop-sheet-for-obj-with-ok} gadget (described in
section @ref{propsheetforobjwithok} with the exception
that the @code{:foreground-color} slot may be set to any @code{opal:color} object.


@section Motif-Prop-Sheet-For-Obj-With-Done
@node Motif-Prop-Sheet-For-Obj-With-Done
@cindex{motif-prop-sheet-for-obj-with-done}

There is a new gadget that displays a property sheet for an object and
a ``Done'' button. When a slot value is edited, the slot is set
immediately, rather than waiting for an OK or APPLY to be hit. Thus,
the prop-sheet-for-obj slot @code{:set-immediately-p} is always T.
This is especially useful for when the property sheet is displaying
multiple objects, since slots which are not edited won't be set. The
Done button simply removes the property sheet window from the screen.

Sorry, there is no Garnet look-and-feel version of this gadget.

The parameters are pretty much the same as for
@code{prop-sheet-for-obj}, with the addition of the @code{:done-function}
which is called with the property sheet as a parameter.

@example
(create-instance 'gg:Motif-Prop-Sheet-For-Obj-With-Done opal:aggregadget
    (:maybe-constant '(:left :top :obj :slots :eval-p :done-function :v-spacing
		       :multi-line-p :select-label-p :label-selected-func
                       :label-select-event :select-value-p :value-selected-func
                       :single-select-p	:foreground-color :visible :type-gadgets
                       :union? :error-gadget))
    (:left 5) (:top 5)
    (:obj NIL)            @emph{; can be one object or a list of objects}
    (:slots NIL)          @emph{; list of slots to show. If NIL uses :parameters}
    (:done-function NIL)  @emph{; called when hit done as (lambda (prop))}
    (:eval-p T)           @emph{; evaluate the values of the slots?  Usually T.}
    (:error-gadget NIL)   @emph{; used to report errors on evaluation}
    (:type-gadgets NIL)   @emph{; modifies the default display of slots}
    (:union? T)  @emph{; if slots is NIL and multiple objects, use union or intersection of :parameters?}
    (:v-spacing 1)
    (:select-p NIL)       @emph{; T if want to be able to select the entries}

    (:foreground-color opal:Motif-Gray) @emph{; background color of the window}

    (:select-label-p NIL) @emph{; T if want to be able to select the entries}
    (:label-selected-func NIL)
    (:label-select-event :any-mousedown)
    (:select-value-p NIL)
    (:value-selected-func NIL)
    (:single-select-p NIL)

   @emph{;; Read-Only Slots}
    (:label-selected (o-formula (gvl :propsheet :label-selected)))
    (:value-selected (o-formula (gvl :propsheet :value-selected)))
    (:value (o-formula (gvl :propsheet :value)))
    (:changed-values (o-formula (gvl :propsheet :changed-values)))
    (:width (o-formula (MAX (gvl :done-panel :width)
			    (gvl :propsheet :width))))
    (:height (o-formula (+ 2 (gvl :done-panel :height)
			   (gvl :propsheet :height))))
    
@end example

The loader for @code{motif-prop-sheet-for-obj-with-done} is
"motif-prop-sheet-win-loader".




@section Motif Scrolling Window
@node Motif Scrolling Window
@anchor{motif-scrolling-window}
@cindex{motif-scrolling-window}
@cindex{motif-scrolling-window-with-bars}

@example
(create-instance 'gg:Motif-Scrolling-Window-With-Bars opal:aggregadget
   (:maybe-constant '(:left :top :width :height :border-width :title :total-width 
                      :total-height :foreground-color :h-scroll-bar-p :v-scroll-bar-p
		      :h-scroll-on-top-p :v-scroll-on-left-p :h-scr-incr :h-page-incr
                      :v-scr-incr :v-page-incr :icon-title :parent-window :visible))

   ;; @emph{Window slots}
   (:left 0)  ; @emph{left, top, width and height of outermost window}
   (:top 0)
   (:position-by-hand NIL) ; @emph{if T, then left,top ignored and user asked for window position}
   (:width 150) ; @i{width and height of inside of outer window}
   (:height 150)
   (:border-width 2) ; @emph{of outer window}
   (:parent-window NIL) ; @emph{window this scrolling-window is inside of, or NIL if top level}
   (:double-buffered-p NIL)
   (:omit-title-bar-p NIL)
   (:title "Motif-Scrolling-Window")
   (:icon-title (o-formula (gvl :title))) ; @emph{Default is the same as the title}
   (:total-width 200)   ; @emph{total size of the scrollable area inside}
   (:total-height 200)   
   (:X-Offset 0)  ; @emph{x offset in of the scrollable area. CANNOT BE A FORMULA}
   (:Y-Offset 0)  ; @emph{CANNOT BE A FORMULA}
   (:visible T)  ; @emph{whether the window and bars are visible (mapped)}
   (:foreground-color opal:motif-gray)

   (:h-scroll-bar-p T)  ; @emph{Is there a horizontal scroll bar?}
   (:v-scroll-bar-p T)  ; @emph{Is there a vertical scroll bar?}

   ;; @emph{Scroll Bar slots}
   (:h-scroll-on-top-p NIL)  ; @emph{whether horiz scroll bar is on top or bottom}
   (:v-scroll-on-left-p T)   ; @emph{whether vert scroll bar is on left or right}
   (:h-scr-incr 10)  ; @emph{in pixels}
   (:h-page-incr (o-formula (- (gvl :width) 10))) ; @emph{default jumps one page minus 10 pixels}
   (:v-scr-incr 10)  ; @emph{in pixels}
   (:v-page-incr (o-formula (- (gvl :height) 10))) ; @emph{default jumps one page minus 10 pixels}

   ;; @emph{Read-Only slots}
   (:Inner-Window NIL)  ; @emph{these are created by the update method}
   (:inner-aggregate NIL) ; @emph{add your objects to this aggregate (but have to update first)}
   (:outer-window NIL) ; @emph{call Opal:Update on this window (or on gadget itself)}
   (:clip-window NIL)
   ...)
@end example

@center @image{motif-scrolling-window-gadget, 5.5in}

The loader file for the @code{motif-scrolling-window-with-bars} gadget is
"motif-scrolling-window-loader".
@cindex{scrolling-window-loader}

The use of @code{motif-scrolling-window-with-bars} is identical to the
@code{scrolling-window-with-bars} gadget described in section
@ref{scrolling-windows}, with the exception that the parameters to the scroll
bars are slightly different and the @code{:foreground-color} can be set.

@b{Caveats:}
@itemize
If the motif-scrolling-window has a @code{:parent-window}, update the parent
window before instantiating the motif-scrolling-window.

Update the scrolling-window gadget before referring to its inner/outer
windows and aggregates.

The instance of the motif-scrolling-window should @b{not} be added to
an aggregate.
@end itemize

The @code{motif-scrolling-window-with-bars} gadget is not a window itself; it is
an aggregadget that points to its own windows. These windows are accessed
through the @code{:outer-window}, @code{:inner-window}, and
@code{:clip-window} slots of the gadget, as in
@code{(g-value MY-SCROLL-WIN :outer-window)}. So you cannot call 
@code{opal:make-ps-file} with the scrolling-window gadget as an argument. You
have to send one of the windows that it points to:

@example
> (opal:make-ps-file (g-value SCROLL-WIN :outer-window)
                     "fig.PS" :LANDSCAPE-P T :BORDERS-P :MOTIF)
T
>
@end example


@section Using the Gadgets: Examples
@node Using the Gadgets: Examples

@anchor{Examples}

@section Using the :value Slot
@node Using the :value Slot
@anchor{use-value}
In order to use the value returned by a gadget,
we have to access the top level @code{:value} slot.
As an example, suppose we want to make an aggregadget out of a vertical slider
and a circle, and that we want the diameter of the circle to be dependent on
the current value of the slider. We may create such a unit by putting
a formula in the @code{:diameter} slot of the circle that depends on the value
returned from the slider.
Such an aggregadget is implemented below.
The formula in the @code{:diameter} slot of the circle uses the KR function
@code{gvl} to access the @code{:value} slot of the vertical slider.

@example
(create-instance 'BALLOON opal:aggregadget
   (:parts
    `((:slider ,gg:v-slider
               (:left 10)
               (:top 20))
      (:circle ,opal:circle
               (:diameter ,(o-formula (gvl :parent :slider :value)))
               (:left 100) (:top 50)
               (:width ,(o-formula (gvl :diameter)))
               (:height ,(o-formula (gvl :diameter)))))))
@end example

@section Using the :selection-function Slot
@node Using the :selection-function Slot
@anchor{use-selection}
In order to execute a function whenever any new value or item is selected
(i.e., when the @code{:value} slot changes), that function must be specified in
the slot @code{:selection-function}.
Suppose we want
a set of buttons which give us a choice of several ancient cities. We would
also like to define a function which 
displays a message to the screen when a new city is selected. This
panel can be created with the definitions below.

@example
(create-instance 'MY-BUTTONS gg:text-button-panel
    (:selection-function #'Report-City-Selected)
    (:items '("Athens" "Babylon" "Rome" "Carthage")))

(defun Report-City-Selected (gadgets-object value)
  (format t "Selected city:  ~S~%~%" value)
  (format t "Pressed button object ~S~%"
            (gv gadgets-object :value-obj)))
@end example



@section Using Functions in the :items Slot
@node Using Functions in the :items Slot
@anchor{use-item-fn}
In order to execute a specific function when a specific menu item (or button)
is selected, the desired function must be paired with its associated string
or atom in the @code{:items} list. A menu which executes functions assigned to
item strings appears below. Only one function
(@code{My-Cut}) has been defined, but the definition of the others is analogous.

@example
(create-instance 'MY-MENU gg:menu
   (:left 20)
   (:top 20)
   (:title "Menu")
   (:items '(("Cut" my-cut) ("Copy" my-copy) ("Paste" my-paste))))

(defun my-cut (gadgets-object item-string)
  (format t "Function CUT called~%~%"))
@end example

@section Selecting Buttons
@node Selecting Buttons
@anchor{sel-buttons}
@cindex{initial value}
In order to directly select a button in a button panel (rather than allowing
the user to select the button with the mouse), either the @code{:value} or
@code{:value-obj} slots may be set. However, neither of these slots may be
given values at the time that the button panel is created (i.e., @emph{do not
supply values in the} @code{create-instance} @emph{call for these slots}),
since this would permanently override the formulas in the slots.

The @code{:value} slot may be set with any of the items (or the first element in
any of the item pairs) in the @code{:items} list
of the button panel. The example below shows how buttons on a
text-button-panel and an x-button-panel could be chapterly selected. In both
cases, the selected items (i.e., those appearing in the @code{:value} slot) will
appear selected when the button panels are displayed in a window.

@example
(create-instance 'MY-TEXT-BUTTONS gg:text-button-panel
   (:items '(:left :center :right)))
(gv MY-TEXT-BUTTONS :value)   @emph{;; initialize the formula in the :value slot}
(s-value MY-TEXT-BUTTONS :value :center)

(create-instance 'MY-X-BUTTONS gg:x-button-panel
   (:items '("Bold" "Underline" "Italic")))
(gv MY-X-BUTTONS :value)   @emph{;; initialize the formula in the :value slot}
@emph{;; Value must be a list because x-buttons have multiple selection}
(s-value MY-X-BUTTONS :value '("Bold" "Underline"))
@end example

Buttons may also be selected by setting the @code{:value-obj} slot to be the
actual button object or list of button objects which should be selected.
This method requires the designer to look at the internal slots of the button
gadgets. The example below shows how the same results may be
obtained using this method as were obtained in the above example.

@example
(create-instance 'NEW-TEXT-BUTTONS gg:text-buttons-panel
   (:items `(:left :center :right)))
(s-value NEW-TEXT-BUTTONS
         :value-obj
         @emph{;; The second button corresponds to the item ":center"}
         (second (gv NEW-TEXT-BUTTONS :text-button-list :components)))
@end example

The @code{:value} slot of a single button will either contain the @code{:string}
of the button or @code{nil}. Single buttons will appear selected when the @code{:value}
slot contains any non-NIL value.


@section The :item-to-string-function Slot
@node The :item-to-string-function Slot
@anchor{sm-ex}
@cindex{Item-to-string-function}
The @code{:items} slot of the scrolling menu may be a list of any objects at all,
including the standard items described in section @ref{buttons}. The
mechanism which allows strings to be generated from arbitrary objects is the
user-defined @code{:item-to-string-function}. The default scrolling menu will
handle a list of standard items, but for a list of other objects a suitable
function must be supplied.

As discussed in section @ref{items-slot}, the elements of the @code{:items} list
can be either single atoms or lists. When an element of the @code{:items} list
is a list, then the @code{:item-to-string-function} is applied only to the
first element in the list, rather than the list itself. In other words, the
@code{:item-to-string-function} takes the @code{car} of the item list as its
parameter, rather than the entire item list.

Suppose the list in the @code{:items} slot of the scrolling menu is
@example
(list v-scroll-bar v-slider trill-device)
@end example
which is a list of Garnet Gadget schemas.
A function must be provided which returns a string identifying an item when
given a schema as input. The following slot/value pair, inserted into the
definition of the new schema, will accomplish this task:
@example
(:item-to-string-function #'(lambda (item)
                              (if item
                                  (name-for-schema item)  @emph{;; imported from KR}
                                  "")))
@end example

