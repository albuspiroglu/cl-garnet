
@chapter Aggregadgets, Aggrelists & Aggregraphs
@node Aggregadgets, Aggrelists & Aggregraphs


by Andrew Mickish,
Roger B. Dannenberg,
Philippe Marchal,
David Kosbie,
A. Bryan Loyall


@section Abstract
@node Abstract

Aggregadgets and aggrelists are objects used to define natural hierarchies
of other objects in the Garnet system. They allow the interface designer to
group graphical objects and associated behaviors into a single prototype
object by declaring the structure of the components.
Aggrelists are particularly useful in the creation of menu-type objects,
whose components are a sequence of similar items corresponding to a list
of elements. Aggrelists will automatically maintain the layout of the
graphical list of objects. Aggregraphs are similarly used to create and
maintain graph structures.




@section Aggregadgets
@node Aggregadgets


@section Accessing Aggregadgets and Aggrelists
@node Accessing Aggregadgets and Aggrelists
@cindex{loading aggregadgets}
The aggregadgets and aggrelists files are automatically loaded when the
file @code{garnet-loader.lisp} is used to load Garnet. The
@code{garnet-loader} file uses one loader file for both aggregadgets
and aggrelists called @code{aggregadgets-loader.lisp}. Loading this file
causes the KR, Opal, and Interactors files to be loaded also.

Aggregadgets and aggrelists reside in the @code{Opal} package. 
All identifiers in this chapter are exported from the @code{Opal} package unless
another package name is explicitly given. These identifiers can be
referenced by using the @code{opal} prefix, e.g. @code{opal:aggregadget};
the package name may be dropped if the line
@code{(use-package "OPAL")}
is executed before referring to any object in that package.

@section Aggregadgets
@node Aggregadgets

During the construction of a complicated Garnet interface, the designer will
frequently be required to arrange sets of objects into groups
that are easy to manipulate. These sets may have intricate dependencies among
the objects, or possess a hierarchical structure that suggests a further
subgrouping of the individual objects. Interactors may also be associated with
the objects that should intuitively be defined along with the objects
themselves.

Aggregadgets provide the designer with a straightforward method for the
definition and use of sets of Garnet objects and interactors. When an
aggregadget is supplied
with a list of object definitions, Garnet will internally create instances
of those objects and add them to the aggregadget as components. If the
objects are given names, Garnet will create slots in the aggregadget
which point to the objects, granting easy access to the components.
Interactors that manipulate the components of
the aggregadget may be similarly defined.

By creating instances of aggregadgets, the designer actually groups the
objects and interactors under a single prototype (class) name. The defined
prototype may be used repeatedly to create more instances of the defined
group. To illustrate this feature of aggregadgets, consider the schemata
shown below:
@smallexample
(create-instance 'MY-GROUP opal:aggregadget
   (:parts
           ...)       @emph{; some group of graphical objects}
   (:interactors
           ...))      @emph{; some group of interactors}

(create-instance 'GROUP-1 MY-GROUP)

(create-instance 'GROUP-2 MY-GROUP
   ...)               @emph{; definition of more slots}
@end smallexample

The schema MY-GROUP defines a set of associated graphical objects and
interactors using an instance of the @code{opal:aggregadget} object. The
schemata @code{group-1} and @code{group-2} are instances of the @code{my-group}
prototype which inherit all of the parts and behaviors defined in the
prototype. The @code{group-2} schema additionally defines new slots in the
aggregadget for some special purpose.


@subsection How to Use Aggregadgets
@node How to Use Aggregadgets
@anchor{what-an-agg}
@anchor{parts-syntax-sec}
@cindex{aggregadget}
@cindex{parts in aggregadgets}
In order to group a set of objects together as components of an aggregadget,
the designer must define the objects in the @code{:parts} slot of the
aggregadget.

The syntax of the @code{:parts} slot is a backquoted list of lists, where
each inner list defines one component of the aggregadget.
The definition of each component includes a keyword that will be used as a
name for that part
(or @code{nil} if the part is to be unnamed), the prototype of that part, and a
set of slot definitions that customize the component from the prototype.

The aggregadget will internally convert this list of parts into components of
the aggregadget, with each part named by the keyword provided (or unnamed,
if the keyword is @code{nil}).

Everything inside the backquote that should be evaluated immediately must be
preceded by a comma. Usually the following will need commas:
the prototype of the component, variable names, calls to @code{formula}
and @code{o-formula}, etc.

After an aggregadget is created, the designer should not refer to the
@code{:parts} slot. Each component may be accessed by name as a slot of the
aggregadget. Additionally, all components are listed in the
@code{:components} slot just as in aggregates.
@cindex{components slot}  As with aggregates, components are listed
in display order, that is, @emph{from back to front}.

A short example of an aggregadget definition
is shown in figure @ref{check-mark}, and the picture of this
aggregadget is in figure @ref{simple-expl-pict-ref}.

@float Figure, fig:ex701
@smallexample
(create-instance 'CHECK-MARK opal:aggregadget
   (:parts
    `((:left-line ,opal:line
                  (:x1 70)
                  (:y1 45)
                  (:x2 95)
                  (:y2 70))
      (:right-line ,opal:line
                   (:x1 95)
                   (:y1 70)
                   (:x2 120)
                   (:y2 30)))))
@end smallexample
@caption{A simple CHECK-MARK aggregadget.}
@anchor{check-mark}
@end float

@float Figure, fig:ex702
@center @image{agg-check-mark, 5.5in}

@caption{The picture of the CHECK-MARK aggregadget.}
@anchor{simple-expl-pict-ref}
@end float

Of course, the designer may define other slots in the aggregadget besides the
@code{:parts} slot. One convenient programming style involves the 
definition of several slots in the top-level aggregadget (such as
@code{:left}, @code{:top}, etc.) with formulas in several components that refer
to these values, thereby allowing a change in one top-level slot to
propagate to all dependent slots in the components. Slots of components may
also contain formulas that refer to other components (see section
@ref{agg-dependencies}).


@subsection Named Components
@node Named Components

When keywords are given in the @code{:parts} list that correspond to each
component, those keywords are used as names for the components. In figure
@ref{check-mark}, the names are @code{:left-line} and @code{:right-line}.
Since these names were supplied, the slots @code{:left-line} and @code{:right-line}
are set in the CHECK-MARK aggregadget with the components themselves as values.
That is, @code{(gv CHECK-MARK :left-line)} yields the actual component that
was created from the @code{:parts} description.

The slot @code{:known-as} in the component is also set with the name of the
component. In the example above, @code{(gv CHECK-MARK :left-line :known-as)}
yields @code{:left-line}. Another way to look at these slots and objects is
shown in figures @ref{agg-ps-ref} and @ref{part-ps-ref}.

When adding a new component to an aggregadget, you can set the @code{:known-as}
slot of the component with a keyword name, which will be used in the top-level
aggregadget as a slot name that points directly to the new component. The
example at the end of section @ref{constants-and-aggregadgets} illustrates
the idea of setting the @code{:known-as} slot.

@float Figure, fig:ex703
@smallexample

@b{lisp>} (ps CHECK-MARK)

{#k<CHECK-MARK>
  :RIGHT-LINE = #k<KR-DEBUG:RIGHT-LINE-226>
  :LEFT-LINE = #k<KR-DEBUG:LEFT-LINE-220>
  :COMPONENTS = #k<KR-DEBUG:LEFT-LINE-220> #k<KR-DEBUG:RIGHT-LINE-226>
  ...
  :PARTS = ((:LEFT-LINE #k<OPAL:LINE>
                        (:X1 70) (:Y1 45) (:X2 95) (:Y2 70))
            (:RIGHT-LINE #k<OPAL:LINE>
                         (:X1 95) (:Y1 70) (:X2 120) (:Y2 30)))
  ...
  :IS-A = #k<OPAL:AGGREGADGET>
}
NIL
@b{lisp>}
@end smallexample
@caption{The printout of the CHECK-MARK aggregadget.}
@anchor{agg-ps-ref}
@end float
@cindex{components slot}


@float Figure, fig:ex704
@smallexample

@b[lisp>] (ps (gv CHECK-MARK :right-line))

{#k<KR-DEBUG:RIGHT-LINE-226>
  :PARENT =  #k<CHECK-MARK>
  :KNOWN-AS =  :RIGHT-LINE
  ...
  :Y2 =  30
  :X2 =  120
  :Y1 =  70
  :X1 =  95
  :IS-A =  #k<OPAL:LINE>
}
NIL
@b[lisp>] 

@end smallexample
@caption{The @code{:right-line} component of CHECK-MARK.}
@anchor{part-ps-ref}
@end float

As shown in figure @ref{agg-ps-ref}, CHECK-MARK has two components:
RIGHT-LINE-226 which is a line created according to the definition of 
@code{:right-line} in the @code{:parts} slot of the CHECK-MARK
aggregadget, and LEFT-LINE-220 corresponding to the definition of the
@code{:left-line} part. The CHECK-MARK
aggregadget also has two slots, @code{:right-line} and @code{:left-line}, whose
values are the corresponding components.


@subsection Destroying Aggregadgets
@node Destroying Aggregadgets

@cindex{destroy}
@code{opal:Destroy} @emph{gadget}@ref{method}

@cindex{destroy-me}
@code{opal:Destroy-Me} @emph{gadget}@ref{method}

The @code{destroy} method destroys an aggregadget or aggrelist 
and its instances.
To destroy a gadget means to destroy its interactors, components,
and item-prototype-object as well as the gadget schema itself.
The @code{destroy-me} method for
aggregadgets and aggrelists destroys the prototype but not its
instances. @emph{Note:} users of gadgets should call @code{destroy};
implementors of subclasses should override @code{destroy-me}.


@subsection Constants and Aggregadgets
@node Constants and Aggregadgets
@cindex{constants in aggregadgets}
@anchor{constants-and-aggregadgets}
The ability to define constant slots is an advanced feature of Garnet that is
discussed in detail in the KR chapter. However, the aggregadgets use
some of the features of constant slots by default.

All aggregadgets created with an initial @code{:parts} list have
constant @code{:components}. That is, after the aggregadget has
been created with all of its parts, the @code{:components} slot becomes
constant automatically, and the components of the aggregadget are
not normally modifiable. Also, the @code{:known-as} slot of each part
and the slot in the aggregadget corresponding to the name of each
part is constant. By declaring these slots constant, Garnet is able
to automatically get rid of the greatest number of formulas possible,
thereby freeing up memory for other objects.

For example, given the following instance of an @code{aggregadget},
@smallexample
(create-instance 'MY-AGG opal:aggregadget
  (:parts
   `((:obj1 ,opal:rectangle
            (:left 20) (:top 40))
     (:obj2 ,opal:circle
            (:left 50) (:top 10)))))
@end smallexample
the slots @code{:components}, @code{:obj1}, and @code{:obj2} will be
constant in MY-AGG. The result is that you cannot remove components
or add new components to this aggregadget without disabling the
constant mechanism.

If you really want to add another component to the aggregadget, you
could use the macro @code{with-constants-disabled}, which is described
in the KR chapter:
@smallexample
(with-constants-disabled
  (opal:add-component MY-AGG (create-instance NIL opal:roundtangle
                               (:known-as :obj3)  @emph{; will become a constant slot}
                               (:left 40) (:top 20))))
@end smallexample
Adding components to a constant aggregadget is discouraged because
the aggregadget's dimension formulas that
were already thrown away (if they were evaluated) will not be updated with the
dimensions of the new components. That is, if OBJ3 in the example
above is outside of the original bounding box of MY-AGG
(calculated by the formulas in MY-AGG's @code{:left}, @code{:top}, @code{:width},
and @code{:height} slots), then Opal will fail to display the new
component correctly because it only updates the area enclosed by
MY-AGG's bounding box. 

A better solution than forcibly adding components is to create a
non-constant aggregadget to begin with. Since only aggregadgets that
are created with a @code{:parts} slot are constant, you should start with an
aggregadget without a @code{:parts} list, and add your components using
@code{add-component}. Thus, the better way to build the aggregadet above is:
@smallexample
(create-instance 'MY-AGG opal:aggregadget)
(opal:add-components MY-AGG (create-instance NIL opal:rectangle
                              (:known-as :obj1)
                              (:left 20) (:top 40))
                            (create-instance NIL opal:circle
                              (:known-as :obj2)
                              (:left 50) (:top 10)))
@emph{; Then later...}
(opal:add-component MY-AGG (create-instance NIL opal:roundtangle
                             (:known-as :obj3)
                             (:left 40) (:top 20)))
@end smallexample
Note that you will have to supply your own @code{:known-as} slots in the
components if you want the aggregadet to have slots referring to those
components.


@subsection Implementation of Aggregadgets
@node Implementation of Aggregadgets
@anchor{known-as-sec}
An aggregadget is an instance of the prototype @code{opal:aggregate},
with an initialize method that interprets the @code{:parts} slot
and provides other functions.
This initialize method performs the following tasks:

@itemize
an instance of every part is created,

all these instances are added (with @code{add-component}) as the components
of the aggregadget,

for each part, a slot is created in the aggregate. The name of this slot is
the name of the part, and its value is the instance of the corresponding
part.

The slot @code{:known-as} in the part is set with the part's name.

In some cases (described in detail later), some or all of the
structure of the prototype aggregadget is inherited by the new instance. 
@end itemize


@subsection Dependencies Among Components
@node Dependencies Among Components
@anchor{agg-dependencies}
@cindex{dependencies}
@cindex{Formulas", Secondary="in aggregadgets}
@cindex{o-formula}

Aggregadgets are designed to facilitate the definition of dependencies among
their components. When a slot of one component depends on the value of a
slot in another component of the same aggregadget, that dependency is
expressed using a formula.

The aggregadget is considered the parent of
the components, and the components are all siblings within the aggregadget.
Thus, the @code{:parent} slot of each component can be used to travel up the
hierarchy, and the slot names of the aggregadget and its components can be
used to travel down.

Consider the following modification to the CHECK-MARK schema
defined in section @ref{what-an-agg}. In figure @ref{check-mark}, the
@code{:x1} and @code{:y1} slots of the @code{:right-line} object are the same as
the @code{:x2} and @code{:y2} slots of the @code{:left-line} object so that
the two lines meet at a common point. Rather than explicitly
repeating these coordinates in the @code{:right-line} object, dependencies
can be defined in the @code{:right-line} object that cause its origin to always
be the terminus of the @code{:left-line}. Figure @ref{modified-check-mark}
shows the definition of this modified schema.

@float Figure, fig:ex705
@smallexample
(create-instance 'MODIFIED-CHECK-MARK opal:aggregadget
   (:parts
    `((:left-line ,opal:line
                  (:x1 70)
                  (:y1 45)
                  (:x2 95)
                  (:y2 70))
      (:right-line ,opal:line
                   (:x1 ,(o-formula (gvl :parent :left-line :x2)))
                   (:y1 ,(o-formula (gvl :parent :left-line :y2)))
                   (:x2 120)
                   (:y2 30)))))
@end smallexample
@caption{A modified CHECK-MARK schema.}
@anchor{modified-check-mark}
@end float

@cindex{commas}
Commas must precede the calls to @code{o-formula} and the references to the
@code{opal:line} prototype because these items must be evaluated
immediately. Without commas, 
the @code{o-formula} call, for example, would
be interpreted as a quoted list due to the backquoted @code{:parts} list.

The macro @code{gvl-sibling} is provided to abbreviate references between
the sibling components of an aggregadget:

@cindex{gvl-sibling}
@defmac opal:gvl-sibling sibling-name &rest slots

For example, the @code{:x1} slot of the @code{:right-line} object in figure
@ref{modified-check-mark} may be
given the equivalent value
@smallexample
,(o-formula (opal:gvl-sibling :left-line :x2))
@end smallexample

@end defmac

@subsection Multi-level Aggregadgets
@node Multi-level Aggregadgets

Aggregadgets can be used to define more complicated objects with a
multi-level hierarchical structure. Consider the picture of a check-box
shown in figure @ref{check-box-pict-ref}.

@float Figure, fig:ex705
@center @image{agg-check-box, 5.5in}
@caption{A picture of a check-box.}
@anchor{check-box-pict-ref}
@end float

The check-box can be considered a hierarchy of objects:  the CHECK-MARK
object defined in figure @ref{check-mark}, and a box. This
hierarchy is illustrated in figure @ref{check-box-hier-ref}.

@float Figure, fig:ex706
@smallexample

                             check-box
                               /  \
                              /    \
                            box  check-mark
                                    /  \
                                   /    \
                            left-line   right-line
@end smallexample
@caption{The hierarchical structure of a check-box.}
@anchor{check-box-hier-ref}
@end float

The CHECK-BOX hierarchy is implemented through aggregadgets in figure 
@ref{check-box-def-ref}. Although the CHECK-BOX schema defines the
@code{:box} component explicitly, the details of the @code{:mark} object have
been defined elsewhere in the CHECK-MARK schema (see 
figure @ref{check-mark}).
The aggregadget definition for the CHECK-MARK part could have been
written out explicitly, as in the more complicated CHECK-BOX schema of
figure @ref{custom-check-box1}. However, the CHECK-BOX definition
presented here uses a modular approach that allows the reuse of the
CHECK-MARK schema in other applications.

@float Figure, fig:ex707
@smallexample
(create-instance 'CHECK-BOX opal:aggregadget
   (:parts
    `((:box ,opal:rectangle
            (:left 75)
            (:top 25)
            (:width 50)
            (:height 50))
      (:mark ,CHECK-MARK))))
@end smallexample
@caption{The definition of a check-box.}
@anchor{check-box-def-ref}
@end float

See section @ref{Custom-check-box2} for another example of a modularized
multi-level aggregadget, and see section @ref{instances-sec} for 
information about inheriting structure from other multi-level aggregadgets.

@subsection Nested Part Expressions for Aggregadgets
@node Nested Part Expressions for Aggregadgets
Recall that parts are specified in a @code{:parts} slot and
that the syntax for a part is


@code{(@emph{name} @emph{prototype} {{@var{slot}  @var{value}}}@var{+[*]})}


where @emph{name} is either a keyword or @code{nil}, @emph{prototype} is a prototype
for the part, and @emph{slots} is a list of local slot definitions. 
If @emph{prototype} is an aggregadget, then @emph{slots} may contain
another parts slot; thus, an entire aggregadget tree can be specified
by nested @code{:parts} slots.

For example, figure @ref{x-box-fig} implements a box containing an X.
Notice how the @code{:mark} part of X-BOX is an aggregadget containing
its own parts.
@float Figure, fig:ex708
@center @image{xbox-fig, 5.5in}
@smallexample

;;; compute vertical position in :box according to a proportion
(defun vert-prop (frac) 
  (+ (gvl :parent :parent :box :top)
     (round (* (gvl :parent :parent :box :height) 
	       frac))))

;;; compute horizontal position in :box according to a proportion
(defun horiz-prop (frac)
  (+ (gvl :parent :parent :box :left)
     (round (* (gvl :parent :parent :box :width)
	       frac))))

(create-instance 'X-BOX opal:aggregadget
   (:left 20) 
   (:top 20)
   (:width 50)
   (:height 50)
   (:parts
    `((:box ,opal:rectangle
	    (:left ,(o-formula (gvl :parent :left)))
	    (:top  ,(o-formula (gvl :parent :top)))
	    (:width  ,(o-formula (gvl :parent :width)))
	    (:height ,(o-formula (gvl :parent :height))))
      (:mark ,opal:aggregadget
	     (:parts
	      ((:line1 ,opal:line
		       (:x1 ,(o-formula (horiz-prop 0.3)))
		       (:y1 ,(o-formula (vert-prop 0.3)))
		       (:x2 ,(o-formula (horiz-prop 0.7)))
		       (:y2 ,(o-formula (vert-prop 0.7))))
	       (:line2 ,opal:line
		       (:x1 ,(o-formula (horiz-prop 0.7)))
		       (:y1 ,(o-formula (vert-prop 0.3)))
		       (:x2 ,(o-formula (horiz-prop 0.3)))
		       (:y2 ,(o-formula (vert-prop 0.7)))))))))))

@end smallexample
@caption{A box with an X, illustrating nested parts.}
@anchor{x-box-fig}
@end float


@subsection Creating a Part with a Function
@node Creating a Part with a Function
@cindex{Part-generating functions}
@cindex{Single parts}
@cindex{Functions for parts}
@cindex{Single parts}
@anchor{creating-part-fn}

Instead of defining a prototype as a part, the designer may specify a
function which will be called in order to generate the part. This
feature can be useful when you plan to create several instances of an
aggregadget that are similar, but with different objects as parts.
For example, the aggregadgets in figure @ref{single-part-fn} all have
the same prototype.

@float Figure, fig:ex709
@center @image{single-part-fn, 5.5in}
@caption{Aggregadgets that generate a part through a function.}
@anchor{single-part-fn}
@end float

The syntax for generating a part with a function is to specify a
function within the @code{:parts} list where a prototype for the part
would usually go. The function must take one argument, which is the
aggregadget whose part is being generated. Slots of the aggregadget
may be accessed at any time inside the function.

The purpose of the function is to return an
object that will be a component of the aggregadget. You should
@b{not} add the part to the aggregadget yourself in the function.
However, you must be careful to always return an object that can be
used directly as a component. For example, the @code{opal:circle} object
would not be a suitable object to return, since it is the prototype of
many other objects. Instead, you would return an @emph{instance} of
@code{opal:circle}.

Additionally, you must be careful to consider the case where the
object to be used has already been used before. That is, if you wanted
the function to return a rectangle more than once, the function must be
smart enough to return a particular rectangle the first time, and return
a different rectangle the second time and every time thereafter.
Usually it is sufficient to look at the @code{:parent} slot of the
object to check if it is already part of another aggregadget. The
following code, which generates the figure in @ref{single-part-fn},
takes this multiple usage of an object into consideration.

@smallexample
(defun Get-Label (agg)
  (let* ((item (gv agg :item))
         @emph{;; Item may be an object or a string}
	 (new-label (if (schema-p item)
			(if (gv item :parent)
			    @emph{;; The item has been used already --}
			    @emph{;; Use it as a prototype}
			    (create-instance NIL item)
			    @emph{;; Use the item itself}
			    item)
		        (create-instance NIL opal:text
			  (:string item)
			  (:font (opal:get-standard-font
                                  :sans-serif :bold :very-large))))))
    (s-value new-label :left (o-formula (opal:gv-center-x-is-center-of (gvl :parent))))
    (s-value new-label :top (o-formula (opal:gv-center-y-is-center-of (gvl :parent))))
    new-label))

(create-instance 'AGG-PROTO opal:aggregadget
  (:item "Text")
  (:top 20) (:width 60) (:height 80)
  (:parts
   `((:frame ,opal:rectangle
	     (:left ,(o-formula (gvl :parent :left)))
	     (:top ,(o-formula (gvl :parent :top)))
	     (:width ,(o-formula (gvl :parent :width)))
	     (:height ,(o-formula (gvl :parent :height))))
     (:label ,#'Get-Label))))

(create-instance 'CIRCLE-LABEL opal:circle
  (:width 30) (:height 30)
  (:line-style NIL)
  (:filling-style opal:black-fill))

(create-instance 'SQUARE-LABEL opal:rectangle
  (:width 30) (:height 30)
  (:line-style NIL)
  (:filling-style opal:black-fill))

(create-instance 'AGG1 AGG-PROTO
  (:left 10)
  (:item CIRCLE-LABEL))

(create-instance 'AGG2 AGG-PROTO
  (:left 90)
  (:item SQUARE-LABEL))

(create-instance 'AGG3 AGG-PROTO
  (:left 170)
  (:item "W"))
@end smallexample

Some of the functionality provided by a part-generating function is
overlapped by the customization syntax for aggregadget instances
described in section @ref{overriding-slots}. For example, the labels
in figure @ref{single-part-fn} could have been customized from the
prototype by supplying prototypes in the local @code{:parts} list of
each instance. However, for some applications using aggrelists, this
feature is indespensable (see section @ref{multi-parts-fn}).


@subsection Creating All of the Parts with a Function
@node Creating All of the Parts with a Function
@cindex{Part-generating functions}
@cindex{All parts}
@cindex{Functions for parts}
@cindex{All parts}
@anchor{run-time}

As an alternative to supplying a list of component definitions in the
@code{:parts} slot, the designer may instead specify a function which will
generate the parts of the aggregadget during its initialization.
This feature is useful when the components of the aggregadget are related in
some respect that is easily described by a function procedure, as in figure
@ref{multi-line-pict-ref}.

@float Figure, fig:ex710
@center @image{agg-multi-line, 5.5in}
@caption{The multi-line picture.}
@anchor{multi-line-pict-ref}
@end float

This feature of aggregadgets is not usually used since, in most cases,
aggrelists supply the same functionality. When all the components of an
aggregadget are instances of the same prototype, the designer should
consider implementing an itemized aggrelist, discussed in chapter
@ref{aggrelists}.

The function may be specified in the @code{:parts} slot as either a
previously defined function or a lambda expression.
The function must take one parameter:  the aggregadget whose parts are being
created. The function must return a list of the created parts (e.g., a
list of instances of @code{opal:line}) and,
optionally, a list of the names of the parts. If supplied, the names must
be keywords
which will become slot names for the aggregadget, providing access to the
individual components (see section @ref{agg-dependencies}). (@emph{Note:} The
standard lisp function @code{values} may be used to return two arguments from the
generating function.)
@cindex{values (lisp function)}

@cindex{multi-line}
Figure @ref{multi-line1-ref} shows how to create an aggregadget made
of multiple lines, with the end-points of the lines given in the
special slot @code{:line-end-points}. The figure creates the object on
the left of figure @ref{multi-line-pict-ref}.

@float Figure, fig:ex711
@smallexample
(create-instance 'MULTI-LINE opal:aggregadget
   (:parts
    `(,#'(lambda (self)
	   (let ((lines NIL))
	     (dolist (line-ends (gv self :lines-end-points))
	       (setf lines (cons (create-instance NIL opal:line
				   (:x1 (first line-ends))
				   (:y1 (second line-ends))
				   (:x2 (third line-ends))
				   (:y2 (fourth line-ends)))
				 lines)))
	     (reverse lines)))))
   (:lines-end-points '((10 10 100 100)
			(10 100 100 10)
			(55 10 55 100)
			(10 55 100 55))))
@end smallexample

@caption{An aggregadget with a function to create the parts.}
@anchor{multi-line1-ref}
@end float


Figure @ref{multi-line2-ref} shows how to create the same aggregadgets as in
figure @ref{multi-line-pict-ref}, but with a separately defined function rather
than a lambda expression.
In addition, this function returns the list of the names of
the parts. Two instances of the aggregadget are created, with only one of
these instances having names for the lines.

@float Figure, fig:ex712
@smallexample
(defun Make-Lines (lines-agg)
  (let ((lines NIL))
    (dolist (line-ends (gv lines-agg :lines-end-points))
      (setf lines (cons (create-instance NIL opal:line
			   (:x1 (first line-ends))
			   (:y1 (second line-ends))
		           (:x2 (third line-ends))
			   (:y2 (fourth line-ends)))
			lines)))
    (values (reverse lines) (gv lines-agg :lines-names))))

(create-instance 'MY-MULTI-LINE1 opal:aggregadget
   (:parts `(,#'Make-Lines))
   (:lines-end-points '((10 10 100 100)
                        (10 100 100 10)
                        (55 10 55 100)
                        (10 55 100 55)))
   (:lines-names
    '(:down-diagonal :up-diagonal :vertical :horizontal)))

(create-instance 'MY-MULTI-LINE2 opal:aggregadget
   (:parts `(,#'Make-Lines))
   (:lines-end-points '((120 100 170 10)
                        (170 10 220 100)
                        (220 100 150 100))))
@end smallexample

@caption{An aggregadget with a function to create named parts.}
@anchor{multi-line2-ref}
@end float

It should be noted that the use of a function to create parts is @emph{not}
inherited. If the @code{:parts} slot is omitted, then the actual parts (not
the function that created the parts) are inherited from the prototype. It
is possible to override the @code{:initialize} method to obtain a different
instantiation convention, but probably it is simplest just always to specify
the @code{:parts} slot indicating the function that creates parts.


@section Interactors in Aggregadgets
@node Interactors in Aggregadgets
@anchor{agg-interactors}
@cindex{interactors}

Interactors may be grouped in aggregadgets in precisely the same way that
objects are grouped. The slot @code{:interactors} is analogous to the
@code{:parts} slot, and may contain a list of interactor definitions that
will be attached to the aggregadget.

As with the @code{:parts} slot, @code{:interactors} must contain a backquoted
list of lists with commas preceding everything that should be evaluated
immediately@ref{dash}prototypes, function calls, variable references, etc. 
The name of a function that generates a set of interactors can also be
given with the same parameters and functionality as the @code{:parts}
function described in section @ref{run-time}.
@cindex{function for :interactors}
@cindex{interactors function}

@cindex{behaviors slot}
If a keyword is supplied as the name for an interactor, then a slot with
that name will be
automatically created in the aggregadget, and the value of that slot will
be the interactor. For example, in figure @ref{framed-text}, a slot
called @code{:text-inter} will be created in the aggregadget to refer to
the text interactor.
The system will also add to the aggregadget a @code{:behaviors} slot, containing
a list of pointers to the interactors. This slot is analogous to the
@code{:components} slot for graphical objects.


@cindex{operates-on}
Each interactor will be given a new @code{:operates-on} slot which is
analogous to the @code{:parent} slot for component objects. The
@code{:operates-on} slot contains a pointer to the aggregadget that the
interactor belongs to. This slot should be used when referring to the
aggregadget from within interactors.

@cindex{windows for interactors}
In order to activate any interactor in Garnet, its @code{:window} slot must
contain a pointer to the window in which the interactor operates.
In most cases, the window for the interactor will be found in
the @code{:window} slot of the aggregadget, which is internally
maintained by aggregates. Hence, the following slot definition should be
included in all interactors defined in an aggregadget:
@smallexample
(:window ,(o-formula (gv-local :self :operates-on :window)))
@end smallexample
@emph{Note:} in this formula, @code{gv-local} is used to follow local
links @code{:operates-on} and @code{:window}. Using @code{gv-local} instead of
@code{gv} or @code{gvl} when referring to these slots helps avoid accidental
references to these slots in the aggregdagets' prototype.
Most values for the @code{:window} slots of aggregadget interactors will
resemble this formula.

The interactors are independent of the parts, and either feature
may be used with or without the other. When using both parts and
interactors, any object may refer to any other using the methods described
in section @ref{agg-dependencies}.

Figure @ref{framed-text} shows how to create a ``framed-text'' aggregadget
that allows the input and display of text. This aggregadget is made of two
parts, a frame (a rectangle) and a text object, and one interactor
(a text-interactor). Figure @ref{agg-inter-ps-ref} is a partial printout of
the FRAMED-TEXT aggregadget with its built-in interactor, illustrating the
slots created by the system. A picture of the aggregadget is shown in
figure
@ref{framed-text-pix}.
@cindex{framed-text example}

@float Figure, fig:ex713
@smallexample
(create-instance 'FRAMED-TEXT opal:aggregadget
   (:left 0)      @emph{; Set these slots to determine}
   (:top 0)       @emph{; the position of the aggregadget.} 
   (:parts
    `((:frame ,opal:rectangle
          (:left ,(o-formula (gvl :parent :left)))
          (:top ,(o-formula (gvl :parent :top)))
          (:width ,(o-formula (+ (gvl :parent :text :width) 4)))
          (:height ,(o-formula (+ (gvl :parent :text :height) 4))))
      (:text ,opal:text
          (:left ,(o-formula (+ (gvl :parent :left) 2)))
          (:top ,(o-formula (+ (gvl :parent :top) 2)))
          (:cursor-index NIL)
          (:string ""))))
   (:interactors
     @emph{; Press on the text object (inside the frame) to edit the string}
    `((:text-inter ,inter:text-interactor
	  (:window ,(o-formula (gv-local :self :operates-on :window)))
          (:feedback-obj NIL)
          (:start-where ,(o-formula
                          (list :in (gvl :operates-on :text))))
          (:abort-event #\control-\g)
          (:stop-event (:leftdown #\RETURN))))))
@end smallexample
@caption{Definition of an aggregadget with a built-in interactor.}
@anchor{framed-text}
@end float


@float Figure, fig:ex714
@smallexample

@b[lisp>] (ps FRAMED-TEXT)
{#k<FRAMED-TEXT>
  ...
  :COMPONENTS =  #k<KR-DEBUG:FRAME-205> #k<KR-DEBUG:TEXT-207>
  :FRAME =  #k<KR-DEBUG:FRAME-205>
  :TEXT =  #k<KR-DEBUG:TEXT-207>
  :BEHAVIORS =  #k<KR-DEBUG:TEXT-INTER-214>
  :TEXT-INTER =  #k<KR-DEBUG:TEXT-INTER-214>
  ...
  :IS-A =  #k<OPAL:AGGREGADGET>
}
NIL
@b[lisp>] (ps (gv FRAMED-TEXT :text-inter))

{#k<KR-DEBUG:TEXT-INTER-214>
  ...
  :OPERATES-ON =  #k<FRAMED-TEXT>
  ...
  :IS-A =  #k<INTERACTORS:TEXT-INTERACTOR>
}
NIL
@b[lisp>] 

@end smallexample
@caption{The printouts of an aggregadget and its attached interactor.}
@anchor{agg-inter-ps-ref}
@end float


@float Figure, fig:ex715
@center @image{framed-text-pix, 5.5in}
@caption{A picture of the FRAMED-TEXT aggregadget.}
@anchor{framed-text-pix}
@end float



@section Instances of Aggregadgets
@node Instances of Aggregadgets
@anchor{agg-insts}
The preceding chapter discussed the use of the @code{:parts} slot
to define the structure of new aggregadgets. Once an aggregadget
is created, the structure will be inherited by instances. The
@code{:parts} slot can be used to extend or override this default
structure.

@subsection Default Instances of Aggregadgets
@node Default Instances of Aggregadgets
@anchor{instances-sec}
By default, when an instance of an aggregadget is created,
an instance of each component and interactor is also created.
Figure
@ref{instance-fig} illustrates an aggregadget on the left and its instance
on the right. Notice that each object within the prototype aggregadget
serves as a prototype for each corresponding object in the instance
aggregadget. The structure of the instance aggregate matches the structure
of the prototype, including ``external'' references to objects not in either
aggregate, as illustrated by the reference from C to D. Since D is external
to the aggregate, there is no D', and the reference to D is inherited by C'.


@float Figure, fig:ex716
@center @image{instance-fig, 5.5in}
@caption{A prototype aggregate and one instance. The dashed lines
go from instances to their prototypes, solid lines 
join children to parents, and the dotted line from C to D represents 
a formula dependence which is inherited by C'.}
@anchor{instance-fig}
@end float

When creating instances, it is possible to override slots and parts
of the prototype aggregadget, provided that these slots were not declared
constant in the prototype.

@subsection Overriding Slots and Structure
@node Overriding Slots and Structure
@anchor{overriding-slots}
Just as instances of
KR objects can override slots with local values, aggregadgets can override
slots or even entire parts (objects) with local values. The @code{:parts}
and @code{:interactors} syntax is used to override details of an
aggregadget when constructing an instance.

When creating an instance of an aggregadget that already has components,
there are several variations of the @code{:parts} syntax that can be used
to inherit components. As illustrated in these examples, if @emph{any} parts
are listed in
a @code{:parts} list, then @emph{all} parts should be listed. This is
explained further in section @ref{more-syntax-sec}:
@enumerate
If the entire @code{:parts} slot is omitted, then the components are
instantiated in the default manner described above. For example,
@smallexample
(create-instance 'NEW-X-BOX X-BOX (:left 100))
@end smallexample
will instantiate the @code{:box} and @code{:mark} parts of @code{x-box}
by default.

Any element in the list of parts may be a keyword rather than a list.
The keyword must name a component of the prototype, and an instance
of that component is created. Parts are always added in the order
they are listed, regardless of their order in the prototype.
For example:
@smallexample
(:parts `(:shadow :box :feedback))
@end smallexample

@cindex{omit (keyword in aggregadgets)}
Any element in the list of parts may be a list of the form
@code{(@emph{name} :omit)}, where @emph{name} is the name of a component
in the prototype, and @code{:omit} indicates that an instance of that
part is not included in the instance aggregadget. For example:
@smallexample
(:parts `((:shadow :omit)
	  :box
	  :feedback))
@end smallexample

@cindex{modify (keyboard in aggregadgets)}
Any element in the list of parts may be a list of the form
@cindex{modify (keyword)}
@code{(@emph{name} :modify @emph{slots})}, where @emph{name} is the part name,
@code{:modify} means to use the default prototype, and @emph{slots} is a
standard list of slot names and values which override slots inherited
from the prototype. Only the changed slots
need to be listed; the others are inherited from the prototype. [Note:
this is different from the @code{:parts} slot, where you must list all the
parts if you are changing any of them.]
If the object is an aggregadget, then one of the
slots may be a @code{:parts} list to further specify components.
For example:
@smallexample
(:parts `((:shadow :modify (:offset 5))
	  :box
	  :feedback))
@end smallexample

Any element of the list of parts may be a list of the form
@code{(@emph{name} @emph{prototype} @emph{slots})}, as described in section
@ref{parts-syntax-sec}. This indicates that the part should be added
to the instance aggregadget.
If @emph{name} names an existing component in the aggregadget, then
the new part will override the part that would otherwise be inherited.
@end enumerate


@subsection Simulated Multiple Inheritance
@node Simulated Multiple Inheritance
In some cases, it is desirable to inherit particular slots from
a default prototype object, but to override the actual prototype.
For example, one might want to change rectangles in a prototype
into circles but still inherit the @code{:top} and @code{:left} slots.
Alternatively, one might want to replace a number box with a dial
but still inherit a @code{:color} slot from the prototype number box.

The @code{:parts} syntax has a special variation to accomplish this form
of multiple inheritance. If the keyword @code{:inherit} occurs at the
top level in the @emph{slots} list, then the next element of @emph{slots}
must be a list of slot names. All the slots not mentioned in the
@code{:inherit} clause are inherited from the new prototype (the circle in
the example below). For example:
@smallexample
(:parts `((:shadow ,opal:circle
	    (:offset 5)
	    :inherit (:left :top :width :height :filling-style))
	  :box
	  :feedback))
@end smallexample


@subsection Instance Examples
@node Instance Examples
Figure @ref{circle-x-box-fig} illustrates how to override and inherit
parts from an aggregadget. The prototype aggregadget is the @code{x-box}
aggregadget shown in figure @ref{x-box-fig}. In the instance named
CIRCLE-X-BOX, a circle has been inserted between the box and the ``X''
mark, and the box has a gray fill.

@float Figure, fig:ex717
@center @image{circle-xbox-fig, 5.5in}
@smallexample

(create-instance 'CIRCLE-X-BOX X-BOX
   (:left 150)
   (:top 160)
   (:parts 
    `((:box :modify (:filling-style ,opal:gray-fill))
      (:circle ,opal:circle
	       (:left ,(o-formula (+ (gvl :parent :left) 2)))
	       (:top ,(o-formula (+ (gvl :parent :top) 2)))
	       (:width ,(o-formula (- (gvl :parent :width) 4)))
	       (:height ,(o-formula (- (gvl :parent :height) 4)))
	       (:filling-style ,opal:white-fill))
      :mark))))
@end smallexample
@caption{Adding a circle and changing the filling style in an instance
of the X-BOX aggregadget.}
@anchor{circle-x-box-fig}
@end float

In figure @ref{circle-box-fig}, the CIRCLE-X-BOX aggregadget is
further modified by replacing the ``X'' with a circle.

@float Figure, fig:ex718
@center @image{circle-box-fig, 5.5in}
@smallexample

(defun circle-box-test ()
  (create-instance 'CIRCLE-BOX CIRCLE-X-BOX
   (:left 150)
   (:top 220)
   (:parts
    `(:box 
      :circle
      (:mark :omit)
      (:inner-circle ,opal:circle
	     (:left ,(o-formula (+ (gvl :parent :left) 10)))
	     (:top ,(o-formula (+ (gvl :parent :top) 10)))
	     (:width ,(o-formula (- (gvl :parent :width) 20)))
	     (:height ,(o-formula (- (gvl :parent :height) 20))))))))
@end smallexample
@caption{Omitting the ``X'' and adding an inner circle to the
CIRCLE-X-BOX aggregadget.}
@anchor{circle-box-fig}
@end float

@subsection More Syntax: Extending an Aggregadget
@node More Syntax: Extending an Aggregadget
@anchor{more-syntax-sec}
Normally, each part of a prototype should be explicitly mentioned
in the @code{:parts} list. This is perhaps tedious, but it makes the
code clear. There is one exception
that is provided to make it simple to add things to existing prototypes.

If @emph{none} of the parts of a prototype are mentioned in the parts list,
then instances of @emph{all} of the prototype's parts are included in
the instance aggregadget. If additional parts are specified, they
are added after the default parts, so they will appear graphically on
top. @emph{It is
an error to mention some but not all of a prototype's parts in a @code{:parts}
list.}  (The current implementation only looks to see if the @emph{first}
part of the prototype is mentioned in the @code{:parts} list in order to
decide whether or not to include all of the prototype parts.)  

Figure @ref{x-sq-box-fig} illustrates the extension of 
the @code{:mark} part of the @code{x-box} prototype with
a rectangle. Since parts @code{:line1}
and @code{:line2} are not mentioned, they are included in the @code{:mark} 
part automatically.

@float Figure, fig:ex719
@center @image{x-sq-box-fig, 5.5in}
@smallexample

(defun x-sq-box-test ()
  (create-instance 'X-SQ-BOX X-BOX
    (:left 210)
    (:top 20)
    (:parts
     `(:box		; inherit the box with no change
       (:mark :modify	; modify the mark
	(:parts		; since :line1 and :line2 are not mentioned,
			; they are inherited as is
	 ((:square ,opal:rectangle	; add a new part to the mark
	      (:left ,(o-formula (horiz-prop 0.2)))
	      (:width ,(o-formula (- (horiz-prop 0.8) 
				     (horiz-prop 0.2))))
	      (:top ,(o-formula (vert-prop 0.2)))
	      (:height ,(o-formula (- (vert-prop 0.8) 
				      (vert-prop 0.2))))))))))))
@end smallexample
@caption{Extending the x-box prototype with a new rectangle in the mark
part.}
@anchor{x-sq-box-fig}
@end float

@section Aggrelists
@node Aggrelists
@cindex{aggrelists}
@anchor{aggrelists}

Many interfaces require the arrangement of a set of objects in a graphical
list, such as menus and parallel lines. Aggrelists are designed to
facilitate the arrangement of objects in graphical lists while providing
many customizable slots that determine the appearance of the list. The
methods @code{add-component} and @code{remove-component} can be used to alter
the components in the list after the aggrelist has been instantiated.
(See section @ref{aggrelist-manipulation-sec}.)

@cindex{itemized aggrelists}
A special style of aggrelists, called ``itemized aggrelists'', may be used
when the items of the list are all instances of the same prototype (e.g., all
items in a menu are text strings).
These aggrelists use the methods @code{add-item} and @code{remove-item}
to manipulate the components of the list.

Aggrelists are independent of aggregadgets and may be used separately or
inside aggregadgets. Aggrelists may also have aggregadgets as components
in order to create objects such as menus or choice lists.

Interactors may be defined for aggrelists using the same methods that
implement interactors in aggregadgets (section @ref{agg-interactors}).

@subsection How to Use Aggrelists
@node How to Use Aggrelists

@sp 1
The definition of the @code{aggrelist} prototype in Opal is:
@sp 1

@smallexample
(create-instance 'opal:aggrelist opal:aggregate
 (:maybe-constant '(:left :top :width :height :direction :h-spacing :v-spacing
		    :indent :h-align :v-align :max-width :max-height
		    :fixed-width-p :fixed-height-p :fixed-width-size
		    :fixed-height-size :rank-margin :pixel-margin :items :visible))
 (:left 0)
 (:top 0)
 (:width (o-formula ...))
 (:height (o-formula ...))
 (:direction :vertical)	      @emph{; Can be :horizontal, :vertical, or NIL}
 (:h-spacing 5)		      @emph{; Pixels between horizontal elements}
 (:v-spacing 5)		      @emph{; Pixels between vertical elements}
 (:indent 0)		      @emph{; How much to indent on wraparound}
 (:h-align :left)	      @emph{; Can be :left, :center, or :right}
 (:v-align :top)	      @emph{; Can be :top, :center, or :bottom}
 (:max-width  (o-formula (...)))
 (:max-height (o-formula (...)))
 (:fixed-width-p NIL)	      @emph{; Whether to use fixed-width-size}
 (:fixed-height-p NIL)        @emph{; Whether to use fixed-height-size}
 (:fixed-width-size NIL)      @emph{; The width of all components}
 (:fixed-height-size NIL)     @emph{; The height of all components}
 (:rank-margin NIL)           @emph{; If non-NIL, the number of components in each row/column}
 (:pixel-margin NIL)          @emph{; Same as :rank-margin, but with pixels}
 (:head NIL)                  @emph{; The first component (read-only slot)}
 (:tail NIL)                  @emph{; The last component (read-only slot)}
 (:items NIL)                 @emph{; List of the items or a number}
 (:item-prototype NIL)        @emph{; Specification of prototype of the items (when itemized)}
 (:item-prototype-object NIL) @emph{; The actual object, set internally (read-only slot)}
 ...)
@end smallexample

Aggrelists are easily customized by providing values for the controlling
slots. Any slot listed below may be given a value during the definition
of an aggrelist. The slots can also be modified (using the KR function
@code{s-value}) after the aggrelist is displayed to change the appearance of
the objects. However, each slot has a default value and the designer
may choose to ignore most of the slots.

@cindex{constants in aggrelists}
The list in @code{:maybe-constant} contains those slots that will be
declared constant in an aggrelist whose @code{:constant} slot contains T.
That is, when you create an aggrelist with the slot @code{(:constant T)},
then all of these slots are guaranteed not to change, and all formulas
that depend on those slots will be removed and replaced by absolute
values. This removal of formulas has the potential to save a large amount
of storage space.

The following slots are available for customization of aggrelists:

@vtable @code

@code{:left} @ref{shortdash} The leftmost coordinate of the aggrelist
(default is 0).

@code{:top} @ref{shortdash} The topmost coordinate of the aggrelist
(default is 0).

@code{:items} @ref{shortdash} A number (indicating the number of items
in the aggrelist) or a list of values that will be used by the components.
If the value is a list, then do not destructively modify the value;
instead, set the value with a new list (using @code{list}) or use @code{copy-list}.

@code{:item-prototype} @ref{shortdash} Either a schema or a
description of a schema (see section @ref{the-i-p-slot}).

@cindex{direction}
@code{:direction} @ref{shortdash} Either :@code{horizontal},
@code{:vertical} or @code{nil}. If the value is either @code{:horizontal} or 
@code{:vertical}, the system will install values in the @code{:left} and
@code{:top} slots of each component, in order to lay out the
list properly according to the direction. If the value is @code{nil}, then the
designer must provide formulas for the @code{:left} and @code{:top}
slots of each component (default is @code{:vertical}).

@cindex{v-spacing}
@code{:v-spacing} @ref{shortdash} Vertical spacing between elements
(default is 5). 

@cindex{h-spacing}
@code{:h-spacing} @ref{shortdash} Horizontal spacing between elements
(default is 5). 

@cindex{fixed-width-p}
@code{:fixed-width-p} @ref{shortdash} If set to T, all the components
will be placed in fields of constant width. These fields will be of
the size of the widest component, unless the slot
@code{:fixed-width-size} is non-NIL, in which case it will default to
the value stored there (default is @code{nil}). 

@cindex{fixed-width-size}
@code{:fixed-width-size} @ref{shortdash} The width of all components,
if @code{:fixed-width-p} is T (default is @code{nil}).

@cindex{fixed-height-p}
@code{:fixed-height-p} @ref{shortdash} If set to T, all the components
will be placed in fields of constant height. These fields will be of
the size of the tallest component, unless the slot
@code{:fixed-height-size} is non-NIL, in which case it will default to
the value stored there (default is @code{nil}). 

@cindex{fixed-height-size}
@code{:fixed-height-size} @ref{shortdash} The height of all components, if
@code{:fixed-width-p} is T (default is @code{nil}).

@cindex{h-align}
@code{:h-align} @ref{shortdash} The type of horizontal alignment to use within
a field (only applicable if @code{fixed-width-p} is T). Allowed values are
 @code{:left}, @code{:center}, or @code{:right} (default is @code{:left}).

@cindex{v-align}
@code{:v-align} @ref{shortdash} The type of vertical alignment to use within
a field (only applicable is @code{fixed-height-p} is T). Allowed values are
 @code{:top}, @code{:center}, or @code{:bottom} (default is @code{:top}).

@cindex{rank-margin}
@code{:rank-margin} @ref{shortdash} If non-NIL, then after this many
components, a new row will be started for horizontal lists, or a new
column for vertical lists (default is @code{nil}).

@cindex{pixel-margin}
@code{:pixel-margin} @ref{shortdash} If non-NIL, then this acts as an
absolute position in pixels in the window; if adding the next component would
result in extending beyond this value, then a new row or column is started
(default is @code{nil}).

@cindex{indent}
@code{:indent} @ref{shortdash} The amount to indent upon starting a new row/column (in pixels)
(default is 0).
@end vtable


@subsection Itemized Aggrelists
@node Itemized Aggrelists
@cindex{itemized aggrelists}
When all the components of an aggrelist are instances of the same prototype,
the aggrelist is referred to as an itemized aggrelist. This type of
aggrelist provides for the automatic generation of the components from a
specified item prototype. This feature is convenient when creating objects
such as menus or button panels, whose components are all similar.
(In a non-itemized aggrelist, the components may be of several types,
though they still take advantage of the layout mechanisms of
aggrelists, as in section @ref{non-itemized-sec}.)

To cause an aggrelist to generate its components from a prototype, the
@code{:item-prototype} and the @code{:items} slot may be set.

@subsection The :item-prototype Slot
@node The :item-prototype Slot
@cindex{item-prototype}
@anchor{the-i-p-slot}
The @code{:item-prototype} slot contains a description of the
prototype object that will be used to create the items. This slot is
analogous to the @code{:parts} slot for aggregadgets.
Garnet builds an object from the @code{:item-prototype} description and stores
this object in the @code{:item-prototype-object} slot of the aggrelist.
@b{Do not specify or set the} @code{:item-prototype-object} @b{slot}.

The prototype may be any Garnet object, including
aggregadgets, and may be given either as an existing schema name 
or as a quoted list holding an object definition, as in
@smallexample
(:item-prototype `(,opal:rectangle (:width 100)
                                   (:height 50)))
@end smallexample
The keyword @code{:modify}
@cindex{modify (keyword)}
may be used to indicate changes to an inherited item prototype, as in
@smallexample
(:item-prototype `(:modify (:width 100)
                           (:height 50)))
@end smallexample
The prototype for the @code{:item-prototype-object} in this case will be 
the @code{:item-prototype-object}
of the prototype of the aggrelist being specified.
This form would be used to modify the default in some way (see section
@ref{modify-item-sec}).

If no local @code{:item-prototype} slot is specified, the default is
to create an instance of the @code{:item-prototype-object} of the 
prototype aggrelist. If there is no @code{:item-prototype-object}, 
then this is not an itemized aggrelist (see section @ref{non-itemized-sec}).

@subsection The :items Slot
@node The :items Slot
@cindex{items}
The @code{:items} slot holds either a number or a list. If it is a
number @emph{n}, then @emph{n} identical instances of @code{:item-prototype-object}
will be created and added to the aggrelist. If it is a list of @emph{n}
elements, @emph{n} instances of @code{:item-prototype-object} will be
created and added to the aggrelist.

When @code{:items} is a list of elements, the designer must define a formula
in the @code{:item-prototype} that extracts the desired element from the list
for each component. In a menu, for example, the @code{:items} slot will
usually be a list of strings. Components should index their individual
strings from the @code{:items} list according to their @code{:rank}. The
following slot 
definition, to be included in the @code{:item-prototype}, would yield this
functionality:
@smallexample
@code{(:string (o-formula (nth (gvl :rank) (gvl :parent :items))))}
@end smallexample
This formula assigns the @emph{n}th string in the @code{:items} list to the
@emph{n}th component of the aggrelist.


The @code{:items} slot may also hold a nested list so that the components
can extract more than one value from it. For example, if the components
of a menu are characterized both by a label and a function (to be called
when the item is selected), the @code{:item} slot of the menu will be a list
of pairs '((@emph{label} @emph{function}) ...), and the components will
access their strings and associated functions with formulas such as:
@smallexample
(:string (o-formula (first (nth (gvl :rank) (gvl :parent :items)))))
(:function (o-formula (second (nth (gvl :rank)
                                   (gvl :parent :items)))))
@end smallexample

The list in the @code{:items} list may not be destructively modified. If you
need to modify the current value of the slot, you should create a new list
(e.g., with @code{list}) or use @code{copy-list} on the current value and modify
the resulting copied list.


@subsection Aggrelist Components
@node Aggrelist Components
@cindex{components of aggrelists}

When the value of @code{:items} changes, the number of components corresponding
to the change will be adjusted automatically during the next call to
@code{opal:update}. In most cases, users will never have to do anything
special to cause the components to become consistent with the @code{:items} list.

In some cases, an application might need to refer to the new components
(or the new positions of the components) @emph{before} calling @code{opal:update}.
It is possible to explicitly adjust the number of components in the aggrelist
after setting the @code{:items} list by calling:

@cindex{notice-items-changed}
@code{opal:Notice-Items-Changed} @emph{aggrelist}@ref{method}

where @emph{aggrelist} is the aggrelist whose @code{:items} slot has changed.
This function will additionally execute the layout function on the components,
so that they will have up-to-date @code{:left} and @code{:top} values.


@subsection Constants and Aggrelists
@node Constants and Aggrelists
@anchor{constants-in-aggrelists}
@cindex{constants in aggrelists}

@sp 1
@b{Constant :items and :components}

All aggrelists created with a constant @code{:items} slot have a constant
@code{:components} slot automatically. That is, after the
aggrelist has been created with all of its components according to its
@code{:items} list, the @code{:components} slot becomes constant by
default, and the items and components become unmodifiable (with the
two exceptions below). In addition, the @code{:head} and @code{:tail}
slots of the aggrelist, which point to the first and last component,
also become constant. By declaring these slots constant, Garnet is
able to automatically get rid of the greatest number of formulas possible.

If you really want to add another item to a constant aggrelist, you
could wrap a call to @code{add-item} in @code{with-constants-disabled},
which disables the protective constant mechanism, and is described
fully in the KR chapter. However, just as with aggregadgets (discussed
in section @ref{constants-and-aggregadgets}), this is discouraged
due to the likelihood that the dimension formulas of the aggrelist
will have already been evaluated and thrown away before the new item
is added, resulting in an incorrect bounding box for the aggrelist.

A better solution is to create a non-constant aggrelist to begin with.
If you plan to change the @code{:items} slot, then do not include it in the
@code{:constant} list. If you are using T in the constant list, be sure
to @code{:except} the @code{:items} slot.

@b{Constant :left and :top in Components}

The @code{:left} and @code{:top} slots of each component are set during the
layout of the aggrelist. If all of the slots controlling the layout are
constant in the aggrelist, then the @code{:left} and @code{:top} slots of the
components will be declared constant after they are set. The slots controlling
the layout are:

@table @code
:left

:top

:items

:direction

:v-spacing

:h-spacing

:indent

:v-align

:h-align

:fixed-width-p

:fixed-height-p

:fixed-width-size

:fixed-height-size

:rank-margin

:pixel-margin
@end table

Even if you do not supply customized values for these slots, you will still
need to declare them constant for the desired effect. They are all included
in the aggrelist's @code{:maybe-constant} list, so it is easy to declare them
all constant with a @code{:constant} value of T.

Since the aggrelist layout function sets the @code{:left} and @code{:top} slots
of each component, it is important @b{not} to declare these slots constant
yourself, unless you do so after the aggrelist has already been laid out.


@subsection A Simple Aggrelist Example
@node A Simple Aggrelist Example
@anchor{aggitem-expl-ref}
The following code is a short example of an itemized aggrelist
composed of text strings, and the picture of this aggrelist is in
figure @ref{aggitem-expl-pict}. Note that the @code{:left} and
@code{:top} slots of the @code{:item-prototype} have been left undefined.
The aggrelist will fill these slots with the appropriate values
automatically. 

@smallexample
(create-instance 'MY-AGG opal:aggrelist
   (:left 10) (:top 10)
   (:direction :horizontal)
   (:items '("This" "is" "an" "example"))
   (:item-prototype
    `(,opal:text
      (:string ,(formula '(nth (gvl :rank) (gvl :parent :items)))))))
@end smallexample

@float Figure, fig:ex720
@center @image{agg-list-item, 5.5in}
@caption{The picture of an itemized aggrelist.}
@anchor{aggitem-expl-pict}
@end float


@subsection An Aggrelist with an Interactor
@node An Aggrelist with an Interactor
As another example of an itemized aggrelist, consider the schema
FRAMED-TEXT-LIST defined in figure @ref{framed-text-list}. 
A picture of the FRAMED-TEXT-LIST aggrelist appears in figure
@ref{framed-text-list-pix}.

@float Figure, fig:ex721
@smallexample
(create-instance 'FRAMED-TEXT-LIST opal:aggrelist
   (:left 0) (:top 0)
   (:items '("An aggrelist" "using an" "aggregate" 
	     "as an" "item-prototype"))
   (:item-prototype
    `(,opal:aggregadget
      (:parts
       ((:frame ,opal:rectangle
	   (:left ,(o-formula (gvl :parent :left)))
	   (:top ,(o-formula (gvl :parent :top)))
	   (:width ,(o-formula (+ (gvl :parent :text :width) 4)))
	   (:height ,(o-formula (+ (gvl :parent :text :height) 4))))
	(:text ,opal:text
	   (:left ,(o-formula (+ (gvl :parent :left) 2)))
	   (:top ,(o-formula (+ (gvl :parent :top) 2)))
	   (:cursor-index NIL)
	   (:string ,(o-formula
		      (nth (gvl :parent :rank)
		      (gvl :parent :parent :items)))))))
      (:interactors
       ((:text-inter ,inter:text-interactor
	   (:window ,(o-formula 
		      (gv-local :self :operates-on :window)))
	   (:feedback-obj NIL)
	   (:start-where ,(o-formula
	     (list :in (gvl :operates-on :text))))
	   (:abort-event #\control-\g)
	   (:stop-event (:leftdown #\RETURN))
	   (:final-function
	    ,#'(lambda (inter text event string x y)
		 (let ((elem (gv inter :operates-on)))
		   (change-item (gv elem :parent)
				string
				(gv elem :rank))))) ))))))
@end smallexample
@caption{An aggrelist using an aggregadget as the @code{:item-prototype}.}
@anchor{framed-text-list}
@end float

@float Figure, fig:ex722
@center @image{framed-text-list-pix, 5.5in}
@caption{A picture of the FRAMED-TEXT-LIST aggrelist.}
@anchor{framed-text-list-pix}
@end float

This
aggrelist explicitly defines an aggregadget as the @code{:item-prototype}.
This aggregadget is similar to the FRAMED-TEXT schema defined
in figure @ref{framed-text}, but there is an additional @code{:final-function}
slot (see figure @ref{framed-text-list}). The purpose of the
@code{:final-function} is to keep the strings in the
@code{:items} list consistent with the strings in the components.

Interaction works as follows:  Each item is an aggregadget with
its own @code{text-interactor} behavior and @code{text} component.
The cursor text @code{:string} slot is constrained to the corresponding
element in the FRAMED-TEXT-LIST's @code{:items} slot, but this
is a one-way constraint.
The text interactor modifies the @code{:string} slot of the
cursor text using @code{s-value}, which leaves the formula in place,
but temporarily changes the slot value. At this point, the @code{:items}
slot and the cursor text @code{:string} slots are inconsistent, and
any change to @code{:items} would cause all @code{:string} slot formulas
to re-evaluate, possibly losing the string data set by the interactor.
To avoid this problem, the @code{:final-function} of the
text interactor directly sets the @code{:items}
slot using @code{change-item} to be consistent with the formula. This
initiates a re-evaluation, but because all values are consistent,
no data is lost. Furthermore, if the FRAMED-TEXT-LIST is saved
(see section @ref{write-gadget-sec}), the @code{:items} list will have
the current set of strings, and what is written will match what is
displayed.

Since the aggregadget defined here is similar to the
FRAMED-TEXT schema defined in figure @ref{framed-text}, the
@code{:item-prototype} slot definition could be replaced with
@smallexample
(:item-prototype 
 `(,FRAMED-TEXT
   (:parts
    (:frame
     (:text :modify
	(:string ,(o-formula (nth (gvl :parent :rank)
				  (gvl :parent :parent :items)))))))
   (:interactors
    ((:text-inter :modify
		  (:final-function
		   ,#'(lambda (inter text event string x y)
			(let ((elem (gv inter :operates-on)))
			  (change-item (gv elem :parent)
				       string
				       (gv elem :rank))))))))))
@end smallexample
provided that the definition for the FRAMED-TEXT schema preceded the
FRAMED-TEXT-LIST definition.

See section @ref{Menu-Aggrelist-Example} for an example of a menu
made with an itemized aggrelist.


@subsection An Aggrelist with a Part-Generating Function
@node An Aggrelist with a Part-Generating Function
@anchor{multi-parts-fn}
@cindex{Part-generating functions}
@cindex{Aggrelists}

Section @ref{creating-part-fn} discussed a feature of aggregadgets
that allows you to create parts of an aggregadget by specifying
part-generating functions. This feature of aggregadgets can be
especially useful when an aggregadget is the @code{:item-prototype} of
an aggrelist. While the same principles hold for aggregadgets whether
they are solitary or used in aggrelists, there is a special
consideration regarding the @code{:item-prototype-object} that warrants
further discussion.

A typical application of aggrelists that would involve a
part-generating function might specify a list of objects in its
@code{:items} list and generate components that have those objects as
parts. Such an application is pictured in figure @ref{esp-cards}.
The @code{:item-prototype} for this aggrelist is an aggregadget with a
part-generating function that determines its label. The definition of
the aggrelist, along with its part-generating function appears below.

@float Figure, fig:ex723
@center @image{esp-cards-pix, 5.5in}
@caption{An aggrelist that uses a part-generating function in its
:item-prototype}
@anchor{esp-cards}
@end float

@smallexample
(defun Get-Label-In-Aggrelist (agg)
  (let ((alist (gv agg :parent)))
    (if alist  @emph{;; The item-prototype has no parent}
	(let* ((item (gv agg :item))
	       (new-label (if (schema-p item)
			      (if (gv item :parent)
				  @emph{;; The item has been used already --}
				  @emph{;; Use it as a prototype}
				  (create-instance NIL item)
				  @emph{;; Use the item itself}
				  item)
			      (create-instance NIL opal:text
				(:string item)
				(:font (opal:get-standard-font
					:sans-serif :bold :very-large))))))
	  (s-value new-label :left
		   (o-formula (+ (gvl :parent :left)
				 (round (- (gvl :parent :width)
					   (gvl :width)) 2))))
	  (s-value new-label :top
		   (o-formula (+ (gvl :parent :top)
				 (round (- (gvl :parent :height)
					   (gvl :height)) 2))))
	  new-label)
        ;; Give the item-prototype a bogus part
        (create-instance NIL opal:null-object))))
@end smallexample

@smallexample
(create-instance 'CIRCLE-LABEL opal:circle
  (:width 30) (:height 30)
  (:line-style NIL)
  (:filling-style opal:black-fill))

(create-instance 'SQUARE-LABEL opal:rectangle
  (:width 30) (:height 30)
  (:line-style NIL)
  (:filling-style opal:black-fill))
@end smallexample

@smallexample
(create-instance 'PLUS-LABEL opal:aggregadget
  (:width 30) (:height 30)
  (:parts
   `((:rect1 ,opal:rectangle
      (:left ,(o-formula (+ 10 (gvl :parent :left))))
      (:top ,(o-formula (gvl :parent :top)))
      (:width 10) (:height 30)
      (:line-style NIL) (:filling-style ,opal:black-fill))
     (:rect2 ,opal:rectangle
      (:left ,(o-formula (gvl :parent :left)))
      (:top ,(o-formula (+ 10 (gvl :parent :top))))
      (:width 30) (:height 10)
      (:line-style NIL) (:filling-style ,opal:black-fill)))))
@end smallexample

@smallexample
(create-instance 'STAR-LABEL opal:polyline
  (:width 30) (:height 30)
  (:point-list (o-formula
		(let* ((width (gvl :width))    (width/5 (round width 5))
		       (height (gvl :height))  (x1 (gvl :left))
		       (x2 (+ x1 width/5))     (x3 (+ x1 (round width 2)))
		       (x5 (+ x1 width))       (x4 (- x5 width/5))
		       (y1 (gvl :top))         (y2 (+ y1 (round height 3)))
		       (y3 (+ y1 height)))
		  (list x3 y1  x2 y3  x5 y2  x1 y2  x4 y3  x3 y1))))
  (:line-style opal:line-2))
@end smallexample

@smallexample
(create-instance 'ALIST opal:aggrelist
  (:left 10) (:top 20)
  (:items (list CIRCLE-LABEL SQUARE-LABEL "W" PLUS-LABEL STAR-LABEL))
  (:direction :horizontal)
  (:item-prototype
   `(,opal:aggregadget
     (:item ,(o-formula (nth (gvl :rank) (gvl :parent :items))))
     (:width 60) (:height 80)
     (:parts
      ((:frame ,opal:rectangle
	       (:left ,(o-formula (gvl :parent :left)))
	       (:top ,(o-formula (gvl :parent :top)))
	       (:width ,(o-formula (gvl :parent :width)))
	       (:height ,(o-formula (gvl :parent :height))))
       (:label ,#'Get-Label-In-Aggrelist))))))
@end smallexample

The parts-generating function Get-Label-In-Aggrelist takes into
account the aggregadget that will be generated for the
@code{:item-prototype-object} in ALIST. In this example, we are
concerned about reserving our label prototypes solely for use in the
visible components. We could ignore this case, but then one of our prototypes
(like CIRCLE-LABEL) would become a component of the @code{:item-prototype-object}
which never appears in the window. (Additionally, problems could
arise if we destroyed the aggrelist along with its @code{:item-prototype-object}
and still expected to use the label as a prototype). Instead, we
specifically check if we are generating a part for the
@code{:item-prototype-object} and return a bogus object, saving our real
labels for the visible instances. 

The gadgets that use aggrelists (like the button panels and menus) all
use this feature, so you can have Garnet objects in the @code{:items}
list of a gadget. See the Gadgets chapter for further details.


@subsection Non-Itemized Aggrelists
@node Non-Itemized Aggrelists
@anchor{non-itemized-sec}
@cindex{parts in aggrelists}
Non-itemized aggrelists may be specified with the @code{:parts} slot,
just as in aggregadgets, except aggrelists will automatically set the
@code{:left} and @code{:top} slots (among others). Figure @ref{parts-list-fig}
creates an aggrelist with three components, and a picture of this
aggrelist is shown in figure @ref{agglist-expl-ref}.

@float Figure, fig:ex724
@smallexample
(create-instance 'MY-AGG opal:aggrelist 
  (:left 10) (:top 10)
  (:parts
   `((:obj1 ,opal:rectangle (:width 60) (:height 30))
     (:obj2 ,opal:oval (:width 60) (:height 30))
     (:obj3 ,opal:roundtangle (:width 60) (:height 30)))))
@end smallexample
@caption{Example of an aggrelist with a parts slot.}
@anchor{parts-list-fig}
@end float

@float Figure, fig:ex725
@center @image{agg-list, 5.5in}
@caption{The picture of an aggrelist with three components.}
@anchor{agglist-expl-pict}
@end float

Instances of aggrelists are similar to instances of aggregadgets except
for the handling of default components and the @code{:item-prototype-object}
slot. Unlike aggregadgets, components that were generated by a
@code{:parts} list are not automatically inherited, so an aggrelist with
an empty @code{:parts} slot will @emph{not} inherit the parts of its
prototype. The only way to inherit these components is to 
name them in the prototype and to list each name as one of the instance's
@code{:parts}. For example, the following instance of MY-AGG (defined
above) will inherit the parts defined in the prototype:
@smallexample
(create-instance 'MY-INST MY-AGG
  (:left 100)
  (:parts '(:obj1 :obj2 :obj3)))
@end smallexample

Note that this syntax is consistent with the rules for customizing the
parts of aggregadgets described in section @ref{agg-insts}.

@cindex{constants in aggrelists}
Like aggregadgets, aggrelists created with a @code{:parts} slot
have constant @code{:components} by default. To cause the @code{:left} and
@code{:top} slots of the components to become constant after the aggrelist
is laid out, all of the layout parameters listed in section
@ref{constants-in-aggrelists} (including the @code{:items} slot) must be declared
constant.


@section Instances of Aggrelists
@node Instances of Aggrelists
@anchor{modify-item-sec}
When an instance is made of an itemized aggrelist,
components are automatically created as instances of the item prototype
object according to the local or inherited @code{:items} slot.

A consequence of these rules for making instances is that a default instance
of a non-itemized aggrelist will typically have no components, while a default
instance of an itemized aggrelist will typically have the same component
structure as its prototype due to the inherited @code{:items} slot.

@subsection Overriding the Item Prototype Object
@node Overriding the Item Prototype Object
For itemized aggrelists, an instance of the item prototype object is made
automatically and stored in the @code{:item-prototype-object} slot of the
instance aggrelist. The same syntax used in the @code{:parts} slot can be
used to override slots of the item prototype object. For example, figure
@ref{modify-item-fig} illustrates a variation on the text list in figure
@ref{framed-text-list}. Here, the @code{:frame} component is inherited and
modified to be gray and relatively wider than its prototype, a new
component, @code{:white-box} is added, and the @code{:text} component is
inherited and modified to be centered in the new larger surrounding
@code{:frame}. The text interactor is inherited without modification by
default. 

@emph{Note:} The @code{:items} list, if left unspecified, would be shared
with FRAMED-TEXT-LIST. It is generally a good idea to specify
the @code{:items} to avoid sharing.

@float Figure, fig:ex726
@center @image{boxed-text-list-pix, 5.5in}
@smallexample

(create-instance 'BOXED-TEXT-LIST FRAMED-TEXT-LIST
   (:items '("An aggrelist" "using an" "inherited"
	     "but modified" "item-prototype"))
   (:left 120)
   (:top 0)
   (:item-prototype
    `(:modify
      (:parts
       ((:frame :modify
	   ; make the frame gray
	   (:filling-style ,opal:gray-fill)
	   ; make the frame wider
	   (:width ,(o-formula (+ (gvl-sibling :text :width) 16)))
	   ; make the frame taller
	   (:height ,(o-formula (+ (gvl-sibling :text :height) 16))))
	(:white-box ,opal:rectangle
	   (:filling-style ,opal:white-fill)
	   (:left ,(o-formula (+ (gvl :parent :left) 4)))
	   (:top ,(o-formula (+ (gvl :parent :top) 4)))
	   (:width ,(o-formula (+ (gvl-sibling :text :width) 8)))
	   (:height ,(o-formula (+ (gvl-sibling :text :height) 8))))
	(:text :modify  ; move the text to allow for the border
	   (:left ,(o-formula (+ (gvl :parent :left) 8)))
	   (:top ,(o-formula (+ (gvl :parent :top) 8)))))))))
@end smallexample
@caption{An aggrelist that overrides parts of an inherited
@code{:item-prototype}. The prototype FRAMED-TEXT-LIST was defined in
figure @ref{framed-text-list}.}
@anchor{modify-item-fig}
@end float

@section Manipulating Gadgets Procedurally
@node Manipulating Gadgets Procedurally

A collection of functions is available to alter aggregadget and
aggrelist prototypes. When the prototype is altered, the changes
propagate down to instances of the prototype. Inheritance of slots
is a standard feature of KR, but inheritance of structural changes
is unique to aggregadgets and aggrelists and is implemented by
the functions and methods described in this chapter.

The philosophy behind structural inheritance is simply stated:
@emph{changing a prototype and then making an instance should be
equivalent to making an instance and then changing the prototype.}
In practice, this equivalence is difficult to achieve completely;
exceptions will be noted.

@subsection Copying Gadgets
@node Copying Gadgets
@cindex{copy-gadget}
@code{opal:Copy-Gadget} @emph{gadget}@ref{function}

This function copies an aggregadget, aggrelist, aggregate, or Opal graphical
object. The copy will have the same structure as the original. This is
different from (and more expensive than) creating an instance because 
nothing will be inherited from the original.

When copying an itemized aggrelist, components are not copied, because they
inherit from the local items-prototype-object. Instead, the @code{:items} 
slot and the item-prototype-object are copied, and new components are generated
accordingly.


@subsection Aggregadget Manipulation
@node Aggregadget Manipulation
@subsection Add-Component
@node Add-Component
@anchor{add-component-sec}

@sp 1
@cindex{add-component}
@code{opal:Add-Component} @emph{gadget} @emph{element} [[@code{:where}] @emph{position} [@emph{locator}]]@ref{method}
@sp 1

This function behaves just like the @code{add-component} method for
aggregates (see the @emph{Opal Reference
Chapter}) except that, 
@itemize
if @emph{gadget} is a prototype, then instances of
@emph{element} are also added to instances of @emph{gadget}. This is recursive
so that instances of instances, etc., are also affected;

if @emph{element} has slot @code{:known-as} with value @emph{name}, then the
@emph{name} slot of @emph{gadget} is set to be @emph{element}. This creates
the standard link from @emph{gadget} to @emph{element} (see Section
@ref{known-as-sec}). Ordinarily, the @code{:known-as} slot of @emph{element}
should be set before calling @code{add-component}.
@end itemize

@emph{Note:}  Names of components and interactors
must be unique within their parent. For
example, there must not be two components named @code{:box}.

The
@emph{position} and @emph{locator} arguments can be used to adjust the
placement of @emph{graphical-object} with respect to the rest of the
components of @emph{gadget}.

@emph{position} can be any of these five values:
@table @code

@code{:front} 
@code{:back} 
@code{:behind} 
@code{:in-front} 
@code{:at}
or any of the following aliases:

@code{:tail} 
@code{:head} 
@code{:before} 
@code{:after} 
@code{:at}
@end table

The keyword @code{:where} is optional; for example, 
@smallexample
(add-component aggrelist new-component :where :head)

(add-component aggrelist new-component :head)
@end smallexample
are valid and equivalent calls to @code{add-component}.
The default value for @code{:where} is @code{:tail}
(add to the end of the list, which is graphically 
on top or at the front).

If @emph{position} is either @code{:before}/@code{:behind} or
@code{:after}/@code{:in-front} 
then the value of @emph{locator} should be a graphical object already in the
component list of the aggregate, in which case @emph{graphical-object} is placed
with respect to @emph{locator}.

If @emph{position} is @code{:at}, @emph{graphical-object} is placed at the
@emph{locator}th position in the component list, where
the zeroth position is the head of the list.

@emph{Note:} The @code{add-component} method will always add the component at
the most reasonable position if the specified location does not exist.
For example, if @code{add-component} is asked to add a component after another
one that does not exist, the new component will be added at the tail.

Instances of @emph{element} are created and added to instances of @emph{gadget}
using recursive calls to @code{add-component}. Since instances of
@emph{gadget} may not have the same structure as @emph{gadget}, 
it is not always obvious where to add a component.
In particular, a given @emph{locator} object will never exist
in instances, so a new instance @emph{locator} must be inferred from
the prototype @emph{locator} as follows:
@itemize
If the instance gadget has a component that is an instance of the
prototype @emph{locator}, then that component is the instance @emph{locator}.

Otherwise, if the instance gadget has a component with the same
@emph{name} (@code{:known-as}) as the prototype @emph{locator}, then that
component is the instance @emph{locator}.

Otherwise, a warning is printed, and there is no locator.
@end itemize

Given this procedure for finding an instance @emph{locator},
the insert point is determined as follows:
@itemize
The default position is @code{:front}.

If the @emph{position} is specified as @code{:front} or @code{:tail}, always insert
the component at the @code{:front}.

If the @emph{position} is specified as @code{:back} or @code{:head}, always insert
the component at the @code{:back}.

If the @emph{position} is @code{:behind} or @code{:before} @emph{locator}, and
an instance @emph{locator} is found, then insert @code{:behind} the instance
@emph{locator}, otherwise insert at the @code{:front} (the rationale here
is to err toward the front, making errors immediately visible).

If the @emph{position} is @code{:in-front} or @code{:after} @emph{locator}, and
an instance @emph{locator} is found, then insert @code{:in-front} of the instance
@emph{locator}, otherwise insert at the @code{:front}.

If the @emph{position} is @code{:at}, then @emph{locator} is an index. Use
the same index to insert an @emph{element} instance in each @emph{gadget}
instance.
@end itemize

@subsection Remove Component
@node Remove Component
@anchor{remove-component-sec}

@cindex{remove-component}
@code{opal:Remove-Component} @emph{gadget element} [ @emph{destroy?} ]@value{Method}

The @code{remove-component} method removes the
@emph{element} from @emph{gadget}. If @i{gadget} is connected to
a window, then @i{element} will be erased when the
window next has an update message sent to it.


Because aggregadgets allow
even the prototype of a component to be overridden in an instance,
determining what components to remove is not always straightforward.
First, @code{remove-component} removes all instances of @emph{component}
from their parents @emph{if} the parent @code{is-a-p} the @emph{gadget} argument.
(This avoids breaking up aggregates that use instances of components but
which are not instances of @emph{gadget}.)  Then, @code{remove-component}
removes all parts of instances of @emph{gadget}
that have a @code{:known-as} slot that matches that of
the @emph{component}. Components are removed with recursive calls to 
@code{remove-component} to affect the entire instance tree.

If @emph{destroy?} is not @code{nil} (the default is @code{nil}), then the removed objects
are destroyed.


@subsection Add-Interactor
@node Add-Interactor
Interactors can be added by calling

@cindex{add-interactor}
@code{opal:Add-Interactor} @emph{gadget} @emph{interactor}@ref{method}

where @emph{gadget} is an aggregadget or aggrelist. If the
interactor has a @code{:known-as} slot, then this becomes the
name of the interactor. The @code{:operates-on}
slot in the interactor is set to the gadget.

An instance of @emph{interactor} is added to each instance of
@emph{gadget} using a recursive call to @code{add-interactor}.

@emph{Note:} @emph{gadget} should not have an interactor or component
with the same name (@code{:known-as} slot) already. Otherwise,
an inconsistent gadget will result.


@subsection Remove-Interactor
@node Remove-Interactor
@cindex{remove-interactor}
@code{opal:Remove-Interactor} @emph{gadget} @emph{interactor} [@emph{destroy?}]@ref{method}

is used to remove an interactor. The interactor @code{:operates-on}
slot is destroyed, as is the link from @emph{gadget} to the @emph{interactor}
(determined by the value of the @emph{interactor}'s @code{:known-as} slot).
In addition, the @emph{interactor}'s @code{:active} slot is set to @code{nil}.
The @emph{interactor} is also destroyed if the optional @emph{destroy?} 
parameter is not @code{nil}.

Instances of @emph{interactor} that belong to instances of @emph{gadget}
(as determined by the @code{:operates-on} slot) are recursively
removed.
As with @code{remove-component},
interactors that have the same name as @emph{interactor}
are removed from instances of @emph{gadget}. (This will only have
an effect if, in an instance of @emph{gadget}, the default inherited
interactor has been overridden or replaced by a different one.)

@emph{Note:} Since a call to @code{remove-interactor} will deactivate
the interactor, be sure to set the @code{:active} slot appropriately if
the interactor is subsequently added to a gadget.

@subsection Take-Default-Component
@node Take-Default-Component
@cindex{take-default-component}
@code{opal:Take-Default-Component} @emph{gadget} @emph{name} [@emph{destroy?}]@ref{method}

This function removes a local component named by @emph{name}, e.g. @code{:box},
and replaces it with an instance of the corresponding component in
@emph{gadget}'s prototype. The removed component is destroyed if and only if
the optional @emph{destroy} argument is not @code{nil}.

The placement of the new component is inherited as well as the component
itself. As with @code{add-component}, ``inherited position'' is not
well defined when the structure of @emph{gadget} does not match
the structure of its prototype. The algorithm for choosing the
position is as follows:
If the prototype component is the first one, then the instance
becomes the first component of @emph{gadget}. Otherwise, a locator (see
@code{add-component}) is found
in the prototype such that the locator is ``@code{:in-front}'' of the
prototype component. If this locator has an instance in @emph{gadget}, 
the instance is used as a locator in a
call to @code{add-component}, with the @emph{position} parameter being
@code{:in-front}. If the locator does not exist in @emph{gadget}, then the
@emph{position} used is @code{:front}, so at least any error should become
visibly apparent.

Changes are propagated to instances of @emph{gadget}.

@subsection Itemized Aggrelist Manipulation
@node Itemized Aggrelist Manipulation

@subsection Add-Item
@node Add-Item
@cindex{add-item}
@code{opal:Add-Item} @i{aggrelist} [@i{item}] [[@code{:where}] @emph{position} [@i{locator}] [@code{:key} @i{function-name}]] @ref{method}

If supplied, @emph{item} will be added to the @code{:items} slot of
@emph{aggrelist}, and a new instance of @code{:item-prototype-object} will
be added to the components of @emph{aggrelist}. The @code{add-item} method will
perform the necessary bookkeeping to maintain the appearance of the list.

It is an error (actually, a continuable break condition) to add an
item to an aggrelist whose @code{:items} slot is constant. To work around
this error, consult section @ref{constants-and-aggregadgets}.

The @emph{position}, @emph{locator} and @emph{function-name} arguments can be used to 
adjust the
placement of @emph{item} with respect to the rest of the items
of @emph{aggrelist}.

@emph{position} can be any of these five values:

@table @code

@code{:front} 
@code{:back} 
@code{:behind} 
@code{:in-front} 
@code{:at}
or any of the following aliases:

@code{:tail} 
@code{:head} 
@code{:before} 
@code{:after} 
@code{:at}
@end table
@emph{Note:} the graphically @emph{front} object is at the @emph{tail} of the
components list, etc.
If position is either @code{:before}/@code{:behind} or @code{:after}/@code{:in-front}
then the value of @emph{locator} should be an item already in the
@code{:items} slot of the aggrelist, in which case @emph{item} is placed
with respect to @emph{locator}.

For example, the following line will add a new item to the aggrelist
defined in section @ref{aggitem-expl-ref}:

@smallexample
(opal:add-item MY-AGG "really" :after "is")
@end smallexample

The string "really" will be added to @code{my-agg} with the resulting
aggrelist appearing as "This is really an example".

Furthermore, if the @code{:items} slot holds a nested list, @emph{:key
function-name} can be used to match @emph{locator} only with the result
of @emph{function-name} applied to each element of @code{:items}.
For example, if the @code{:items} slot of @code{an-aggrelist} is
@code{(("foo" 4) ("bar" 2) ("foo" 7))},
@smallexample
(add-item an-aggrelist '("foobar" 3) :after "foo" :key #'car)
@end smallexample
compare "foo" only to the @code{car}s of the list, and therefore will add
the new item as the second element of the list. The line
@smallexample
(add-item an-aggrelist '("barfoo" 5) :before 7 :key #'cadr)
@end smallexample
will add the new item just before the last one.

@emph{Note:} @code{add-item} will add the item at the most reasonable position
if the specified position does not exist. For example, if
@code{add-item} is asked to add a component after another 
one that does not exist, the new component will be added at the tail.

@subsection Remove-Item
@node Remove-Item
@cindex{remove-item}
@code{opal:Remove-Item} @i{aggrelist} [@i{item} [@code{:key} @i{function-name}]] @ref{Method}

The method @code{remove-item} removes @emph{item} from the @code{:items} list and
the @code{:components} list of @emph{aggrelist}.

It is an error (actually, a continuable break condition) to add an
item to an aggrelist whose @code{:items} slot is constant. To work around
this error, consult section @ref{constants-and-aggregadgets}.

If the @code{:items} slot holds a nested list, @emph{:key function-name}
can be used to specify to try to match @emph{item} only with the result
of @emph{function-name} applied to each element of @code{:items}.
For example, if the @code{:items} slot of @code{an-aggrelist} is
@code{(("foo" 4) ("bar" 2) ("foo" 7))},
@smallexample
(remove-item AN-AGGRELIST "foo" :key #'car)
@end smallexample
removes the first item, while
@smallexample
(remove-item AN-AGGRELIST '("foo" 7))
@end smallexample
removes the last one.

@subsection Remove-Nth-Item
@node Remove-Nth-Item
@cindex{remove-nth-item}

@code{opal:Remove-Nth-Item} @emph{aggrelist} @emph{n}@ref{method}

To remove an item by position rather than by content, use
@code{remove-nth-item}. The @emph{n}@+(th) item is removed from
the @code{:items} slot of @emph{aggrelist}, and the component corresponding
to that item will be removed during the next call to @code{opal:update}.

It is an error to add an
item to an aggrelist whose @code{:items} slot is constant. To work around
this error, consult section @ref{constants-and-aggregadgets}.


@subsection Change-Item
@node Change-Item
@cindex{change-item}

To change just one item in the @code{:items} list, call

@cindex{change-item}
@code{opal:Change-Item} @emph{aggrelist item n}@ref{method}

where @emph{aggrelist} is the aggrelist to be modified, @emph{item} is a
new value for the @code{:items} list, and @emph{n} is the index of the 
item to be changed (the index of the first item is zero).

This function is potentially more efficient than calling @code{add-item} and
@code{remove-item}, because it ensures that the component corresponding to the
changed item will be reused if possible, instead of destroying and reallocating
a new component.


@subsection Replace-Item-Prototype-Object
@node Replace-Item-Prototype-Object
@cindex{replace-item-prototype-object}

@code{opal:Replace-Item-Prototype-Object} @emph{aggrelist} @emph{item-proto}@ref{method}

This function is used to replace the @code{:item-prototype-object} slot of
an itemized aggrelist. Any aggrelists which inherit
the slot from this one will also be affected. The components of affected
aggrelists are replaced with instances of the new
@code{:item-prototype-object}.

For example, suppose an application uses a number of instances
of  radio buttons,
an aggrelist whose item prototype object
determines the appearance of a single button. By calling
@code{replace-item-prototype-object} on the radio buttons prototype,
all button throughout the application will change to reflect the
new style.

@subsection Ordinary Aggrelist Manipulation
@node Ordinary Aggrelist Manipulation
@anchor{aggrelist-manipulation-sec}

@subsection Add-Component
@node Add-Component
@cindex{add-component}

The @code{add-component}, defined in section @ref{add-component-sec} can also
be used to add components to an aggrelist. The system automatically adjusts
the appearance of the aggrelist to accommodate the changes in the list of
components.

In addition to adding @emph{graphical-object} to @emph{aggrelist},
@code{add-component} will add some slots to @emph{graphical-object}, or modify
existing slots. The slots created or modified by @code{add-component} are:

@vtable @code
@code{:left, :top} @ref{shortdash} Unless the @code{:direction} slot of
@emph{aggrelist} is @code{nil}, the system will set these slots with integers that
arrange @emph{graphical-object} neatly in the layout of the aggrelist components.

@code{:rank} @ref{shortdash} This slot is set with a number that indicates
the position of this component in the list (the head has rank 0). If this
component is not visible, then this value has no meaning.

@code{:prev} @ref{shortdash} This contains the previous component in the list,
regardless of what is visible.

@code{:next} @ref{shortdash} This contains the next component in the list,
regardless of what is visible.

@end vtable

@emph{Note:} @code{add-components} (plural) can be used to add several
components to an aggrelist.

An alternative implementation of figure @ref{parts-list-fig} is shown in
figure @ref{agglist-expl-ref}. In each component of the aggrelist, the
@code{:left} and @code{:top} slots have been left undefined. The aggrelist will
fill these slots with the appropriate values automatically.

@float Figure, fig:ex727
@smallexample
(create-instance 'MY-AGG opal:aggrelist (:top 10) (:left 10))
(create-instance 'MY-RECT opal:rectangle
   (:width 100) (:height 30))
(create-instance 'MY-OVAL opal:oval
   (:width 100) (:height 30))
(create-instance 'MY-ROUND opal:roundtangle
   (:width 100) (:height 30))
(add-components MY-AGG MY-RECT MY-OVAL MY-ROUND)
 
@end smallexample
@caption{Example of an aggrelist built using add-component.}
@anchor{agglist-expl-ref}
@end float


@subsection Remove-Component
@node Remove-Component

See section @ref{remove-component-sec} for a description of this method.

@cindex{null-object}
@b{Useful hint:} It is possible to make components of an aggrelist 
temporarily disappear by simply
setting their @code{:visible} slot to @code{nil} --- the list will adjust itself so
that there is no gap where the item once was. If a gap is desired, then an
@code{opal:null-object} may be inserted into the list --- this is an
@code{opal:view-object} that has its @code{:visible} slot set to T, but has no
draw method.


@subsection Remove-Nth-Component
@node Remove-Nth-Component
@cindex{remove-nth-component}

@sp 1
@code{opal:Remove-Nth-Component} @emph{aggrelist n}@ref{method}

The @emph{n}@+(th) component of @emph{aggrelist} is removed by
invoking @code{remove-local-component}. Instances of @emph{aggrelist}
are @emph{not} affected.


@subsection Local Modification
@node Local Modification
A number of functions exist to modify gadgets without changing their
instances. Their behavior is exactly like the corresponding
recursive version described earlier, except that changes are
not propagated to instances.

@cindex{add-local-component}
@code{opal:Add-Local-Component} @emph{gadget} @emph{element} [[@code{:where}] @emph{position} [@emph{locator}]]@ref{method}

@cindex{remove-local-component}
@code{opal:Remove-Local-Component} @emph{gadget element} [ @emph{destroy?} ]@value{Method}

@cindex{add-local-interactor}
@code{opal:Add-Local-Interactor} @emph{gadget} @emph{interactor}@ref{method}

@cindex{remove-local-interactor}
@code{opal:Remove-Local-Interactor} @emph{gadget} @emph{interactor} [@emph{destroy?}]@ref{method}

@cindex{add-local-item}
@code{opal:Add-Local-Item} @i{aggrelist} [@i{item}] [[@code{:where}] @emph{position} [@i{locator}] [@code{:key} @i{function-name}]] @ref{method}

@cindex{remove-local-item}
@code{opal:Remove-Local-Item} @i{aggrelist} [@i{item} [@code{:key} @i{function-name}]] @ref{Method}


@section Reading and Writing Aggregadgets and Aggrelists
@node Reading and Writing Aggregadgets and Aggrelists
@cindex{write-gadget}
@cindex{saving aggregadgets}
An aggregadget or aggrelist may be written to a file. This creates
a compilable lisp program that can be reloaded to recreate the object
that was saved. To save an aggregadget, use the @code{opal:write-gadget}
function:

@subsection Write-Gadget
@node Write-Gadget
@anchor{write-gadget-sec}

@sp 1
@cindex{write-gadget}
@code{opal:Write-Gadget} @emph{gadget} @emph{file-name} &optional @emph{initialize?}@ref{function}

where @emph{gadget} is a graphical object, an
aggregadget or an aggrelist (or a list of these), and @emph{file-name}
is the file name (a string) to be written, or @code{t} to write
to @code{*standard-output*}. If several calls are made to @code{write-gadget}
to output a sequence of
gadgets to the same stream, set the @emph{initialize?} flag
to @code{nil} after the first call. The default value of @emph{initialize?} is T.

If the gadget has any references to
gadgets that are not part of the standard set of Opal objects or
Interactors, then a warning is printed. @emph{Note:} @emph{gadget}
must not be a symbol or list of symbols:
@smallexample
(write-gadget (list BUTTON SLIDER) "misc.lisp")  @!@emph{; RIGHT!}
(write-gadget '(BUTTON SLIDER) "misc.lisp")@/@emph{; WRONG!}
@end smallexample

Slots that are ordinarily created automatically are not written
by @code{write-gadget}. For example, the @code{:is-a-inv} slot 
(maintained by KR) and the @code{:update-slots-values} slot (maintained
by Opal) are not written. The slots to ignore are found in the
@cindex{do-not-dump-slots}
@code{:do-not-dump-slots} slot, which is normally inherited. In some
cases, it may be desirable to suppress the output of certain slots,
e.g. bookkeeping information, and this can be done by setting
@code{:do-not-dump-slots} as follows:
@smallexample
(s-value @emph{my-proto}
         :do-not-dump-slots
         (append @emph{list-of-slots} (gv @emph{my-proto} :do-not-dump-slots)))
@end smallexample
Do not destructively modify @code{:do-not-dump-slots}!  Putting
the slot name @code{:do-not-dump-slots} on the list will prevent the
@code{:do-not-dump-slots} slot from being written. This is probably
not a good idea, since if the object is written and reloaded, the
local @code{:do-not-dump-slots} information will be lost.

@subsection Avoiding Deeply Nested Parts Slots
@node Avoiding Deeply Nested Parts Slots
One would expect an instance of a standard gadget (see the @emph{Garnet
Gadgets Reference chapter}) to have a very concise output representation;
however, once the instance is manipulated, various slots are set
by interactors. Often, these slots are deeply nested in the gadget
structure, and the output has correspondingly deeply nested @code{:parts}
slots. This is a consequence of the fact that Garnet maintains
little separation 
between the gadget definition and local state information. 

One solution is to carefully install slot names on the
@code{:do-not-dump-slots} slot to suppress the output of slots for
which the default inherited value is acceptable. Another, more
drastic, solution is to set the @cindex{do-not-dump-objects}
@code{:do-not-dump-objects} slot
in selected objects. This slot may have one of three values:
@itemize
NIL @ref{shortdash} The default; write out all slots and parts
that differ from the prototype.

@code{:me}
@cindex{me} @ref{shortdash} Assume that all components and 
interactors are inherited without modification, so there is
no need to write @code{:parts}, @code{:interactors}, or @code{:item-prototype}
slots at this level. Other slots, such as @code{:left} and @code{:top}
should be written.

@code{:children}
@cindex{children} 
@ref{shortdash} Write out @code{:parts}, @code{:interactors}
and @code{:item-prototype} slots, but do not allow further nesting. This
is equivalent to setting the @code{:do-not-dump-objects} slot of each
component, interactor, and the item-prototype to @code{:me}.
@end itemize

@subsection More Details
@node More Details
The @code{write-gadget}
function makes no attempt to write out objects that are needed
as prototypes or that are referenced by formulas.
It is the user's responsibility to make sure these objects are loaded
before loading a gadget; otherwise, an ``unbound symbol'' error is
likely to occur.
If the @emph{gadget} argument is a list, then each aggregadget or aggrelist
of the list is written in sequence to the file.

To load a gadget after it has been written, the standard lisp loader
(@code{load}) should be used.

When an aggregadget is written that uses a function to create parts
(see section @ref{run-time}), the created parts are written explicitly
and in full, as opposed to simply writing out the original @code{:parts}
slot. This guarantees that any modifications to the aggregadget after
it was created will be correctly written.

@cindex{verbose-write-gadget}
@cindex{*verbose-write-gadget*}
@code{opal:*verbose-write-gadget*}@ref{variable}

If @code{*verbose-write-gadget*} is non-NIL,
objects will be printed to @code{*error-output*}
as they are visited by @code{write-gadget}. Indentation indicates the
level of the object in the aggregate hierarchy. @emph{Note:} objects will
be printed even if, due to inheritance, nothing needs to be written.

@subsection Writing to Streams
@node Writing to Streams
The @code{write-gadget} function can be used as is for simple applications,
but it is sometimes desirable to write a header to a file and perhaps
embed code written by @code{write-gadget} into a function definition.
This is done by temporarily re-binding @code{*standard-output*} as in the
following example:
@smallexample
(with-open-file (*standard-output* "my-file.lisp"
		 :direction :output :if-exists :supersede)
    @emph{;; write header to standard output:}
    (format T "... file header info goes here ...")
    @emph{;; write a gadget:}
    (write-gadget my-gadget t)
    @emph{;; if there are more gadgets, call with initialize? set to NIL:}
    (write-gadget another-gadget T NIL))
@end smallexample

@subsection References to External Objects
@node References to External Objects
Gadgets may contain references to ``external objects'', that is,
objects that are not part of the gadget. 
When an external object is written,
A warning is ordinarily
printed  to notify the user that
the object must be present when the gadget code is loaded.

@cindex{standard-names}
@cindex{*standard-names*}
@code{opal:*standard-names*}@ref{variable}

Many objects, including standard Opal objects, standard Interactors, and 
objects in the Garnet Gadget library, are considered part of the Garnet
environment, so no warning is written for these references. The list
@code{*standard-names*} tells @code{write-gadget} what object symbols to assume
will be defined when the gadget is loaded. This list can be extended
with new new names before calling @code{write-gadget}.

@cindex{defined-names}
@cindex{*defined-names*}
@code{opal:*defined-names*}@ref{variable}

The global variable @code{*defined-names*} is initialized to 
@code{*standard-names*}
when you call @code{write-gadget}. As gadgets are written, their names are
pushed onto @code{*defined-names*}, so if a list of gadgets is written
and the second references the first, no warning will be printed.
@code{*defined-names*} (not @code{*standard-names*}) is what @code{write-gadgets}
actually searches to see if a name is defined. 

@cindex{required-names}
@cindex{*required-names*}
@code{opal:*required-names*}@ref{variable}

The variable @code{*required-names*} 
is initialized to @code{nil} when you call @code{write-gadget}.
Whenever a name is written that is not on @code{*defined-names*}, it
is pushed onto @code{*required-names*} and a warning is printed.
Inspecting the value of @code{*required-names*} after calling
@code{write-gadget} can give the caller information about what
additional gadgets should be saved.

The initialization of @code{*defined-names*} and @code{*required-names*}
is suppressed when the @emph{initialize?} argument to @code{write-gadget}
is set to @code{nil}.


@subsection References to Graphic Qualities
@node References to Graphic Qualities

A reference to an @code{opal:graphic-quality} object is handled as a 
special case. Graphic qualities include @code{opal:filling-style},
@code{opal:line-style}, @code{opal:color}, @code{opal:font}, and 
@code{opal:font-from-file}. Although these are objects, they are
treated more like record structures throughout the Garnet system.
For example, changing a slot in a graphic quality will not
automatically cause an update; only replacing a graphic quality
with a new one (or faking it with a call to @code{kr:mark-as-changed})
will cause the update.

Because of the way graphic qualities are used, it is best to
think of graphic qualities as values rather than shared objects.
Consequently, @code{write-gadget} writes out graphic qualities
by calling @code{create-instance} to construct an equivalent object
rather than by writing an external reference that is likely to be
undefined when the file is loaded. 

For example, here is a rectangle with a special color, and the output
generated by @code{write-gadget}:
@smallexample
(create-instance 'MY-RED RED
   (:red 0.5))

(create-instance 'MY-RECT RECTANGLE
   (:color my-red))

* (write-gadget MY-RECT T)
(create-instance 'MY-RECT RECTANGLE
   (:COLOR (create-instance NIL COLOR
              (:BLUE 0.0)
	      (:GREEN 0.0)
	      (:RED 0.5))))
@end smallexample


@subsection Saving References From Within Formulas
@node Saving References From Within Formulas
Writing direct references from within @code{o-formula}'s 
to other objects is not possible (in a lisp implementation-independent
way) because @code{o-formula} builds a closure, and bindings within the
closure are not externally visible. For example, in
@smallexample
(let ((thermometer THERMOMETER-1))
  (o-formula (gv thermometer :temperature)))
@end smallexample
the variable @emph{thermometer} is bound inside the @code{let} and is not
accessible to any routine that would write the formula. Even though
the expression @code{(gv thermometer :temperature)} is saved
in the formula in the current KR implementation, this does not
reveal the binding needed to reconstruct the formula.

Fortunately, 
aggregadgets and aggrelists rarely make direct references to objects.
Typically, references to objects take the form of paths in formulas,
for example, @code{(gvl :parent :box :left)}. However, there may be
occasions when a direct reference is required, for example, when an
aggregadget depends upon the value of some separate application object.

There are several ways to avoid problems associated with direct references
from formulas:
@itemize
Use @code{formula} instead of @code{o-formula}. The @code{formula} function
interprets its expression, so expressions with embedded references
can be constructed at run-time. For example, the thermometer example
could be written as:
@smallexample
(formula `(gv ',thermometer :temperature))
@end smallexample
embedding the actual reference directly into the expression. This
expression can be written and read back in without problems.
However, since formula expressions are interpreted, re-evaluation of the 
formula will be much slower than the corresponding o-formula.

Put the object reference into a slot, avoiding direct references altogether.
For example, to create a dependency on the @code{:temperature} slot of object 
THERMOMETER-1, set the @code{:thermometer} slot of the gadget to
THERMOMETER-1, and reference the slot from the formula:
@smallexample
(o-formula (gvl :thermometer :temperature))
@end smallexample
Since the reference to THERMOMETER-1 is now a slot value rather
than a hidden binding in a closure, it can be written and read back in
without problems. The only performance penalty of this approach
will be the extra slot access, which should not add much overhead.
There is, however, the added problem of choosing slot names so as not
to interfere with other formulas.
@end itemize



@verbatim
Use an @code{e-formula}, described below. This provides the functionality
and speed of @code{o-formula} as well as the ability to save to files
at the expense of a little more work for the programmer and some 
extra function definitions.

@subsection The e-formula function
@node The e-formula function
@cindex{e-formula}
@code{e-formula} @emph{expression}@ref{function}

The argument to @code{e-formula} is an expression that, when evaluated,
will return a formula. The expression is retained so that the 
original @code{e-formula} expression can be reconstructed when the
formula is written to a file. Returning once again to the thermometer
example, here is how the problem would be solved using @code{e-formula}:
@smallexample
(defun temperature-formula (thermometer)
   (o-formula (gv thermometer :temperature)))

(create-instance 'DISPLAY-1 DISPLAY
   (:value (e-formula `(temperature-formula ',THERMOMETER-1)))
@end smallexample
The first expression defines
an auxiliary (compiled) function @code{temperature-formula}.
The second expression creates an instance of the prototype
@code{display} (not implemented here) whose @code{:value} slot holds
the desired formula.

When the @code{e-formula} expression is evaluated, the argument,
@smallexample
(temperature-formula '#k<THERMOMETER-1>)
@end smallexample
is evaluated. The @code{temperature-formula} function in turn produces
an @code{o-formula} in which the reference to @code{#k<thermometer-1>} is
captured by a compiled closure. Because the @code{o-formula} is based
on a compiled closure, it will evaluate quickly. Note that the
Lisp interpreter is invoked only to @emph{create} the formula, not to evaluate
it.

When @code{display-1} is written to a file, @code{write-gadget} will
write
@smallexample
(e-formula `(temperature-formula ',THERMOMETER-1))
@end smallexample
which is the same expression used to create the original formula.
A warning will be issued when the THERMOMETER-1 is written:
@smallexample
Warning: non-standard schema written as THERMOMETER-1
@end smallexample
to warn that a direct reference to THERMOMETER-1 was written
and must be defined when the schema is reloaded.
In order to reload this formula, the function @code{temperature-formula}
must be also be defined.
@end verbatim



@section More Examples
@node More Examples

@subsection A Customizable Check-Box
@node A Customizable Check-Box
@anchor{Custom-check-box1}

Figure @ref{example-1} shows the definition of a 
check-box whose position and size can be determined by the
programmer when it is used as a prototype object.

The @code{:parts} slot
defines the @code{:box} object as an instance of @code{opal:rectangle} with
coordinates dependent on the parent aggregadget. Similarly, the @code{:mark}
object is an @code{opal:aggregadget} itself, and its components are dependent
on slots in the top-level aggregadget.

Two instances of CHECK-BOX are created --- the first one using the
default values for the coordinates and the second one using both default
and custom coordinates. Both are pictured in figure
@ref{example-1-pic}.

@float Figure, fig:ex728
@smallexample
(create-instance 'CHECK-BOX opal:aggregadget
   (:left 20)
   (:top 20)
   (:width 50)
   (:height 50)
   (:parts
    `((:box ,opal:rectangle
         (:left ,(o-formula (gvl :parent :left)))
         (:top ,(o-formula (gvl :parent :top)))
         (:width ,(o-formula (gvl :parent :width)))
         (:height ,(o-formula (gvl :parent :height))))
      (:mark ,opal:aggregadget
         (:parts
          ((:left-line ,opal:line
              (:x1 ,(o-formula (+ (gvl :parent :parent :left)
                     (floor (gvl :parent :parent :width) 10))))
              (:y1 ,(o-formula (+ (gvl :parent :parent :top)
                     (floor (gvl :parent :parent :height) 2))))
              (:x2 ,(o-formula (+ (gvl :parent :parent :left)
                     (floor (gvl :parent :parent :width) 2))))
              (:y2 ,(o-formula (+ (gvl :parent :parent :top)
                     (floor (* (gvl :parent :parent :height) 9)
			    10))))
              (:line-style ,opal:line-2))
          (:right-line ,opal:line
              (:x1 ,(o-formula 
		     (opal:gvl-sibling :left-line :x2)))
              (:y1 ,(o-formula
		     (opal:gvl-sibling :left-line :y2)))
              (:x2 ,(o-formula (+ (gvl :parent :parent :left)
                     (floor (* (gvl :parent :parent :width) 9)
			    10))))
              (:y2 ,(o-formula (+ (gvl :parent :parent :top)
                     (floor (gvl :parent :parent :height) 10))))
              (:line-style ,opal:line-2))))))))

(create-instance 'CB1 CHECK-BOX)

(create-instance 'CB2 CHECK-BOX (:left 90) (:width 100) (:height 60))
@end smallexample
@caption{The definition of a customizable check-box.}
@anchor{example-1}
@end float

@float Figure, fig:ex729
@center @image{agg-custom-cb, 5.5in}
@caption{Instances of the customizable check-box.}
@anchor{example-1-pic}
@end float


@subsection Hierarchical Implementation of a Customizable Check-Box
@node Hierarchical Implementation of a Customizable Check-Box
@anchor{custom-check-box2}

Figure @ref{example-2} shows the definition of a customizable
check-box as in figure @ref{example-1}. However, this second CHECK-BOX
definition exploits the hierarchical structure of the check box to
modularize the definition of the schema. The modular style allows for
the reuse of previously defined code --- the @code{check-mark} schema
may now be used for other applications as well.

@float Figure, fig:ex730
@smallexample
(create-instance 'CHECK-MARK opal:aggregadget
  (:parts
   `((:left-line ,opal:line
      (:x1 ,(o-formula (+ (gvl :parent :parent :left)
			  (floor (gvl :parent :parent :width) 10))))
      (:y1 ,(o-formula (+ (gvl :parent :parent :top)
			  (floor (gvl :parent :parent :height) 2))))
      (:x2 ,(o-formula (+ (gvl :parent :parent :left)
			  (floor (gvl :parent :parent :width) 2))))
      (:y2 ,(o-formula (+ (gvl :parent :parent :top)
			  (floor (* (gvl :parent :parent :height) 9) 10))))
      (:line-style ,opal:line-2))
     (:right-line ,opal:line
      (:x1 ,(o-formula (opal:gvl-sibling :left-line :x2)))
      (:y1 ,(o-formula (opal:gvl-sibling :left-line :y2)))
      (:x2 ,(o-formula (+ (gvl :parent :parent :left)
			  (floor (* (gvl :parent :parent :width) 9) 10))))
      (:y2 ,(o-formula (+ (gvl :parent :parent :top)
			  (floor (gvl :parent :parent :height) 10))))
      (:line-style ,opal:line-2)))))

(create-instance 'CHECK-BOX opal:aggregadget
  (:left 20)
  (:top 20)
  (:width 50)
  (:height 50)
  (:parts
   `((:box ,opal:rectangle
      (:left ,(o-formula (gvl :parent :left)))
      (:top ,(o-formula (gvl :parent :top)))
      (:width ,(o-formula (gvl :parent :width)))
      (:height ,(o-formula (gvl :parent :height))))
     (:mark ,check-mark))))
@end smallexample
@caption{A hierarchical implementation of a customizable check-box.}
@anchor{example-2}
@end float


@subsection Menu Aggregadget with built-in interactor, using Aggrelists
@node Menu Aggregadget with built-in interactor, using Aggrelists
@anchor{Menu-Aggrelist-Example}

The figure @ref{menu-aggrelist-ref} shows how to create a menu aggregadget,
by using itemized aggrelist to create the items of the menu.
This example also shows how to attach an interactor to such an object.
The menu is made of four parts: a frame, a shadow, a feedback
and an items-agg, which is an aggrelist containing the items
of the menu. Each item is an instance of the prototype @code{menu-item}.
The items are created according to the labels and notify-functions given in
the @code{:items} slot of the menu. The menu also contains a built-in interactor which, when
activated, will call the functions associated to the selected item.

The figure @ref{menu-aggrelist2-ref} shows how to create an instance
of the menu. A picture of these menus (the prototype and its instance)
is shown in figure @ref{menu-aggitem-pict}.

@float Figure, fig:ex731
@center @image{agg-list-item-menu, 5.5in}
@caption{The two menus (prototype and instance) made with itemized aggrelist.}
@anchor{menu-aggitem-pict}
@end float

@float Figure, fig:ex732
@smallexample
(defun my-cut () (format T "~%Function CUT called~%"))
(defun my-copy () (format T "~%Function COPY called~%"))
(defun my-paste () (format T "~%Function PASTE called~%"))
(defun my-undo () (format T "~%Function UNDO called~%"))

(create-instance 'MENU-ITEM opal:text
   (:string (o-formula (car (nth (gvl :rank) (gvl :parent :items)))))
   (:action (o-formula (cadr (nth (gvl :rank)
				  (gvl :parent :items))))))

(create-instance 'MENU opal:aggregadget
   (:left 20) (:top 20) 
   (:items '(("Cut" (my-cut)) ("Copy" (my-copy))
             ("Paste" (my-paste)) ("Undo" (my-undo))))
   (:parts 
    `((:shadow ,opal:rectangle
	(:filling-style ,opal:gray-fill)
	(:left ,(o-formula (+ (gvl :parent :frame :left) 8)))
	(:top ,(o-formula (+ (gvl :parent :frame :top) 8)))
	(:width ,(o-formula (gvl :parent :frame :width)))
	(:height ,(o-formula (gvl :parent :frame :height))))
      (:frame ,opal:rectangle
	(:filling-style ,opal:white-fill)
	(:left ,(o-formula (gvl :parent :left)))
	(:top ,(o-formula (gvl :parent :top)))
	(:width ,(o-formula (+ (gvl :parent :items-agg :width) 8)))
	(:height ,(o-formula (+ (gvl :parent :items-agg :height) 8))))
      (:feedback ,opal:rectangle
	(:left ,(o-formula (- (gvl :obj-over :left) 2)))
	(:top ,(o-formula (- (gvl :obj-over :top) 2)))
	(:width ,(o-formula (+ (gvl :obj-over :width) 4)))
	(:height ,(o-formula (+ (gvl :obj-over :height) 4)))
	(:visible ,(o-formula (gvl :obj-over)))
	(:draw-function :xor))
      (:items-agg ,opal:aggrelist
	(:fixed-width-p T)
	(:h-align :center)
	(:left ,(o-formula (+ (gvl :parent :left) 4)))
	(:top ,(o-formula (+ (gvl :parent :top) 4)))
	(:items ,(o-formula (gvl :parent :items)))
	(:item-prototype ,menu-item))))
   (:interactors
    `((:press ,inter:menu-interactor
	(:window ,(o-formula (gv-local :self :operates-on :window)))
	(:start-where ,(o-formula (list :element-of
			(gvl :operates-on :items-agg))))
	(:feedback-obj ,(o-formula (gvl :operates-on :feedback)))
	(:final-function 
	  ,#'(lambda (interactor final-obj-over)
		(eval (gv final-obj-over :action))))))))
@end smallexample
@caption{Definition of a menu with built-in interactor and itemized aggrelist.}
@anchor{menu-aggrelist-ref}
@end float

@float Figure, fig:ex733
@smallexample
(defun my-read () (format T "~%Function READ called~%"))
(defun my-save () (format T "~%Function SAVE called~%"))
(defun my-cancel () (format T "~%Function CANCEL called~%"))

(create-instance 'MY-MENU MENU
   (:left 100) (:top 20) 
   (:items '(("Read" (my-read)) ("Save" (my-save))
             ("Cancel" (my-cancel)))))
@end smallexample
@caption{Creation of an instance of MENU.}
@anchor{menu-aggrelist2-ref}
@end float


@section Aggregraphs
@node Aggregraphs

@anchor{aggregraphs}
@cindex{aggregraphs}

The purpose of Aggregraphs is to allow the easy
creation and manipulation of graph objects, analogous to the
creation and manipulation of lists by Aggrelists. In addition to the standard
@code{aggregraph}, Opal provides the @code{scalable-aggregraph} which will fit
inside dimensions supplied by the programmer, and the
@code{scalable-aggregraph-image} which changes appearance in response to
changes in the original graph.


@section Using Aggregraphs
@node Using Aggregraphs
@cindex{graph-node}
@cindex{source-node}

In order to generate an aggregraph from a source graph, the source graph must
be described by defining its roots (a graph may have more than one root) and
a function to generate children from parent nodes. When the
aggregraph is initialized, the generating function is first called on the
root(s), then on the children of the roots, and so on. For each
@emph{source-node} in the original graph, a new @emph{graph-node} is created and
added to the aggregraph. Graphical links are also created which connect the
graph-nodes appropriately. The layout function (which can be specified by the
user) is then called to layout the graph in a pleasing manner.
The resulting aggregraph instance can then be displayed and manipulated
like any other Garnet object.

Although most
programmers will be satisfied with the graphs generated by the default layout
function, section @ref{layout-graph} contains a discussion of how to
customize the function used to compute the locations for the nodes in the
graph.

See the file @code{demo-graph.lisp} for a complete interface that uses many
features of aggregraphs.

@subsection Accessing Aggregraphs
@node Accessing Aggregraphs
@cindex{garnet-aggregraphs-loader}

The aggregraph files are @b{not} automatically loaded when the file
@code{garnet-loader.lisp} is used to load Garnet. There is a separate file
called @code{aggregraphs-loader.lisp} that is used to load all the aggregraphs
files. This file is loaded when the line
@code{(load Garnet-Aggregraphs-Loader)}
is executed after Garnet has been loaded with @code{garnet-loader.lisp}.

Aggregraphs reside in the @code{Opal} package. We recommend that programmers
explicitly reference the @code{Opal} package when creating instances of
aggregraphs, as in @code{opal:aggregraph}. However, the package name may be
dropped if the line
@code{(use-package 'opal)}
is executed before referring to any object in that package.


@subsection Overview
@node Overview
@cindex{children-function}
@cindex{info-function}
@cindex{source-roots}

In general, programmers will be able to ignore most of the aggregraph slots
described in the following sections, since they are used to customize the
layout function of the aggregraph. However, three slots must be set before
before any aggregraph can be initialized:

@itemize
@code{:children-function} -- This slot should contain a function that generates
a list of child nodes from a parent node. The function takes the parameters
@code{(lambda (source-node depth))}
where @emph{depth} is a number maintained internally by aggregraphs that
corresponds to the distance of the current node from the root,
and @emph{source-node} is an
object in the source graph to be expanded. The function should return a list
of the children of @emph{source-node} in the source graph, or @code{nil} to indicate the
node either has no children or should not be expanded (when depth > 1, for
example).

@code{:info-function} -- The function in this slot should take the parameter
@code{(lambda (source-node))}
where @emph{source-node} is an object in the source graph. It should return a
string associated with the @emph{source-node} so that a label can be placed on
its corresponding graph node in the aggregraph. (If the node-prototype is
customized by the programmer, then this function might return some other
identifying object instead of a string.)  The value returned by the function
is stored in the @code{:info} slot of the graph node.

@code{:source-roots} -- A list of roots in the source graph.
@end itemize

@b{Caveats:}

The source nodes must be distinguishable by one of the tests
@code{#'eq}, @code{#'eql}, or @code{#'equal}. The default is @code{#'eql}.
(Refer to the @code{:test-to-distinguish-source-nodes} slot in section
@ref{aggregraph-slots}.)

Instances of aggregraphs can be used as prototypes for other aggregraphs
without providing values for all the required slots in the prototype.


@subsection Aggregraph Nodes
@node Aggregraph Nodes
@anchor{node-slots}
@cindex{node}
@cindex{graph-node}
@cindex{node-prototype}
@cindex{link-prototype}

Each type of aggregraph has its own type of node and link prototypes. For the
@code{aggregraph}, the prototypes are @code{aggregraph-node-prototype} and
@code{aggregraph-link-prototype}, which are defined in the slots
@code{:node-prototype} and @code{:link-prototype}. To change the look of the nodes
or the links in an aggregraph, the programmer will need to define new
prototype objects in these slots. Section @ref{aggregraph-with-interactor}
contains an example aggregraph schema that modifies the node prototype.

The node and link prototypes for @code{scalable-aggregraph} are
@code{scalable-aggregraph-node-prototype} and
@code{scalable-aggregraph-link-prototype}. The prototypes for
@code{scalable-aggregraph-image} are
@code{scalable-aggregraph-image-node-prototype} and
@code{scalable-aggregraph-image-link-prototype}.

The actual nodes and links of the aggregraph are kept in "sub-aggregates" of
the aggregraph. The aggregates in the @code{:nodes} and @code{:links} slots of
the top-level aggregraph have the nodes and links as their components. To
access the individual links and nodes, look at the
@code{:components} slot of these aggregates. For example, the instruction
@smallexample
(opal:do-components (gv graph :nodes)
                    #'(lambda (node)
                        (format T "~A~%" (gv node :info))))
@end smallexample
will print out the names of all the nodes in the graph.

@cindex{back-pointer}
As each graph-node is created, a pointer to the corresponding
source-node is put in the slot @code{:source-node} of the graph-node.
This allows access to the source node from the graph-node. If
desired, a user can supply a function in the slot
@code{:add-back-pointer-to-nodes-function}. This function will be called on each
source-node/graph-node pair, and should put a pointer to the
graph-node in the source-node data structure. This can be used to
establish back pointers in the programmer's data structure.

The function in the slot @code{:source-to-graph-node} can be useful in finding
a particular node in the graph. When this method is given a source-node, it
will return the corresponding graph-node if one already exists in the graph.


Useful slots in the node objects include:

@vtable @code

@code{:left} and @code{:top} -- These slots must be set either directly by the
layout function or indirectly through formulas (probably dependent on other
slots in the node that are set by the layout function).

@code{:width} and @code{:height} -- Dimensions of the node.

@code{:links-to-me} and @code{:links-from-me} -- Each slot contains a list of
links that point to or from the given node. To get the nodes on the other side
of the links, reference the @code{:from} and @code{:to} slots of the links,
respectively.

@code{:source-node} -- A pointer to the corresponding node in the source graph
(i.e., the source-node of this graph-node). See
@code{:add-back-pointer-to-nodes-function} for back-pointers from the
source-node to the graph-node.

@code{:layout-info-...} -- Several slots that begin with "@code{:layout-info-}"
are reserved for bookkeeping by the layout function. Do not set these slots
except as part of a customized layout function.

@end vtable



@subsection A Simple Example
@node A Simple Example
@sp 1

@smallexample
(create-instance 'SCHEMA-GRAPH opal:aggregraph
   (:children-function #'(lambda (source-node depth)
			   (if (> depth 1)
			       NIL
			       (gv source-node :is-a-inv))))
   (:info-function #'(lambda (source-node)
		       (string-capitalize
			(kr:name-for-schema source-node))))
   (:source-roots (list opal:view-object)))
@end smallexample

@float Figure, fig:ex734
@center @image{schema-graph, 5.5in}
@caption{Graph generated by SCHEMA-GRAPH}
@anchor{schema-graph-pix}
@end float

The graph pictured in figure @ref{schema-graph-pix} is a result of the
definition of the SCHEMA-GRAPH object above. The aggregraph was given
a description of the Garnet inheritance hierarchy just by defining the root
of the graph and a child-generating function.

The generating function in the @code{:children-function} slot is defined to
return the instances of a given schema until the aggregraph reaches a certain
depth in the graph. In this case, if the function is given a node that is
more than one link away from the root, then the function will return @code{nil}.

The function in the @code{:info-function} slot returns the string name of
a Garnet schema.


@subsection An Example With an Interactor
@node An Example With an Interactor

@anchor{aggregraph-with-interactor}


@smallexample
(create-instance 'schema-graph-2 opal:aggregraph
   (:children-function #'(lambda (source-node depth)
			   (when (< depth 1)
			     (gv source-node :is-a-inv))))
   (:info-function #'(lambda (source-node)
		       (string-capitalize
			(kr:name-for-schema source))))
   (:source-roots (list opal:view-object))
   @emph{;; Change the node prototype so that it will go black}
   @emph{;; when the interactor sets} :interim-selected @emph{to t}
   (:node-prototype
    (create-instance NIL opal:aggregraph-node-prototype
       (:interim-selected NIL)  @emph{; Set by interactor}
       (:parts
	`((:box :modify
	   (:filling-style ,(o-formula (if (gvl :parent :interim-selected)
					   opal:black-fill
					   opal:white-fill)))
	   (:draw-function :xor) (:fast-redraw-p T))
	  :text-al))))
   @emph{;; Now define an interactor to work on all nodes of the graph}
   (:interactors
    `((:press ,inter:menu-interactor
       (:window ,(o-formula (gv-local :self :operates-on :window)))
       (:start-where ,(o-formula (list :element-of
                                       (gvl :operates-on :nodes))))
       (:final-function
	,#'(lambda (inter node)
	     (let* ((graph (gv node :parent :parent))
		    (source-node (gv node :source-node)))
	       (format T "~%~% ***** Clicked on ~S *****~%" source-node)
	       (kr:ps source-node))))))))
@end smallexample

@float Figure, fig:ex735
@center @image{schema-graph-2, 3in}
@caption{Graph generated by SCHEMA-GRAPH-2}
@anchor{schema-graph-2-pix}
@end float

The graph of figure @ref{schema-graph-2-pix} comes from the definition
of @code{schema-graph-2}. This aggregraph models the same Garnet
hierarchy as in the previous example, but it also modifies the
node-prototype for the aggregraph and adds an interactor to operate on
the graph.

The @code{:node-prototype} slot must contain a Garnet object that can be used
to display the nodes of the graph. In this case, the customized
node-prototype is an instance of the default node-prototype (which is an
aggregadget) with some changes in the roundtangle part.
The formula for the @code{:filling-style} will make the node black
when the user presses on it with the mouse.

The interactor is defined as in aggregadgets and aggrelists.
Note that the @code{:start-where} slot looks at the
components of the @code{:nodes} aggregate in the top-level aggregraph.

Aggregadget nodes can be moved easily with an @code{inter:move-grow-interactor}.
By setting the @code{:slots-to-set} slot of the interactor to
@code{(list T T nil nil)}, you can change the @code{:left} and @code{:top} of the
aggregraph nodes as you click and drag on them.


@section Aggregraph
@node Aggregraph
@anchor{aggregraph-slots}
@cindex{aggregraph slots}

Features and operation of an Aggregraph
        @itemize
                Creates a graph in which each node determines its own
                size based on information to be displayed in it.
                (The information is determined by the function
                @code{:info-function}.)

                The user must supply a list of source-nodes to be the
                root of the graph, a children-function which can
                be used to walk the user's graph, and an info-function to
                determine what will be displayed in each graph node.

                It is an instance of aggregadget, and interactors can be
                defined as in aggregadgets.
        @end itemize

@b{Customizable slots}
        @vtable @code
                @code{:left}, @code{:top} -- The position of the aggregraph.
                Default is 0,0.

                @code{:source-roots} -- List of source nodes to be used as the
                roots of the graph. 

                @code{:children-function} -- A function which takes a source
                node and the depth from the root and
                returns a list of children. The children are treated
                as unordered by the default layout-function.

                @code{:info-function} -- A function which takes a source node and
                returns information to be used in the display of the
                node prototype. The result is put in the @code{:info} slot
                of the corresponding graph-node. The default node-prototype
                expects a string to be returned.

                @code{:add-back-pointer-to-nodes-function} -- A function or @code{nil}.
                The function, if present, will be called on every
                source-node graph-node pair. The result of the
                function is ignored. This allows pointers to be
                put in the source-nodes for corresponding graph-nodes.

                @code{:node-prototype} -- A Garnet object for node prototype, or
                list of prototypes (in which case a
                @code{:node-prototype-selector-function} must be
                provided--see below). In the
                instances, the @code{:info} slot is set with the result of the
                info-function called on the corresponding source-node. The
		@code{:source-node} slot is set to the corresponding source node.
                And, the @code{:links-to-me} and @code{:links-from-me} slots are
                set to
                lists of graph links pointing to the node and from the node
                respectively. The slots whose names begin with
"@code{:layout-info}" are reserved for use by the layout functions for internal
bookkeeping and so should not be set by the user (unless writing a new
layout or associated methods). If any @code{scalable-aggregraph-image} graphs are
made of this graph, the @code{:image-nodes} slot is set to a list containing the
nodes that correspond to this node. The default prototype expects a string in
the @code{:info} slot, and displays the string with a white-filled
roundtangle surrounding it. 

                @code{:link-prototype} -- Garnet object for link prototype, or
list of prototypes (in which case a @code{:link-prototype-selector-function}
must be provided--see below).
                The @code{:from} and @code{:to} slots are set to the graph-nodes
                that this link connects. The @code{:image-links} slot is set to
a list of corresponding links to this one in associated
@code{scalable-aggregraph-image} graphs. The default prototype is a 
                line between these two graph nodes. (It is connected
                to the center of the right side of the @code{:from} node and
                to the center of the left side of the @code{:to} node. This
                assumes a left to right layout of the graph for
                pleasing display. For other layout strategies, a
                different prototype may be desired.)  For directed
                graphs, a link prototype with an arrowhead may be desired.

@code{:node-prototype-selector-function} -- A function which takes a source node and the list
of prototypes provided in the @code{:node-prototype} slot and returns one of the
prototypes. Will only be used if the value in the @code{:node-prototype} slot is a
list. 

@code{:link-prototype-selector-function} -- A function which takes a "from" graph-node, a "to"
graph-node and the list of prototypes provided in the @code{:link-prototype} slot and
returns one of the prototypes. Will only be used if the value in the
@code{:link-prototype} slot is a list.

                @code{:h-spacing} -- The minimum distance in pixels
                between nodes horizontally if using default layout-function.
                The default value is 20.

                @code{:v-spacing} -- The minimum distance in pixels
                between nodes vertically if using default layout-function. The
                default value is 5.

@code{:test-to-distinguish-source-nodes} -- Must be one of @code{#'eq}, @code{#'eql},
or @code{#'equal}. The default is @code{#'eql}.

                @code{:interactors} -- Specified in the same format as
		aggregadgets.

@code{:layout-info-...} -- Several slots that begin with "@code{:layout-info-}"
are reserved for bookkeeping by the layout function. Do not set these slots
except as part of a customized layout function.

@end vtable


   
@b{Read-only slots}

@vtable @code

@code{:nodes} -- The aggregate which contains all of the graph-node objects.

@code{:links} -- The aggregate which contains all of the graph link objects.

@code{:graph-roots} -- The list of graph nodes corresponding to the
@code{:source-roots}.

@code{:image-graphs} -- The list of @code{scalable-aggregraph-image} graphs that
                      are images of this graph.
@end vtable


@b[Methods] (can be overridden)

        @vtable @code
                @code{:layout-graph} -- a function which is called to determine
                the locations for all of the nodes in the graph. Takes
                the graph object as input and sets appropriate slots in
each node to position the node (usually @code{:left} and @code{:top} slots.)
Automatically called when graph is initially created.


                @code{:delete-node} -- Takes the graph object and a graph node
and deletes it and all links attached to it. If a node is deleted that
is a root of the graph, then it is removed from @code{:graph-roots} and the
corresponding source-node is removed from @code{:source-roots}.

                @code{:add-node} -- The arguments are the graph object, a
                source-node, a list of
                parent graph-nodes, and a list of children
                graph-nodes. It creates a new graph node and places
                it in the graph positioning it appropriately. Returns @code{nil}.

                @code{:delete-link} -- Takes the graph object and a graph link
and removes the link from the graph.

                @code{:add-link} -- Takes the graph object and two graph nodes
and creates a link from the first node to the second.

                @code{:source-to-graph-node} -- Takes the graph object and a
source node and returns the corresponding graph-node.

                @code{:find-link} -- Takes the graph object and two graph-nodes
and returns the list of 
                graph link-objects from the first to the second.

@code{:make-root} -- Takes the graph object and a graph node of the graph and
adds the graph node to the root lists of the graph.

@code{:remove-root} -- Takes the graph object and a graph node and removes the
node from the root lists of the graph.

      @end vtable

Note that these eight methods depend on each other for
intelligent layout. If one is changed it will either
have to keep certain bookkeeping information, or other
functions will have to be changed as well.

The functions which add and delete nodes and links all
attempt to minimally change the graph. The relayout
function may dramatically change it.


@section Scalable Aggregraph
@node Scalable Aggregraph
@cindex{scalable aggregraph}

Features and operation of a Scalable Aggregraph
        @itemize
                This object is similar to the normal aggregraph
                except that it can be scaled by the user.
                Text will be displayed only if it will fit within the
                scaled size of the graph nodes with the default prototypes.
		The scale factor is set by the @code{:scale-factor} slot.

                The scalable aggregraph will automatically resize if the
                @code{:scale-factor} slot is changed.

                It is an instance of aggregadget, and interactors can be
                defined as in aggregadgets.
        @end itemize

@b[Customizable slots] (same as for @code{aggregraphs} except for the following):

        @vtable @code
                @code{:scale-factor} -- A multiplier of full size which determines
                the final size of the graph (e.g. 1 causes the graph to be
                full size, 0.5 causes the graph to be half of full size, etc.)
The full size of the graph is determined by the size of the node prototypes and
layout of the nodes.

                @code{:node-prototype} -- Must be able to set the @code{:width} and
                @code{:height}, otherwise the same as in aggregraph. These slots must
have initial values which will be used as their default value (i.e. the width
and height of the nodes is @code{:scale-factor} * the values in @code{:height} and @code{:width}
slots respectively.

                @code{:link-prototype} -- Position and size must depend on the nodes
it is attached to (by the @code{:from} and @code{:to} slots) with formulas.

@code{:h-spacing} and @code{:v-spacing} are the default
values. The actual values are @code{:scale-factor} * these values.
        @end vtable


@b{Read-only slots}

The same read-only slots are available as with @code{aggregraph}
(see section @ref{aggregraph-slots}).


@b{Methods} (can be overridden)

The same methods are available as with @code{aggregraph} (see section
@ref{aggregraph-slots}).



@section Scalable Aggregraph Image
@node Scalable Aggregraph Image
@cindex{scalable aggregraph image}

Features and operation of Scalable Aggregraph Image
        @itemize
                This is designed to show another view of an
                existing aggregraph. This image is created with the
                same shape as the original, i.e. the size of nodes and
                relative positions are in proportion to the original.
                The proportion is determined by the @code{:scale-factor} or
                @code{:desired-height} and @code{:desired-width} slots. 

                The size and shape are determined by Garnet formulas.
                This has the effect of maintaining the likeness to the
                original even as the original is manipulated and
                changed.

                The default prototypes (in particular the node
                prototype), are designed for the image to be used as
                an overview of a graph which perhaps doesn't fit on
                the screen. This is why no text is displayed in
                nodes, for example. This is not the only use of the
                gadget, especially if the prototypes are changed.
        @end itemize

@b{Customizable slots}

        @vtable @code
                @code{:left}, @code{:top} -- The position of the aggregraph.
                Default is 0,0.

                @code{:desired-width} and @code{:desired-height} -- Desired width
                and height of the entire graph. The graph will be
                scaled to fit inside these maximums.

                @code{:source-aggregraph} -- The aggregraph to make an image of.

                @code{:scale-factor} -- A multiplier of full size which
		determines
                the final size of the graph (e.g. 1 causes the graph to be
                the same size as the source aggregraph, 0.5 causes the graph to
		be half the size, etc.) 
                Scale-factor overrides the @code{:desired-width} and
                @code{:desired-height} slots if all are specified.
                The default value is 1.

                @code{:node-prototype} -- Garnet object for node prototype, or a list
of prototypes (in which case a @code{:node-prototype-selector-function} must be
provided--see below). The @code{:width}, @code{:height}, @code{:left} and @code{:top}
slots must all be
settable, and the node size and position must depend on these slots. They will
all be overridden with formulas in the created instances.
                The @code{:corresponding-node} slot is set to the corresponding node
                in the source aggregraph. The default
                node-prototype is a roundtangle proportional to the bounding
                box of the corresponding node in the source aggregraph
(because of the formulas).

                @code{:link-prototype} -- Same as in aggregraph, except the
                @code{:corresponding-link} slot is set to the corresponding link in
                the source aggregraph and there is no @code{:from} or @code{:to} slot. The
@code{:x1}, @code{:y1}, @code{:x2} and @code{:y2} slots of the link must all be
settable, and the link
endpoints must depend on their values. They will all be overridden with
formulas in the created instances. The default link-prototype is a line.

@code{:node-prototype-selector-function} -- A function which takes the appropriate
corresponding-node and the list of prototypes provided in the @code{:node-prototype}
slot and returns one of the prototypes. Will only be used if the value in the
@code{:node-prototype} slot is a list.

@code{:link-prototype-selector-function} -- A function which takes the
corresponding-link and the list of prototypes provided in
the @code{:link-prototype} slot and returns one of the prototypes.
Will only be used if the value in the @code{:link-prototype} slot is a list.

                @code{:interactors} -- Specified in the same format as
		aggregadgets.
        @end vtable


@b{Read-only slots}

The same read-only slots are available as with @code{aggregraph} except
@code{:graph-roots} (see section @ref{aggregraph-slots}).


@b{Methods} (probably shouldn't be overridden)

The methods of a @code{scalable-aggregraph-image} call the methods of the source
aggregraph, and changes are reflected in the image. If the methods of the
source graph are called directly, the changes will also be reflected.

When this aggregraph image is created, pointers are created in the source
aggregraph and all of its nodes and links to the corresponding image graph,
nodes and links. These pointers are added to a list in the slot
@code{:image-graphs}, @code{:image-nodes} and @code{:image-links}
of the aggregraph, nodes and links. Pointers from the image
to the source are in the slots @code{:source-aggregraph},
@code{:source-node} and @code{:source-link} as indicated below.
These links are used by the methods (both in this
gadget and in the two gadgets described above) to maintain the image.



@section Customizing the :layout-graph Function
@node Customizing the :layout-graph Function
@anchor{layout-graph}
@cindex{layout-graph}
@cindex{layout function}

@b{NOTE:}  Writing a customized layout function is a formidable task that
few users will want to try. This section is provided for programmers whose
aggregraph application requires a graph layout that is not suited to the
default tree layout function.

The function stored in @code{:layout-graph} computes the locations for all of
the nodes and links of the graph.
It takes the graph as its argument, and the returned value is ignored.
All nodes have been created with their height and width, and are
connected to the appropriate links and nodes, before the function is called.

The default layout function is @code{layout-tree} defined in @code{Opal}.
This function can be called repeatedly
on the graph, but may drastically change the look of the graph (if a series
of adds and deletes were done before the relayout). Features of
@code{layout-tree} are:

@itemize
It works best for trees and DAGs which are tree-like
(i.e. DAGs in which the width becomes larger toward the leaves).

It takes linear time in the number of nodes.

Children are treated as unordered.

Add and delete (both nodes and links) attempt to minimally change the
graph.
@end itemize

If a new layout function is written without regard to the bookkeeping
slots or the various methods associated with the aggregraph, the other methods
will work with the new layout function but will probably not keep the graph
looking as nice as possible.

With the default link prototypes it is only necessary to place the nodes,
because the links attach to the nodes automatically with Garnet formulas.
(Note that the default links are designed for a left to right layout of the
graph. If a different layout is desired another prototype may be desired. Of
course, formulas can still be used rather than explicitly placing each link.)

In general, the other graph methods may need to maintain or use the same
bookkeeping information as the layout function. For example, @code{add-node} and
@code{delete-node}
both affect the "@code{:layout-info-}" slots used by the default layout function.
(Specifically they add or delete rectangles respectively from the object
stored in the @code{:layout-info-rect-conflict-object} slot of the graph object.
This object keeps track of all rectangles (nodes) placed on the graph and when
queried with a new rectangle returns any stored rectangles that it overlaps.)
When redefining the layout function, it may be necessary to redefine these
functions.


